# NOTES: This makefile is a little bit tricky, because we want to build
# libraries with two different types of compiled object code: one with
# KDU_X86_INTRINSICS defined and one with KDU_PENTIUM_GCC defined instead.
# The first type of build offers the full set of SIMD optimizations available
# for Linux X86 systems.  On the other hand, this uses the SSE processor
# intrinsics, which produce code that imposes certain stack alignment
# assumptions.  This is no problem when directly linking GCC-compiled
# executables against the libraries built here.  It is a problem, however,
# if the code is going to be dynamically loaded from an unknown environment
# which might offer only 32-bit stack alignment.  One notable example of
# this is the use of Kakadu through Java JNI calls, in which case the JVM
# may (and apparently often does) only offer 32-bit stack alignment on
# 32-bit platforms.  All of these problems go away on 64-bit builds.  To
# get the best of both worlds, the present makefile is designed to invoke
# itself a second time to recompile everything using only KDU_PENTIUM_GCC,
# which is stack-safe.  This second invocation differs from the first
# in that the symbol "BUILD_LIBKDU_STACKSAFE32" has been exported by the
# principle invocation.  The second build puts its results into
# "libkdu_stackafe32.a", which is used by the corresponding makefile in
# "<distribution>/managed/make" to build stack-safe shared libraries for
# use with Java and other potentially hazardous environments.

KDU_GLIBS =
# KDU_GLIBS += -static -static-libgcc # Uncomment this to get a static build

CC = g++

INCLUDES = -I../common
C_OPT =  -O2 -DNDEBUG -Wall -Wno-uninitialized $(KDU_GLIBS)
C_OPT += -fPIC -m32
#C_OPT += -DKDU_NO_CPUID_TEST # Some Linux installations disable the CPUID
    # instruction by default; Add this directive if you would like to skip the
    # test for processor features, based on the CPUID instruction, making
    # some simple, likely to be true, assumptions about MMX/SSE/SSE2 support.

ifdef BUILD_LIBKDU_STACKSAFE32_A
  C_OPT += -DKDU_PENTIUM_GCC # Comment out for no MMX/SSE2 speedups
else
  C_OPT += -msse2 -DKDU_X86_INTRINSICS # Comment out for no MMX/SSE2 speedups
endif

#C_OPT += -DKDU_CUSTOM_TEXT   # See "Internationalization" in "Compilation_Instructions.txt"
#C_OPT += -DKDU_NO_THREADS    # Uncomment to compile without multi-threading
CFLAGS = $(INCLUDES) $(C_OPT)

BIN_DIR = ../../bin/Linux-x86-32-gcc
LIB_DIR = ../../lib/Linux-x86-32-gcc

ifdef BUILD_LIBKDU_STACKSAFE32_A
  all :: clean libkdu_stacksafe32.a
else
  BUILD_LIBKDU_STACKSAFE32_A = stacksafe
  export BUILD_LIBKDU_STACKSAFE32_A
  all :: clean libkdu.a libkdu_v61R.so build_again
  build_again:
	      $(MAKE) -f Makefile-Linux-x86-32-gcc all
endif

clean:
	rm -f *.o *.so *.a

libkdu.a :: block_coding_common.o block_decoder.o block_encoder.o decoder.o encoder.o mq_decoder.o mq_encoder.o blocks.o codestream.o compressed.o kernels.o messaging.o params.o colour.o analysis.o synthesis.o multi_transform.o roi.o kdu_arch.o kdu_threads.o
	ar -rv $(LIB_DIR)/libkdu.a *.o
	ranlib $(LIB_DIR)/libkdu.a

libkdu_stacksafe32.a :: block_coding_common.o block_decoder.o block_encoder.o decoder.o encoder.o mq_decoder.o mq_encoder.o blocks.o codestream.o compressed.o kernels.o messaging.o params.o colour.o analysis.o synthesis.o multi_transform.o roi.o kdu_arch.o kdu_threads.o
	ar -rv $(LIB_DIR)/libkdu_stacksafe32.a *.o
	ranlib $(LIB_DIR)/libkdu_stacksafe32.a

libkdu_v61R.so :: block_coding_common.o block_decoder.o block_encoder.o decoder.o encoder.o mq_decoder.o mq_encoder.o blocks.o codestream.o compressed.o kernels.o messaging.o params.o colour.o analysis.o synthesis.o multi_transform.o roi.o kdu_arch.o kdu_threads.o
	$(CC) $(CFLAGS) -shared -o $(LIB_DIR)/libkdu_v61R.so *.o

kdu_arch.o :: ../common/kdu_arch.cpp
	$(CC) $(CFLAGS) -c ../common/kdu_arch.cpp \
	      -o kdu_arch.o

kdu_threads.o :: ../threads/kdu_threads.cpp
	$(CC) $(CFLAGS) -c ../threads/kdu_threads.cpp \
	      -o kdu_threads.o

mq_encoder.o :: ../coding/mq_encoder.cpp
	$(CC) $(CFLAGS) -c ../coding/mq_encoder.cpp \
	      -o mq_encoder.o
mq_decoder.o :: ../coding/mq_decoder.cpp
	$(CC) $(CFLAGS) -c ../coding/mq_decoder.cpp \
	      -o mq_decoder.o

block_coding_common.o :: ../coding/block_coding_common.cpp
	$(CC) $(CFLAGS) -c ../coding/block_coding_common.cpp \
	      -o block_coding_common.o
block_encoder.o :: ../coding/block_encoder.cpp
	$(CC) $(CFLAGS) -c ../coding/block_encoder.cpp \
	      -o block_encoder.o
block_decoder.o :: ../coding/block_decoder.cpp
	$(CC) $(CFLAGS) -c ../coding/block_decoder.cpp \
	      -o block_decoder.o

encoder.o :: ../coding/encoder.cpp
	$(CC) $(CFLAGS) -c ../coding/encoder.cpp \
	      -o encoder.o
decoder.o :: ../coding/decoder.cpp
	$(CC) $(CFLAGS) -c ../coding/decoder.cpp \
	      -o decoder.o

codestream.o :: ../compressed/codestream.cpp
	$(CC) $(CFLAGS) -c ../compressed/codestream.cpp \
	      -o codestream.o
compressed.o :: ../compressed/compressed.cpp
	$(CC) $(CFLAGS) -c ../compressed/compressed.cpp \
	      -o compressed.o
blocks.o :: ../compressed/blocks.cpp
	$(CC) $(CFLAGS) -c ../compressed/blocks.cpp \
	      -o blocks.o

kernels.o :: ../kernels/kernels.cpp
	$(CC) $(CFLAGS) -c ../kernels/kernels.cpp \
	      -o kernels.o

messaging.o :: ../messaging/messaging.cpp
	$(CC) $(CFLAGS) -c ../messaging/messaging.cpp \
	      -o messaging.o

params.o :: ../parameters/params.cpp
	$(CC) $(CFLAGS) -c ../parameters/params.cpp \


colour.o :: ../transform/colour.cpp
	$(CC) $(CFLAGS) -c ../transform/colour.cpp \
	      -o colour.o
analysis.o :: ../transform/analysis.cpp
	$(CC) $(CFLAGS) -c ../transform/analysis.cpp \
	      -o analysis.o
synthesis.o :: ../transform/synthesis.cpp
	$(CC) $(CFLAGS) -c ../transform/synthesis.cpp \
	      -o synthesis.o
multi_transform.o :: ../transform/multi_transform.cpp
	$(CC) $(CFLAGS) -c ../transform/multi_transform.cpp \
	      -o multi_transform.o

roi.o :: ../roi/roi.cpp
	$(CC) $(CFLAGS) -c ../roi/roi.cpp \
	      -o roi.o
