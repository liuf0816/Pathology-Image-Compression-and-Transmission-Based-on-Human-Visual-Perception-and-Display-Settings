// This file has been automatically generated by "kdu_hyperdoc"
// Do not edit manually.
// Copyright 2001, David Taubman, The University of New South Wales (UNSW)

#include <new>
#include <assert.h>
#include "../kdu_aux/kdu_aux.h"
#include "kdu_jni.h"

/*****************************************************************************/
/*              Global mutex used to guard class loading logic               */
/*****************************************************************************/

class kdjni__LOADER_lock {
  public: // Member functions
    kdjni__LOADER_lock() { mutex.create(); }
    ~kdjni__LOADER_lock() { mutex.destroy(); }
    void acquire() { mutex.lock(); }
    void release() { mutex.unlock(); }
  private: // Data members
    kdu_mutex mutex;
  };

static kdjni__LOADER_lock __class_LOADER_lock;


/*****************************************************************************/
/*                             Utility functions                             */
/*****************************************************************************/

static void checkForJavaException(JNIEnv *__env, bool badAlloc)
{
  if (__env->ExceptionOccurred() == NULL)
    {
        char *exception_class_name;
        if (badAlloc)
            exception_class_name = "java/lang/OutOfMemoryError";
        else
            exception_class_name = "kdu_jni/KduException";
        jclass exception_class = __env->FindClass(exception_class_name);
        if (exception_class==NULL)
            return;
        __env->ThrowNew(exception_class, "Unexpected exception in Kdu library");
    }
}


/*****************************************************************************/
/*                            Class Loading Logic                            */
/*****************************************************************************/

static jclass Ads_params_CLS = NULL;
static jfieldID Ads_params_PTR = NULL;
static void Ads_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Ads_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Ads_params_CLS == NULL)
    {
      Ads_params_PTR = kdu_field;
      Ads_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Atk_params_CLS = NULL;
static jfieldID Atk_params_PTR = NULL;
static void Atk_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Atk_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Atk_params_CLS == NULL)
    {
      Atk_params_PTR = kdu_field;
      Atk_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Cod_params_CLS = NULL;
static jfieldID Cod_params_PTR = NULL;
static void Cod_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Cod_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Cod_params_CLS == NULL)
    {
      Cod_params_PTR = kdu_field;
      Cod_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Crg_params_CLS = NULL;
static jfieldID Crg_params_PTR = NULL;
static void Crg_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Crg_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Crg_params_CLS == NULL)
    {
      Crg_params_PTR = kdu_field;
      Crg_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Dfs_params_CLS = NULL;
static jfieldID Dfs_params_PTR = NULL;
static void Dfs_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Dfs_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Dfs_params_CLS == NULL)
    {
      Dfs_params_PTR = kdu_field;
      Dfs_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_channels_CLS = NULL;
static jfieldID Jp2_channels_PTR = NULL;
static void Jp2_channels_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_channels");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_channels_CLS == NULL)
    {
      Jp2_channels_PTR = kdu_field;
      Jp2_channels_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_colour_CLS = NULL;
static jfieldID Jp2_colour_PTR = NULL;
static void Jp2_colour_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_colour");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_colour_CLS == NULL)
    {
      Jp2_colour_PTR = kdu_field;
      Jp2_colour_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_colour_converter_CLS = NULL;
static jfieldID Jp2_colour_converter_PTR = NULL;
static void Jp2_colour_converter_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_colour_converter");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_colour_converter_CLS == NULL)
    {
      Jp2_colour_converter_PTR = kdu_field;
      Jp2_colour_converter_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_data_references_CLS = NULL;
static jfieldID Jp2_data_references_PTR = NULL;
static void Jp2_data_references_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_data_references");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_data_references_CLS == NULL)
    {
      Jp2_data_references_PTR = kdu_field;
      Jp2_data_references_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_dimensions_CLS = NULL;
static jfieldID Jp2_dimensions_PTR = NULL;
static void Jp2_dimensions_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_dimensions");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_dimensions_CLS == NULL)
    {
      Jp2_dimensions_PTR = kdu_field;
      Jp2_dimensions_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_family_src_CLS = NULL;
static jfieldID Jp2_family_src_PTR = NULL;
static void Jp2_family_src_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_family_src");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_family_src_CLS == NULL)
    {
      Jp2_family_src_PTR = kdu_field;
      Jp2_family_src_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_family_tgt_CLS = NULL;
static jfieldID Jp2_family_tgt_PTR = NULL;
static void Jp2_family_tgt_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_family_tgt");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_family_tgt_CLS == NULL)
    {
      Jp2_family_tgt_PTR = kdu_field;
      Jp2_family_tgt_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_input_box_CLS = NULL;
static jfieldID Jp2_input_box_PTR = NULL;
static void Jp2_input_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_input_box");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_input_box_CLS == NULL)
    {
      Jp2_input_box_PTR = kdu_field;
      Jp2_input_box_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_locator_CLS = NULL;
static jfieldID Jp2_locator_PTR = NULL;
static void Jp2_locator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_locator");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_locator_CLS == NULL)
    {
      Jp2_locator_PTR = kdu_field;
      Jp2_locator_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_output_box_CLS = NULL;
static jfieldID Jp2_output_box_PTR = NULL;
static void Jp2_output_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_output_box");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_output_box_CLS == NULL)
    {
      Jp2_output_box_PTR = kdu_field;
      Jp2_output_box_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_palette_CLS = NULL;
static jfieldID Jp2_palette_PTR = NULL;
static void Jp2_palette_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_palette");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_palette_CLS == NULL)
    {
      Jp2_palette_PTR = kdu_field;
      Jp2_palette_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_resolution_CLS = NULL;
static jfieldID Jp2_resolution_PTR = NULL;
static void Jp2_resolution_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_resolution");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_resolution_CLS == NULL)
    {
      Jp2_resolution_PTR = kdu_field;
      Jp2_resolution_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_source_CLS = NULL;
static jfieldID Jp2_source_PTR = NULL;
static void Jp2_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_source_CLS == NULL)
    {
      Jp2_source_PTR = kdu_field;
      Jp2_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jp2_target_CLS = NULL;
static jfieldID Jp2_target_PTR = NULL;
static void Jp2_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jp2_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jp2_target_CLS == NULL)
    {
      Jp2_target_PTR = kdu_field;
      Jp2_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_codestream_source_CLS = NULL;
static jfieldID Jpx_codestream_source_PTR = NULL;
static void Jpx_codestream_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_codestream_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_codestream_source_CLS == NULL)
    {
      Jpx_codestream_source_PTR = kdu_field;
      Jpx_codestream_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_codestream_target_CLS = NULL;
static jfieldID Jpx_codestream_target_PTR = NULL;
static void Jpx_codestream_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_codestream_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_codestream_target_CLS == NULL)
    {
      Jpx_codestream_target_PTR = kdu_field;
      Jpx_codestream_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_compatibility_CLS = NULL;
static jfieldID Jpx_compatibility_PTR = NULL;
static void Jpx_compatibility_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_compatibility");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_compatibility_CLS == NULL)
    {
      Jpx_compatibility_PTR = kdu_field;
      Jpx_compatibility_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_composition_CLS = NULL;
static jfieldID Jpx_composition_PTR = NULL;
static void Jpx_composition_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_composition");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_composition_CLS == NULL)
    {
      Jpx_composition_PTR = kdu_field;
      Jpx_composition_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_fragment_list_CLS = NULL;
static jfieldID Jpx_fragment_list_PTR = NULL;
static void Jpx_fragment_list_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_fragment_list");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_fragment_list_CLS == NULL)
    {
      Jpx_fragment_list_PTR = kdu_field;
      Jpx_fragment_list_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_frame_expander_CLS = NULL;
static jfieldID Jpx_frame_expander_PTR = NULL;
static void Jpx_frame_expander_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_frame_expander");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_frame_expander_CLS == NULL)
    {
      Jpx_frame_expander_PTR = kdu_field;
      Jpx_frame_expander_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_input_box_CLS = NULL;
static jfieldID Jpx_input_box_PTR = NULL;
static void Jpx_input_box_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_input_box");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_input_box_CLS == NULL)
    {
      Jpx_input_box_PTR = kdu_field;
      Jpx_input_box_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_layer_source_CLS = NULL;
static jfieldID Jpx_layer_source_PTR = NULL;
static void Jpx_layer_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_layer_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_layer_source_CLS == NULL)
    {
      Jpx_layer_source_PTR = kdu_field;
      Jpx_layer_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_layer_target_CLS = NULL;
static jfieldID Jpx_layer_target_PTR = NULL;
static void Jpx_layer_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_layer_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_layer_target_CLS == NULL)
    {
      Jpx_layer_target_PTR = kdu_field;
      Jpx_layer_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_meta_manager_CLS = NULL;
static jfieldID Jpx_meta_manager_PTR = NULL;
static void Jpx_meta_manager_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_meta_manager");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_meta_manager_CLS == NULL)
    {
      Jpx_meta_manager_PTR = kdu_field;
      Jpx_meta_manager_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_metanode_CLS = NULL;
static jfieldID Jpx_metanode_PTR = NULL;
static void Jpx_metanode_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_metanode");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_metanode_CLS == NULL)
    {
      Jpx_metanode_PTR = kdu_field;
      Jpx_metanode_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_roi_CLS = NULL;
static jfieldID Jpx_roi_PTR = NULL;
static void Jpx_roi_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_roi");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_roi_CLS == NULL)
    {
      Jpx_roi_PTR = kdu_field;
      Jpx_roi_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_source_CLS = NULL;
static jfieldID Jpx_source_PTR = NULL;
static void Jpx_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_source_CLS == NULL)
    {
      Jpx_source_PTR = kdu_field;
      Jpx_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Jpx_target_CLS = NULL;
static jfieldID Jpx_target_PTR = NULL;
static void Jpx_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Jpx_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Jpx_target_CLS == NULL)
    {
      Jpx_target_PTR = kdu_field;
      Jpx_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_analysis_CLS = NULL;
static jfieldID Kdu_analysis_PTR = NULL;
static void Kdu_analysis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_analysis");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_analysis_CLS == NULL)
    {
      Kdu_analysis_PTR = kdu_field;
      Kdu_analysis_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_CLS = NULL;
static jfieldID Kdu_block_PTR = NULL;
static void Kdu_block_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_block_CLS == NULL)
    {
      Kdu_block_PTR = kdu_field;
      Kdu_block_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_decoder_CLS = NULL;
static jfieldID Kdu_block_decoder_PTR = NULL;
static void Kdu_block_decoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block_decoder");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_block_decoder_CLS == NULL)
    {
      Kdu_block_decoder_PTR = kdu_field;
      Kdu_block_decoder_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_block_encoder_CLS = NULL;
static jfieldID Kdu_block_encoder_PTR = NULL;
static void Kdu_block_encoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_block_encoder");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_block_encoder_CLS == NULL)
    {
      Kdu_block_encoder_PTR = kdu_field;
      Kdu_block_encoder_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_cache_CLS = NULL;
static jfieldID Kdu_cache_PTR = NULL;
static void Kdu_cache_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_cache");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_cache_CLS == NULL)
    {
      Kdu_cache_PTR = kdu_field;
      Kdu_cache_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_channel_mapping_CLS = NULL;
static jfieldID Kdu_channel_mapping_PTR = NULL;
static void Kdu_channel_mapping_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_channel_mapping");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_channel_mapping_CLS == NULL)
    {
      Kdu_channel_mapping_PTR = kdu_field;
      Kdu_channel_mapping_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_CLS = NULL;
static jfieldID Kdu_client_PTR = NULL;
static void Kdu_client_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_client_CLS == NULL)
    {
      Kdu_client_PTR = kdu_field;
      Kdu_client_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_notifier_CLS = NULL;
static jfieldID Kdu_client_notifier_PTR = NULL;
static void Kdu_client_notifier_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client_notifier");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_client_notifier_CLS == NULL)
    {
      Kdu_client_notifier_PTR = kdu_field;
      Kdu_client_notifier_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_client_translator_CLS = NULL;
static jfieldID Kdu_client_translator_PTR = NULL;
static void Kdu_client_translator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_client_translator");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_client_translator_CLS == NULL)
    {
      Kdu_client_translator_PTR = kdu_field;
      Kdu_client_translator_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_clientx_CLS = NULL;
static jfieldID Kdu_clientx_PTR = NULL;
static void Kdu_clientx_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_clientx");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_clientx_CLS == NULL)
    {
      Kdu_clientx_PTR = kdu_field;
      Kdu_clientx_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_codestream_CLS = NULL;
static jfieldID Kdu_codestream_PTR = NULL;
static void Kdu_codestream_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_codestream");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_codestream_CLS == NULL)
    {
      Kdu_codestream_PTR = kdu_field;
      Kdu_codestream_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_codestream_comment_CLS = NULL;
static jfieldID Kdu_codestream_comment_PTR = NULL;
static void Kdu_codestream_comment_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_codestream_comment");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_codestream_comment_CLS == NULL)
    {
      Kdu_codestream_comment_PTR = kdu_field;
      Kdu_codestream_comment_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compositor_buf_CLS = NULL;
static jfieldID Kdu_compositor_buf_PTR = NULL;
static void Kdu_compositor_buf_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compositor_buf");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compositor_buf_CLS == NULL)
    {
      Kdu_compositor_buf_PTR = kdu_field;
      Kdu_compositor_buf_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_source_CLS = NULL;
static jfieldID Kdu_compressed_source_PTR = NULL;
static void Kdu_compressed_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_source_CLS == NULL)
    {
      Kdu_compressed_source_PTR = kdu_field;
      Kdu_compressed_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_source_nonnative_CLS = NULL;
static jfieldID Kdu_compressed_source_nonnative_PTR = NULL;
static void Kdu_compressed_source_nonnative_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_source_nonnative");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_source_nonnative_CLS == NULL)
    {
      Kdu_compressed_source_nonnative_PTR = kdu_field;
      Kdu_compressed_source_nonnative_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_target_CLS = NULL;
static jfieldID Kdu_compressed_target_PTR = NULL;
static void Kdu_compressed_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_target_CLS == NULL)
    {
      Kdu_compressed_target_PTR = kdu_field;
      Kdu_compressed_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_target_nonnative_CLS = NULL;
static jfieldID Kdu_compressed_target_nonnative_PTR = NULL;
static void Kdu_compressed_target_nonnative_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_target_nonnative");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_target_nonnative_CLS == NULL)
    {
      Kdu_compressed_target_nonnative_PTR = kdu_field;
      Kdu_compressed_target_nonnative_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_video_source_CLS = NULL;
static jfieldID Kdu_compressed_video_source_PTR = NULL;
static void Kdu_compressed_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_video_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_video_source_CLS == NULL)
    {
      Kdu_compressed_video_source_PTR = kdu_field;
      Kdu_compressed_video_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_compressed_video_target_CLS = NULL;
static jfieldID Kdu_compressed_video_target_PTR = NULL;
static void Kdu_compressed_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_compressed_video_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_compressed_video_target_CLS == NULL)
    {
      Kdu_compressed_video_target_PTR = kdu_field;
      Kdu_compressed_video_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_coords_CLS = NULL;
static jfieldID Kdu_coords_PTR = NULL;
static void Kdu_coords_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_coords");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_coords_CLS == NULL)
    {
      Kdu_coords_PTR = kdu_field;
      Kdu_coords_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_decoder_CLS = NULL;
static jfieldID Kdu_decoder_PTR = NULL;
static void Kdu_decoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_decoder");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_decoder_CLS == NULL)
    {
      Kdu_decoder_PTR = kdu_field;
      Kdu_decoder_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_dims_CLS = NULL;
static jfieldID Kdu_dims_PTR = NULL;
static void Kdu_dims_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_dims");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_dims_CLS == NULL)
    {
      Kdu_dims_PTR = kdu_field;
      Kdu_dims_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_encoder_CLS = NULL;
static jfieldID Kdu_encoder_PTR = NULL;
static void Kdu_encoder_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_encoder");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_encoder_CLS == NULL)
    {
      Kdu_encoder_PTR = kdu_field;
      Kdu_encoder_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_line_buf_CLS = NULL;
static jfieldID Kdu_line_buf_PTR = NULL;
static void Kdu_line_buf_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_line_buf");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_line_buf_CLS == NULL)
    {
      Kdu_line_buf_PTR = kdu_field;
      Kdu_line_buf_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_message_CLS = NULL;
static jfieldID Kdu_message_PTR = NULL;
static void Kdu_message_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_message");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_message_CLS == NULL)
    {
      Kdu_message_PTR = kdu_field;
      Kdu_message_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_message_formatter_CLS = NULL;
static jfieldID Kdu_message_formatter_PTR = NULL;
static void Kdu_message_formatter_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_message_formatter");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_message_formatter_CLS == NULL)
    {
      Kdu_message_formatter_PTR = kdu_field;
      Kdu_message_formatter_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_metareq_CLS = NULL;
static jfieldID Kdu_metareq_PTR = NULL;
static void Kdu_metareq_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_metareq");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_metareq_CLS == NULL)
    {
      Kdu_metareq_PTR = kdu_field;
      Kdu_metareq_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_multi_analysis_CLS = NULL;
static jfieldID Kdu_multi_analysis_PTR = NULL;
static void Kdu_multi_analysis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_multi_analysis");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_multi_analysis_CLS == NULL)
    {
      Kdu_multi_analysis_PTR = kdu_field;
      Kdu_multi_analysis_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_multi_synthesis_CLS = NULL;
static jfieldID Kdu_multi_synthesis_PTR = NULL;
static void Kdu_multi_synthesis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_multi_synthesis");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_multi_synthesis_CLS == NULL)
    {
      Kdu_multi_synthesis_PTR = kdu_field;
      Kdu_multi_synthesis_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_node_CLS = NULL;
static jfieldID Kdu_node_PTR = NULL;
static void Kdu_node_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_node");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_node_CLS == NULL)
    {
      Kdu_node_PTR = kdu_field;
      Kdu_node_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_output_CLS = NULL;
static jfieldID Kdu_output_PTR = NULL;
static void Kdu_output_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_output");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_output_CLS == NULL)
    {
      Kdu_output_PTR = kdu_field;
      Kdu_output_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_params_CLS = NULL;
static jfieldID Kdu_params_PTR = NULL;
static void Kdu_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_params_CLS == NULL)
    {
      Kdu_params_PTR = kdu_field;
      Kdu_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_precinct_CLS = NULL;
static jfieldID Kdu_precinct_PTR = NULL;
static void Kdu_precinct_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_precinct");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_precinct_CLS == NULL)
    {
      Kdu_precinct_PTR = kdu_field;
      Kdu_precinct_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_pull_ifc_CLS = NULL;
static jfieldID Kdu_pull_ifc_PTR = NULL;
static void Kdu_pull_ifc_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_pull_ifc");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_pull_ifc_CLS == NULL)
    {
      Kdu_pull_ifc_PTR = kdu_field;
      Kdu_pull_ifc_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_push_ifc_CLS = NULL;
static jfieldID Kdu_push_ifc_PTR = NULL;
static void Kdu_push_ifc_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_push_ifc");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_push_ifc_CLS == NULL)
    {
      Kdu_push_ifc_PTR = kdu_field;
      Kdu_push_ifc_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_range_set_CLS = NULL;
static jfieldID Kdu_range_set_PTR = NULL;
static void Kdu_range_set_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_range_set");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_range_set_CLS == NULL)
    {
      Kdu_range_set_PTR = kdu_field;
      Kdu_range_set_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_region_compositor_CLS = NULL;
static jfieldID Kdu_region_compositor_PTR = NULL;
static void Kdu_region_compositor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_region_compositor");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_region_compositor_CLS == NULL)
    {
      Kdu_region_compositor_PTR = kdu_field;
      Kdu_region_compositor_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_region_decompressor_CLS = NULL;
static jfieldID Kdu_region_decompressor_PTR = NULL;
static void Kdu_region_decompressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_region_decompressor");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_region_decompressor_CLS == NULL)
    {
      Kdu_region_decompressor_PTR = kdu_field;
      Kdu_region_decompressor_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_resolution_CLS = NULL;
static jfieldID Kdu_resolution_PTR = NULL;
static void Kdu_resolution_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_resolution");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_resolution_CLS == NULL)
    {
      Kdu_resolution_PTR = kdu_field;
      Kdu_resolution_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_roi_image_CLS = NULL;
static jfieldID Kdu_roi_image_PTR = NULL;
static void Kdu_roi_image_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_roi_image");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_roi_image_CLS == NULL)
    {
      Kdu_roi_image_PTR = kdu_field;
      Kdu_roi_image_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_roi_node_CLS = NULL;
static jfieldID Kdu_roi_node_PTR = NULL;
static void Kdu_roi_node_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_roi_node");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_roi_node_CLS == NULL)
    {
      Kdu_roi_node_PTR = kdu_field;
      Kdu_roi_node_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_sample_allocator_CLS = NULL;
static jfieldID Kdu_sample_allocator_PTR = NULL;
static void Kdu_sample_allocator_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_sample_allocator");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_sample_allocator_CLS == NULL)
    {
      Kdu_sample_allocator_PTR = kdu_field;
      Kdu_sample_allocator_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_sampled_range_CLS = NULL;
static jfieldID Kdu_sampled_range_PTR = NULL;
static void Kdu_sampled_range_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_sampled_range");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_sampled_range_CLS == NULL)
    {
      Kdu_sampled_range_PTR = kdu_field;
      Kdu_sampled_range_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_serve_CLS = NULL;
static jfieldID Kdu_serve_PTR = NULL;
static void Kdu_serve_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_serve");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_serve_CLS == NULL)
    {
      Kdu_serve_PTR = kdu_field;
      Kdu_serve_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_serve_target_CLS = NULL;
static jfieldID Kdu_serve_target_PTR = NULL;
static void Kdu_serve_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_serve_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_serve_target_CLS == NULL)
    {
      Kdu_serve_target_PTR = kdu_field;
      Kdu_serve_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_servex_CLS = NULL;
static jfieldID Kdu_servex_PTR = NULL;
static void Kdu_servex_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_servex");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_servex_CLS == NULL)
    {
      Kdu_servex_PTR = kdu_field;
      Kdu_servex_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_file_source_CLS = NULL;
static jfieldID Kdu_simple_file_source_PTR = NULL;
static void Kdu_simple_file_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_file_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_file_source_CLS == NULL)
    {
      Kdu_simple_file_source_PTR = kdu_field;
      Kdu_simple_file_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_file_target_CLS = NULL;
static jfieldID Kdu_simple_file_target_PTR = NULL;
static void Kdu_simple_file_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_file_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_file_target_CLS == NULL)
    {
      Kdu_simple_file_target_PTR = kdu_field;
      Kdu_simple_file_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_video_source_CLS = NULL;
static jfieldID Kdu_simple_video_source_PTR = NULL;
static void Kdu_simple_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_video_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_video_source_CLS == NULL)
    {
      Kdu_simple_video_source_PTR = kdu_field;
      Kdu_simple_video_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_simple_video_target_CLS = NULL;
static jfieldID Kdu_simple_video_target_PTR = NULL;
static void Kdu_simple_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_simple_video_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_simple_video_target_CLS == NULL)
    {
      Kdu_simple_video_target_PTR = kdu_field;
      Kdu_simple_video_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_stripe_compressor_CLS = NULL;
static jfieldID Kdu_stripe_compressor_PTR = NULL;
static void Kdu_stripe_compressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_stripe_compressor");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_stripe_compressor_CLS == NULL)
    {
      Kdu_stripe_compressor_PTR = kdu_field;
      Kdu_stripe_compressor_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_stripe_decompressor_CLS = NULL;
static jfieldID Kdu_stripe_decompressor_PTR = NULL;
static void Kdu_stripe_decompressor_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_stripe_decompressor");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_stripe_decompressor_CLS == NULL)
    {
      Kdu_stripe_decompressor_PTR = kdu_field;
      Kdu_stripe_decompressor_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_subband_CLS = NULL;
static jfieldID Kdu_subband_PTR = NULL;
static void Kdu_subband_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_subband");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_subband_CLS == NULL)
    {
      Kdu_subband_PTR = kdu_field;
      Kdu_subband_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_synthesis_CLS = NULL;
static jfieldID Kdu_synthesis_PTR = NULL;
static void Kdu_synthesis_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_synthesis");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_synthesis_CLS == NULL)
    {
      Kdu_synthesis_PTR = kdu_field;
      Kdu_synthesis_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_entity_CLS = NULL;
static jfieldID Kdu_thread_entity_PTR = NULL;
static void Kdu_thread_entity_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_entity");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_entity_CLS == NULL)
    {
      Kdu_thread_entity_PTR = kdu_field;
      Kdu_thread_entity_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_env_CLS = NULL;
static jfieldID Kdu_thread_env_PTR = NULL;
static void Kdu_thread_env_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_env");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_env_CLS == NULL)
    {
      Kdu_thread_env_PTR = kdu_field;
      Kdu_thread_env_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_thread_safe_message_CLS = NULL;
static jfieldID Kdu_thread_safe_message_PTR = NULL;
static void Kdu_thread_safe_message_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_thread_safe_message");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_thread_safe_message_CLS == NULL)
    {
      Kdu_thread_safe_message_PTR = kdu_field;
      Kdu_thread_safe_message_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tiffdir_CLS = NULL;
static jfieldID Kdu_tiffdir_PTR = NULL;
static void Kdu_tiffdir_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tiffdir");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_tiffdir_CLS == NULL)
    {
      Kdu_tiffdir_PTR = kdu_field;
      Kdu_tiffdir_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tile_CLS = NULL;
static jfieldID Kdu_tile_PTR = NULL;
static void Kdu_tile_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tile");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_tile_CLS == NULL)
    {
      Kdu_tile_PTR = kdu_field;
      Kdu_tile_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_tile_comp_CLS = NULL;
static jfieldID Kdu_tile_comp_PTR = NULL;
static void Kdu_tile_comp_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_tile_comp");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_tile_comp_CLS == NULL)
    {
      Kdu_tile_comp_PTR = kdu_field;
      Kdu_tile_comp_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_window_CLS = NULL;
static jfieldID Kdu_window_PTR = NULL;
static void Kdu_window_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_window");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_window_CLS == NULL)
    {
      Kdu_window_PTR = kdu_field;
      Kdu_window_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Kdu_worker_CLS = NULL;
static jfieldID Kdu_worker_PTR = NULL;
static void Kdu_worker_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Kdu_worker");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Kdu_worker_CLS == NULL)
    {
      Kdu_worker_PTR = kdu_field;
      Kdu_worker_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mcc_params_CLS = NULL;
static jfieldID Mcc_params_PTR = NULL;
static void Mcc_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mcc_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mcc_params_CLS == NULL)
    {
      Mcc_params_PTR = kdu_field;
      Mcc_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mco_params_CLS = NULL;
static jfieldID Mco_params_PTR = NULL;
static void Mco_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mco_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mco_params_CLS == NULL)
    {
      Mco_params_PTR = kdu_field;
      Mco_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mct_params_CLS = NULL;
static jfieldID Mct_params_PTR = NULL;
static void Mct_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mct_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mct_params_CLS == NULL)
    {
      Mct_params_PTR = kdu_field;
      Mct_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_source_CLS = NULL;
static jfieldID Mj2_source_PTR = NULL;
static void Mj2_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mj2_source_CLS == NULL)
    {
      Mj2_source_PTR = kdu_field;
      Mj2_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_target_CLS = NULL;
static jfieldID Mj2_target_PTR = NULL;
static void Mj2_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mj2_target_CLS == NULL)
    {
      Mj2_target_PTR = kdu_field;
      Mj2_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_video_source_CLS = NULL;
static jfieldID Mj2_video_source_PTR = NULL;
static void Mj2_video_source_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_video_source");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mj2_video_source_CLS == NULL)
    {
      Mj2_video_source_PTR = kdu_field;
      Mj2_video_source_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Mj2_video_target_CLS = NULL;
static jfieldID Mj2_video_target_PTR = NULL;
static void Mj2_video_target_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Mj2_video_target");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Mj2_video_target_CLS == NULL)
    {
      Mj2_video_target_PTR = kdu_field;
      Mj2_video_target_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Org_params_CLS = NULL;
static jfieldID Org_params_PTR = NULL;
static void Org_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Org_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Org_params_CLS == NULL)
    {
      Org_params_PTR = kdu_field;
      Org_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Poc_params_CLS = NULL;
static jfieldID Poc_params_PTR = NULL;
static void Poc_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Poc_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Poc_params_CLS == NULL)
    {
      Poc_params_PTR = kdu_field;
      Poc_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Qcd_params_CLS = NULL;
static jfieldID Qcd_params_PTR = NULL;
static void Qcd_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Qcd_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Qcd_params_CLS == NULL)
    {
      Qcd_params_PTR = kdu_field;
      Qcd_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Rgn_params_CLS = NULL;
static jfieldID Rgn_params_PTR = NULL;
static void Rgn_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Rgn_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Rgn_params_CLS == NULL)
    {
      Rgn_params_PTR = kdu_field;
      Rgn_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

static jclass Siz_params_CLS = NULL;
static jfieldID Siz_params_PTR = NULL;
static void Siz_params_LOADER(JNIEnv *__env)
{
  jclass kdu_class = __env->FindClass("kdu_jni/Siz_params");
  if (kdu_class==NULL) throw 0;
  kdu_class = (jclass) __env->NewGlobalRef(kdu_class);
  jfieldID kdu_field = __env->GetFieldID(kdu_class,"_native_ptr","J");
  if (kdu_field==NULL) throw 0;
  __class_LOADER_lock.acquire();
  if (Siz_params_CLS == NULL)
    {
      Siz_params_PTR = kdu_field;
      Siz_params_CLS = kdu_class;
      kdu_class = NULL;
    }
  __class_LOADER_lock.release();
  if (kdu_class != NULL)
    __env->DeleteGlobalRef(kdu_class);
}

/*****************************************************************************/
/*                                Kdu_global                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Ceil_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den)
{
  try {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = ceil_ratio(num,den);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Floor_1ratio(JNIEnv *__env, jclass this_class, jint _num, jint _den)
{
  try {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = floor_ratio(num,den);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Jp2_14cc_1to_1int__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    kdu_uint32 Result;
    try { // So we can clean up temporary arrays
    Result = jp2_4cc_to_int(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1global_Jp2_1is_1superbox(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    Result = jp2_is_superbox(box_type);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1rgb_1to_1ycc(JNIEnv *__env, jobject _self, jobject _c1, jobject _c2, jobject _c3)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *c1 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c1,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c2 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c2,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c3 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c3,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_convert_rgb_to_ycc(*c1,*c2,*c3);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1convert_1ycc_1to_1rgb(JNIEnv *__env, jobject _self, jobject _c1, jobject _c2, jobject _c3, jint _width)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *c1 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c1,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c2 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c2,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *c3 = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_c3,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    kdu_convert_ycc_to_rgb(*c1,*c2,*c3,width);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1errors(JNIEnv *__env, jobject _self, jobject _handler)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *handler = (kdu_message *)
      _kdu_long_to_addr((_handler==NULL)?((jlong) 0):(__env->GetLongField(_handler,Kdu_message_PTR) & ~((jlong) 1)));
    kdu_customize_errors(handler);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2JLjava_lang_String_2Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jstring _lead_in, jstring _text)
{
  try {
    const char *context = NULL;
    if (_context != NULL)
      {
        context = __env->GetStringUTFChars(_context,NULL);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    const char *lead_in = NULL;
    if (_lead_in != NULL)
      {
        lead_in = __env->GetStringUTFChars(_lead_in,NULL);
      }
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        __env->ReleaseStringUTFChars(_lead_in,lead_in);
      }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        __env->ReleaseStringUTFChars(_lead_in,lead_in);
      }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1text__Ljava_lang_String_2J_3I_3I(JNIEnv *__env, jobject _self, jstring _context, jlong _id, jintArray _lead_in, jintArray _text)
{
  try {
    const char *context = NULL;
    if (_context != NULL)
      {
        context = __env->GetStringUTFChars(_context,NULL);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    kdu_uint16 *lead_in = NULL;
    jint *lead_in_ELTS = NULL;
    jsize lead_in_L = 0;
    if (_lead_in != NULL)
      {
        lead_in_ELTS = __env->GetIntArrayElements(_lead_in,NULL);
        lead_in_L = __env->GetArrayLength(_lead_in);
        lead_in = new kdu_uint16[lead_in_L];
        { for (int i=0; i<lead_in_L; i++) lead_in[i] = (kdu_uint16)(lead_in_ELTS[i]); }
      }
    kdu_uint16 *text = NULL;
    jint *text_ELTS = NULL;
    jsize text_L = 0;
    if (_text != NULL)
      {
        text_ELTS = __env->GetIntArrayElements(_text,NULL);
        text_L = __env->GetArrayLength(_text);
        text = new kdu_uint16[text_L];
        { for (int i=0; i<text_L; i++) text[i] = (kdu_uint16)(text_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        delete[] lead_in;
        __env->ReleaseIntArrayElements(_lead_in,lead_in_ELTS,0);
      }
    if (_text != NULL)
      {
        delete[] text;
        __env->ReleaseIntArrayElements(_text,text_ELTS,0);
      }
    throw;
    }
    if (_lead_in != NULL)
      {
        for (int i=0; i<lead_in_L; i++) lead_in_ELTS[i] = (jint)(lead_in[i]);
      }
    if (_text != NULL)
      {
        for (int i=0; i<text_L; i++) text_ELTS[i] = (jint)(text[i]);
      }
    if (_context != NULL)
      {
        __env->ReleaseStringUTFChars(_context,context);
      }
    if (_lead_in != NULL)
      {
        delete[] lead_in;
        __env->ReleaseIntArrayElements(_lead_in,lead_in_ELTS,0);
      }
    if (_text != NULL)
      {
        delete[] text;
        __env->ReleaseIntArrayElements(_text,text_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1customize_1warnings(JNIEnv *__env, jobject _self, jobject _handler)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *handler = (kdu_message *)
      _kdu_long_to_addr((_handler==NULL)?((jlong) 0):(__env->GetLongField(_handler,Kdu_message_PTR) & ~((jlong) 1)));
    kdu_customize_warnings(handler);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJ(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long offset = (kdu_long) _offset;
    int Result;
    Result = kdu_fseek(fp,offset);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1fseek__JJI(JNIEnv *__env, jobject _self, jlong _fp, jlong _offset, jint _origin)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long offset = (kdu_long) _offset;
    int origin = (int) _origin;
    int Result;
    Result = kdu_fseek(fp,offset,origin);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1ftell(JNIEnv *__env, jobject _self, jlong _fp)
{
  try {
    FILE *fp = (FILE *) _kdu_long_to_addr(_fp);
    kdu_long Result;
    Result = kdu_ftell(fp);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1core_1version(JNIEnv *__env, jobject _self)
{
  try {
    const char * Result;
    Result = kdu_get_core_version();
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1get_1num_1processors(JNIEnv *__env, jobject _self)
{
  try {
    int Result;
    Result = kdu_get_num_processors();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1error(JNIEnv *__env, jobject _self, jstring _message)
{
  try {
    const char *message = NULL;
    if (_message != NULL)
      {
        message = __env->GetStringUTFChars(_message,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_print_error(message);
    } catch (...) {
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
    throw;
    }
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1global_Kdu_1print_1warning(JNIEnv *__env, jobject _self, jstring _message)
{
  try {
    const char *message = NULL;
    if (_message != NULL)
      {
        message = __env->GetStringUTFChars(_message,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_print_warning(message);
    } catch (...) {
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
    throw;
    }
    if (_message != NULL)
      {
        __env->ReleaseStringUTFChars(_message,message);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1ceil_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den)
{
  try {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = long_ceil_ratio(num,den);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1global_Long_1floor_1ratio(JNIEnv *__env, jclass this_class, jlong _num, jlong _den)
{
  try {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = long_floor_ratio(num,den);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                                Ads_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Ads_params_CLS != NULL) return;
  try {
    Ads_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Ads_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Ads_params_CLS==NULL)
      Ads_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Ads_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Ads_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        ads_params *self = (ads_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Ads_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    ads_params *self =
      new ads_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Atk_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Atk_params_CLS != NULL) return;
  try {
    Atk_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Atk_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Atk_params_CLS==NULL)
      Atk_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Atk_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Atk_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        atk_params *self = (atk_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Atk_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    atk_params *self =
      new atk_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Cod_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Cod_params_CLS != NULL) return;
  try {
    Cod_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Cod_params_CLS==NULL)
      Cod_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Cod_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Cod_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        cod_params *self = (cod_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Cod_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    cod_params *self =
      new cod_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Cod_1params_Is_1valid_1decomp_1terminator(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    bool Result;
    Result = cod_params::is_valid_decomp_terminator(val);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Transpose_1decomp(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    int Result;
    Result = cod_params::transpose_decomp(val);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Cod_1params_Expand_1decomp_1bands(JNIEnv *__env, jclass this_class, jint _decomp_val, jshortArray _band_descriptors)
{
  try {
    int decomp_val = (int) _decomp_val;
    kdu_int16 *band_descriptors = NULL;
    jshort *band_descriptors_ELTS = NULL;
    if (_band_descriptors != NULL)
      {
        band_descriptors_ELTS = __env->GetShortArrayElements(_band_descriptors,NULL);
        band_descriptors = (kdu_int16 *) band_descriptors_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = cod_params::expand_decomp_bands(decomp_val,band_descriptors);
    } catch (...) {
    if (_band_descriptors != NULL)
      {
        __env->ReleaseShortArrayElements(_band_descriptors,band_descriptors_ELTS,0);
      }
    throw;
    }
    if (_band_descriptors != NULL)
      {
        __env->ReleaseShortArrayElements(_band_descriptors,band_descriptors_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Cod_1params_Get_1max_1decomp_1levels(JNIEnv *__env, jclass this_class, jint _decomp_val, jintArray _max_horizontal_levels, jintArray _max_vertical_levels)
{
  try {
    int decomp_val = (int) _decomp_val;
    jint max_horizontal_levels_ELT; __env->GetIntArrayRegion(_max_horizontal_levels,0,1,&max_horizontal_levels_ELT);
    int max_horizontal_levels = (int) max_horizontal_levels_ELT;
    jint max_vertical_levels_ELT; __env->GetIntArrayRegion(_max_vertical_levels,0,1,&max_vertical_levels_ELT);
    int max_vertical_levels = (int) max_vertical_levels_ELT;
    cod_params::get_max_decomp_levels(decomp_val,max_horizontal_levels,max_vertical_levels);
    max_horizontal_levels_ELT = (jint) max_horizontal_levels;
  __env->SetIntArrayRegion(_max_horizontal_levels,0,1,&max_horizontal_levels_ELT);
    max_vertical_levels_ELT = (jint) max_vertical_levels;
  __env->SetIntArrayRegion(_max_vertical_levels,0,1,&max_vertical_levels_ELT);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Crg_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Crg_params_CLS != NULL) return;
  try {
    Crg_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Crg_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Crg_params_CLS==NULL)
      Crg_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Crg_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Crg_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        crg_params *self = (crg_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Crg_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    crg_params *self =
      new crg_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Dfs_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Dfs_params_CLS != NULL) return;
  try {
    Dfs_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Dfs_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Dfs_params_CLS==NULL)
      Dfs_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Dfs_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Dfs_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        dfs_params *self = (dfs_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Dfs_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    dfs_params *self =
      new dfs_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                               Jp2_channels                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_channels_CLS != NULL) return;
  try {
    Jp2_channels_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_channels_PTR)));
    jp2_channels src = *((jp2_channels *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Init(JNIEnv *__env, jobject _self, jint _num_colours)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int num_colours = (int) _num_colours;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.init(num_colours);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.set_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.set_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jint _codestream_component, jint _lut_idx, jint _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.set_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1channels_Set_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jint _key_val)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    kdu_int32 key_val = (kdu_int32) _key_val;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    self.set_chroma_key(colour_idx,key_val);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1channels_Get_1num_1colours(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.get_num_colours();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1colour_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.get_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1opacity_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.get_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1premult_1mapping(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _codestream_component, jintArray _lut_idx, jintArray _codestream_idx)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint codestream_component_ELT; __env->GetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    int codestream_component = (int) codestream_component_ELT;
    jint lut_idx_ELT; __env->GetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    int lut_idx = (int) lut_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.get_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    codestream_component_ELT = (jint) codestream_component;
  __env->SetIntArrayRegion(_codestream_component,0,1,&codestream_component_ELT);
    lut_idx_ELT = (jint) lut_idx;
  __env->SetIntArrayRegion(_lut_idx,0,1,&lut_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1channels_Get_1chroma_1key(JNIEnv *__env, jobject _self, jint _colour_idx, jintArray _key_val)
{
  try {
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    int colour_idx = (int) _colour_idx;
    jint key_val_ELT; __env->GetIntArrayRegion(_key_val,0,1,&key_val_ELT);
    kdu_int32 key_val = (kdu_int32) key_val_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_channels_PTR));
    jp2_channels self = *((jp2_channels *)(&self_S));
    Result = self.get_chroma_key(colour_idx,key_val);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(self_S));
    key_val_ELT = (jint) key_val;
  __env->SetIntArrayRegion(_key_val,0,1,&key_val_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jp2_colour                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_colour_CLS != NULL) return;
  try {
    Jp2_colour_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_colour_PTR)));
    jp2_colour src = *((jp2_colour *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__I(JNIEnv *__env, jobject _self, jint _space)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space space = (jp2_colour_space) _space;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(space);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__IIIIIIIIIIJI(JNIEnv *__env, jobject _self, jint _space, jint _Lrange, jint _Loff, jint _Lbits, jint _Arange, jint _Aoff, jint _Abits, jint _Brange, jint _Boff, jint _Bbits, jlong _illuminant, jint _temperature)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space space = (jp2_colour_space) _space;
    int Lrange = (int) _Lrange;
    int Loff = (int) _Loff;
    int Lbits = (int) _Lbits;
    int Arange = (int) _Arange;
    int Aoff = (int) _Aoff;
    int Abits = (int) _Abits;
    int Brange = (int) _Brange;
    int Boff = (int) _Boff;
    int Bbits = (int) _Bbits;
    kdu_uint32 illuminant = (kdu_uint32) _illuminant;
    kdu_uint16 temperature = (kdu_uint16) _temperature;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(space,Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3B(JNIEnv *__env, jobject _self, jbyteArray _icc_profile)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *icc_profile = NULL;
    jbyte *icc_profile_ELTS = NULL;
    if (_icc_profile != NULL)
      {
        icc_profile_ELTS = __env->GetByteArrayElements(_icc_profile,NULL);
        icc_profile = (kdu_byte *) icc_profile_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(icc_profile);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_icc_profile != NULL)
      {
        __env->ReleaseByteArrayElements(_icc_profile,icc_profile_ELTS,0);
      }
    throw;
    }
    if (_icc_profile != NULL)
      {
        __env->ReleaseByteArrayElements(_icc_profile,icc_profile_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3BI_3B(JNIEnv *__env, jobject _self, jbyteArray _uuid, jint _data_bytes, jbyteArray _data)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    int data_bytes = (int) _data_bytes;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(uuid,data_bytes,data);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init__DDI(JNIEnv *__env, jobject _self, jdouble _gamma, jdouble _beta, jint _num_points)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(gamma,beta,num_points);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_Init___3D_3D_3DDDIZ(JNIEnv *__env, jobject _self, jdoubleArray _xy_red, jdoubleArray _xy_green, jdoubleArray _xy_blue, jdouble _gamma, jdouble _beta, jint _num_points, jboolean _reference_is_D50)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    double *xy_red = NULL;
    jdouble *xy_red_ELTS = NULL;
    if (_xy_red != NULL)
      {
        xy_red_ELTS = __env->GetDoubleArrayElements(_xy_red,NULL);
        xy_red = (double *) xy_red_ELTS;
      }
    double *xy_green = NULL;
    jdouble *xy_green_ELTS = NULL;
    if (_xy_green != NULL)
      {
        xy_green_ELTS = __env->GetDoubleArrayElements(_xy_green,NULL);
        xy_green = (double *) xy_green_ELTS;
      }
    double *xy_blue = NULL;
    jdouble *xy_blue_ELTS = NULL;
    if (_xy_blue != NULL)
      {
        xy_blue_ELTS = __env->GetDoubleArrayElements(_xy_blue,NULL);
        xy_blue = (double *) xy_blue_ELTS;
      }
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    bool reference_is_D50 = (_reference_is_D50)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    self.init(xy_red,xy_green,xy_blue,gamma,beta,num_points,reference_is_D50);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_xy_red != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_red,xy_red_ELTS,0);
      }
    if (_xy_green != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_green,xy_green_ELTS,0);
      }
    if (_xy_blue != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_blue,xy_blue_ELTS,0);
      }
    throw;
    }
    if (_xy_red != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_red,xy_red_ELTS,0);
      }
    if (_xy_green != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_green,xy_green_ELTS,0);
      }
    if (_xy_blue != NULL)
      {
        __env->ReleaseDoubleArrayElements(_xy_blue,xy_blue_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1num_1colours(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_num_colours();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1space(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour_space Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_space();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Is_1opponent_1space(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.is_opponent_space();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1colour_Get_1precedence(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_precedence();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jbyte JNICALL Java_kdu_1jni_Jp2_1colour_Get_1approximation_1level(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_approximation_level();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jbyte) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jbyte) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1icc_1profile(JNIEnv *__env, jobject _self, jintArray _num_bytes)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int *num_bytes = NULL;
    jint *num_bytes_ELTS = NULL;
    if (_num_bytes != NULL)
      {
        num_bytes_ELTS = __env->GetIntArrayElements(_num_bytes,NULL);
        num_bytes = (int *) num_bytes_ELTS;
      }
    kdu_byte *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_icc_profile(num_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    throw;
    }
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1lab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits, jlongArray _illuminant, jintArray _temperature)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jint Lrange_ELT; __env->GetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    int Lrange = (int) Lrange_ELT;
    jint Loff_ELT; __env->GetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    int Loff = (int) Loff_ELT;
    jint Lbits_ELT; __env->GetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    int Lbits = (int) Lbits_ELT;
    jint Arange_ELT; __env->GetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    int Arange = (int) Arange_ELT;
    jint Aoff_ELT; __env->GetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    int Aoff = (int) Aoff_ELT;
    jint Abits_ELT; __env->GetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    int Abits = (int) Abits_ELT;
    jint Brange_ELT; __env->GetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    int Brange = (int) Brange_ELT;
    jint Boff_ELT; __env->GetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    int Boff = (int) Boff_ELT;
    jint Bbits_ELT; __env->GetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    int Bbits = (int) Bbits_ELT;
    jlong illuminant_ELT; __env->GetLongArrayRegion(_illuminant,0,1,&illuminant_ELT);
    kdu_uint32 illuminant = (kdu_uint32) illuminant_ELT;
    jint temperature_ELT; __env->GetIntArrayRegion(_temperature,0,1,&temperature_ELT);
    kdu_uint16 temperature = (kdu_uint16) temperature_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_lab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    Lrange_ELT = (jint) Lrange;
  __env->SetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    Loff_ELT = (jint) Loff;
  __env->SetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    Lbits_ELT = (jint) Lbits;
  __env->SetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    Arange_ELT = (jint) Arange;
  __env->SetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    Aoff_ELT = (jint) Aoff;
  __env->SetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    Abits_ELT = (jint) Abits;
  __env->SetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    Brange_ELT = (jint) Brange;
  __env->SetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    Boff_ELT = (jint) Boff;
  __env->SetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    Bbits_ELT = (jint) Bbits;
  __env->SetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    illuminant_ELT = (jlong) illuminant;
  __env->SetLongArrayRegion(_illuminant,0,1,&illuminant_ELT);
    temperature_ELT = (jint) temperature;
  __env->SetIntArrayRegion(_temperature,0,1,&temperature_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1jab_1params(JNIEnv *__env, jobject _self, jintArray _Lrange, jintArray _Loff, jintArray _Lbits, jintArray _Arange, jintArray _Aoff, jintArray _Abits, jintArray _Brange, jintArray _Boff, jintArray _Bbits)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jint Lrange_ELT; __env->GetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    int Lrange = (int) Lrange_ELT;
    jint Loff_ELT; __env->GetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    int Loff = (int) Loff_ELT;
    jint Lbits_ELT; __env->GetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    int Lbits = (int) Lbits_ELT;
    jint Arange_ELT; __env->GetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    int Arange = (int) Arange_ELT;
    jint Aoff_ELT; __env->GetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    int Aoff = (int) Aoff_ELT;
    jint Abits_ELT; __env->GetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    int Abits = (int) Abits_ELT;
    jint Brange_ELT; __env->GetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    int Brange = (int) Brange_ELT;
    jint Boff_ELT; __env->GetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    int Boff = (int) Boff_ELT;
    jint Bbits_ELT; __env->GetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    int Bbits = (int) Bbits_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_jab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    Lrange_ELT = (jint) Lrange;
  __env->SetIntArrayRegion(_Lrange,0,1,&Lrange_ELT);
    Loff_ELT = (jint) Loff;
  __env->SetIntArrayRegion(_Loff,0,1,&Loff_ELT);
    Lbits_ELT = (jint) Lbits;
  __env->SetIntArrayRegion(_Lbits,0,1,&Lbits_ELT);
    Arange_ELT = (jint) Arange;
  __env->SetIntArrayRegion(_Arange,0,1,&Arange_ELT);
    Aoff_ELT = (jint) Aoff;
  __env->SetIntArrayRegion(_Aoff,0,1,&Aoff_ELT);
    Abits_ELT = (jint) Abits;
  __env->SetIntArrayRegion(_Abits,0,1,&Abits_ELT);
    Brange_ELT = (jint) Brange;
  __env->SetIntArrayRegion(_Brange,0,1,&Brange_ELT);
    Boff_ELT = (jint) Boff;
  __env->SetIntArrayRegion(_Boff,0,1,&Boff_ELT);
    Bbits_ELT = (jint) Bbits;
  __env->SetIntArrayRegion(_Bbits,0,1,&Bbits_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Check_1cie_1default(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.check_cie_default();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_vendor_uuid(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_Get_1vendor_1data(JNIEnv *__env, jobject _self, jintArray _num_bytes)
{
  try {
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int *num_bytes = NULL;
    jint *num_bytes_ELTS = NULL;
    if (_num_bytes != NULL)
      {
        num_bytes_ELTS = __env->GetIntArrayElements(_num_bytes,NULL);
        num_bytes = (int *) num_bytes_ELTS;
      }
    kdu_byte *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_PTR));
    jp2_colour self = *((jp2_colour *)(&self_S));
    Result = self.get_vendor_data(num_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    throw;
    }
    if (_num_bytes != NULL)
      {
        __env->ReleaseIntArrayElements(_num_bytes,num_bytes_ELTS,0);
      }
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

/*****************************************************************************/
/*                           Jp2_colour_converter                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_colour_converter_CLS != NULL) return;
  try {
    Jp2_colour_converter_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_colour_converter_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_colour_converter_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_colour_converter *self = (jp2_colour_converter *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_colour_converter *self =
      new jp2_colour_converter();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Clear(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    self->clear();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Init(JNIEnv *__env, jobject _self, jobject _colour, jboolean _use_wide_gamut, jboolean _prefer_fast_approximations)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    void *colour_S = _kdu_long_to_addr((_colour==NULL)?((jlong) 0):(__env->GetLongField(_colour,Jp2_colour_PTR)));
    jp2_colour colour = *((jp2_colour *)(&colour_S));
    bool use_wide_gamut = (_use_wide_gamut)?true:false;
    bool prefer_fast_approximations = (_prefer_fast_approximations)?true:false;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->init(colour,use_wide_gamut,prefer_fast_approximations);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Get_1wide_1gamut(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->get_wide_gamut();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1approximate(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->is_approximate();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Is_1non_1trivial(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->is_non_trivial();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1lum(JNIEnv *__env, jobject _self, jobject _line, jint _width)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->convert_lum(*line,width);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jint _width)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *red = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_red,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *green = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_green,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *blue = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_blue,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->convert_rgb(*red,*green,*blue,width);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1colour_1converter_Convert_1rgb4(JNIEnv *__env, jobject _self, jobject _red, jobject _green, jobject _blue, jobject _extra, jint _width)
{
  try {
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *red = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_red,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *green = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_green,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *blue = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_blue,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_line_buf *extra = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_extra,Kdu_line_buf_PTR) & ~((jlong) 1));
    int width = (int) _width;
    bool Result;
    jp2_colour_converter *self = (jp2_colour_converter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_colour_converter_PTR) & ~((jlong) 1));
    Result = self->convert_rgb4(*red,*green,*blue,*extra,width);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Jp2_data_references                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1data_1references_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_data_references_CLS != NULL) return;
  try {
    Jp2_data_references_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1data_1references_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Add_1url(JNIEnv *__env, jobject _self, jstring _url, jint _url_idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    int url_idx = (int) _url_idx;
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.add_url(url,url_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1num_1urls(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.get_num_urls();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1data_1references_Find_1url(JNIEnv *__env, jobject _self, jstring _url)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.find_url(url);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1data_1references_Get_1url(JNIEnv *__env, jobject _self, jint _idx)
{
  try {
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    int idx = (int) _idx;
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_data_references_PTR));
    jp2_data_references self = *((jp2_data_references *)(&self_S));
    Result = self.get_url(idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(self_S));
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                              Jp2_dimensions                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_dimensions_CLS != NULL) return;
  try {
    Jp2_dimensions_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_dimensions_PTR)));
    jp2_dimensions src = *((jp2_dimensions *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Kdu_1coords_2IZI(JNIEnv *__env, jobject _self, jobject _size, jint _num_components, jboolean _unknown_space, jint _compression_type)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_size,Kdu_coords_PTR) & ~((jlong) 1));
    int num_components = (int) _num_components;
    bool unknown_space = (_unknown_space)?true:false;
    int compression_type = (int) _compression_type;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.init(*size,num_components,unknown_space,compression_type);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Init__Lkdu_1jni_Siz_1params_2Z(JNIEnv *__env, jobject _self, jobject _siz, jboolean _unknown_space)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    bool unknown_space = (_unknown_space)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.init(siz,unknown_space);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Kdu_1params_2(JNIEnv *__env, jobject _self, jobject _root)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *root = (kdu_params *)
      _kdu_long_to_addr((_root==NULL)?((jlong) 0):(__env->GetLongField(_root,Kdu_params_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.finalize_compatibility(root);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Finalize_1compatibility__Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_dimensions_PTR)));
    jp2_dimensions src = *((jp2_dimensions *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.finalize_compatibility(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1precision(JNIEnv *__env, jobject _self, jint _component_idx, jint _bit_depth, jboolean _is_signed)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    int bit_depth = (int) _bit_depth;
    bool is_signed = (_is_signed)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.set_precision(component_idx,bit_depth,is_signed);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1dimensions_Set_1ipr_1box_1available(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    self.set_ipr_box_available();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result_copy = self.get_size();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1num_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_num_components();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Colour_1space_1known(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.colour_space_known();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_bit_depth(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1signed(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int component_idx = (int) _component_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_signed(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1dimensions_Get_1compression_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.get_compression_type();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1dimensions_Is_1ipr_1box_1available(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_dimensions_PTR));
    jp2_dimensions self = *((jp2_dimensions *)(&self_S));
    Result = self.is_ipr_box_available();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                              Jp2_family_src                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_family_src_CLS != NULL) return;
  try {
    Jp2_family_src_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_family_src_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_family_src_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_family_src *self = (jp2_family_src *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1src_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_family_src *self =
      new jp2_family_src();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Ljava_lang_String_2Z(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    try { // So we can clean up temporary arrays
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->open(fname,allow_seeks);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1compressed_1source_2(JNIEnv *__env, jobject _self, jobject _indirect)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *indirect = (kdu_compressed_source *)
      _kdu_long_to_addr((_indirect==NULL)?((jlong) 0):(__env->GetLongField(_indirect,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->open(indirect);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Open__Lkdu_1jni_Kdu_1cache_2(JNIEnv *__env, jobject _self, jobject _cache)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *cache = (kdu_cache *)
      _kdu_long_to_addr((_cache==NULL)?((jlong) 0):(__env->GetLongField(_cache,Kdu_cache_PTR) & ~((jlong) 1)));
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->open(cache);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Uses_1cache(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    Result = self->uses_cache();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1src_Is_1top_1level_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    bool Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    Result = self->is_top_level_complete();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    int Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    Result = self->get_id();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jp2_1family_1src_Get_1filename(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    const char * Result;
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    Result = self->get_filename();
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Acquire_1lock(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->acquire_lock();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1src_Release_1lock(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *self = (jp2_family_src *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_src_PTR) & ~((jlong) 1));
    self->release_lock();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                              Jp2_family_tgt                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_family_tgt_CLS != NULL) return;
  try {
    Jp2_family_tgt_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_family_tgt_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_family_tgt_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_family_tgt *self = (jp2_family_tgt *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_family_tgt *self =
      new jp2_family_tgt();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    bool Result;
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _fname)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    try { // So we can clean up temporary arrays
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    self->open(fname);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Open__Lkdu_1jni_Kdu_1compressed_1target_2(JNIEnv *__env, jobject _self, jobject _indirect)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *indirect = (kdu_compressed_target *)
      _kdu_long_to_addr((_indirect==NULL)?((jlong) 0):(__env->GetLongField(_indirect,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    self->open(indirect);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Get_1bytes_1written(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    kdu_long Result;
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    Result = self->get_bytes_written();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1family_1tgt_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *self = (jp2_family_tgt *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_family_tgt_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                               Jp2_input_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_input_box_CLS != NULL) return;
  try {
    Jp2_input_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_input_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_input_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_input_box *self = (jp2_input_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_input_box *self =
      new jp2_input_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1family_1src_2Lkdu_1jni_Jp2_1locator_2(JNIEnv *__env, jobject _self, jobject _src, jobject _locator)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    jp2_locator *locator = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_locator,Jp2_locator_PTR) & ~((jlong) 1));
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->open(src,*locator);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open__Lkdu_1jni_Jp2_1input_1box_2(JNIEnv *__env, jobject _self, jobject _super_box)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *super_box = (jp2_input_box *)
      _kdu_long_to_addr((_super_box==NULL)?((jlong) 0):(__env->GetLongField(_super_box,Jp2_input_box_PTR) & ~((jlong) 1)));
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->open(super_box);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Open_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->open_next();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1input_1box_Transplant(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *src = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_src,Jp2_input_box_PTR) & ~((jlong) 1));
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    self->transplant(*src);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Has_1caching_1source(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->has_caching_source();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_uint32 Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->get_box_type();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1locator(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result_copy = self->get_locator();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_locator_CLS);
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        Result = (jp2_locator *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Jp2_locator_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1header_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    int Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->get_box_header_length();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1remaining_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->get_remaining_bytes();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1input_1box_Get_1box_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->get_box_bytes();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Is_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->is_complete();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Load_1in_1memory(JNIEnv *__env, jobject _self, jint _max_bytes)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    int max_bytes = (int) _max_bytes;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->load_in_memory(max_bytes);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3J(JNIEnv *__env, jobject _self, jlongArray _dword)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jlong dword_ELT; __env->GetLongArrayRegion(_dword,0,1,&dword_ELT);
    kdu_uint32 dword = (kdu_uint32) dword_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->read(dword);
    dword_ELT = (jlong) dword;
  __env->SetLongArrayRegion(_dword,0,1,&dword_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3I(JNIEnv *__env, jobject _self, jintArray _dword)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jint dword_ELT; __env->GetIntArrayRegion(_dword,0,1,&dword_ELT);
    kdu_int32 dword = (kdu_int32) dword_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->read(dword);
    dword_ELT = (jint) dword;
  __env->SetIntArrayRegion(_dword,0,1,&dword_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3S(JNIEnv *__env, jobject _self, jshortArray _word)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jshort word_ELT; __env->GetShortArrayRegion(_word,0,1,&word_ELT);
    kdu_int16 word = (kdu_int16) word_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->read(word);
    word_ELT = (jshort) word;
  __env->SetShortArrayRegion(_word,0,1,&word_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Read___3B(JNIEnv *__env, jobject _self, jbyteArray _byte)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jbyte byte_ELT; __env->GetByteArrayRegion(_byte,0,1,&byte_ELT);
    kdu_byte byte = (kdu_byte) byte_ELT;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->read(byte);
    byte_ELT = (jbyte) byte;
  __env->SetByteArrayRegion(_byte,0,1,&byte_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1input_1box_Set_1codestream_1scope(JNIEnv *__env, jobject _self, jlong _codestream_id, jboolean _need_main_header)
{
  try {
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    kdu_long codestream_id = (kdu_long) _codestream_id;
    bool need_main_header = (_need_main_header)?true:false;
    bool Result;
    jp2_input_box *self = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_input_box_PTR) & ~((jlong) 1));
    Result = self->set_codestream_scope(codestream_id,need_main_header);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jp2_locator                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_locator_CLS != NULL) return;
  try {
    Jp2_locator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_locator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_locator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_locator *self = (jp2_locator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_locator *self =
      new jp2_locator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1locator_Is_1null(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    bool Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    Result = self->is_null();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1locator_Get_1file_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long Result;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    Result = self->get_file_pos();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1locator_Set_1file_1pos(JNIEnv *__env, jobject _self, jlong _pos)
{
  try {
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    kdu_long pos = (kdu_long) _pos;
    jp2_locator *self = (jp2_locator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_locator_PTR) & ~((jlong) 1));
    self->set_file_pos(pos);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                              Jp2_output_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_output_box_CLS != NULL) return;
  try {
    Jp2_output_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_output_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_output_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_output_box *self = (jp2_output_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_output_box *self =
      new jp2_output_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1family_1tgt_2JZ(JNIEnv *__env, jobject _self, jobject _tgt, jlong _box_type, jboolean _rubber_length)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->open(tgt,box_type,rubber_length);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__Lkdu_1jni_Jp2_1output_1box_2JZ(JNIEnv *__env, jobject _self, jobject _super_box, jlong _box_type, jboolean _rubber_length)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *super_box = (jp2_output_box *)
      _kdu_long_to_addr((_super_box==NULL)?((jlong) 0):(__env->GetLongField(_super_box,Jp2_output_box_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->open(super_box,box_type,rubber_length);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open__J(JNIEnv *__env, jobject _self, jlong _box_type)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->open(box_type);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Open_1next(JNIEnv *__env, jobject _self, jlong _box_type, jboolean _rubber_length)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (_rubber_length)?true:false;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->open_next(box_type,rubber_length);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->get_box_type();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1output_1box_Get_1contents(JNIEnv *__env, jobject _self, jlongArray _length)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jlong length_ELT; __env->GetLongArrayRegion(_length,0,1,&length_ELT);
    kdu_long length = (kdu_long) length_ELT;
    const kdu_byte *Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->get_contents(length);
    length_ELT = (jlong) length;
  __env->SetLongArrayRegion(_length,0,1,&length_ELT);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Set_1rubber_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->set_rubber_length();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1output_1box_Write_1header_1last(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    self->write_header_last();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__J(JNIEnv *__env, jobject _self, jlong _dword)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_uint32 dword = (kdu_uint32) _dword;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->write(dword);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__I(JNIEnv *__env, jobject _self, jint _dword)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_int32 dword = (kdu_int32) _dword;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->write(dword);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__S(JNIEnv *__env, jobject _self, jshort _word)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_int16 word = (kdu_int16) _word;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->write(word);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1output_1box_Write__B(JNIEnv *__env, jobject _self, jbyte _byte)
{
  try {
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    kdu_byte byte = (kdu_byte) _byte;
    bool Result;
    jp2_output_box *self = (jp2_output_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_output_box_PTR) & ~((jlong) 1));
    Result = self->write(byte);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jp2_palette                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_palette_CLS != NULL) return;
  try {
    Jp2_palette_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_palette_PTR)));
    jp2_palette src = *((jp2_palette *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Init(JNIEnv *__env, jobject _self, jint _num_luts, jint _num_entries)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int num_luts = (int) _num_luts;
    int num_entries = (int) _num_entries;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.init(num_luts,num_entries);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Set_1lut(JNIEnv *__env, jobject _self, jint _lut_idx, jintArray _lut, jint _bit_depth, jboolean _is_signed)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    kdu_int32 *lut = NULL;
    jint *lut_ELTS = NULL;
    if (_lut != NULL)
      {
        lut_ELTS = __env->GetIntArrayElements(_lut,NULL);
        lut = (kdu_int32 *) lut_ELTS;
      }
    int bit_depth = (int) _bit_depth;
    bool is_signed = (_is_signed)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.set_lut(lut_idx,lut,bit_depth,is_signed);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_lut != NULL)
      {
        __env->ReleaseIntArrayElements(_lut,lut_ELTS,0);
      }
    throw;
    }
    if (_lut != NULL)
      {
        __env->ReleaseIntArrayElements(_lut,lut_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1entries(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_num_entries();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1num_1luts(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_num_luts();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jp2_1palette_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _lut_idx)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_bit_depth(lut_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1palette_Get_1signed(JNIEnv *__env, jobject _self, jint _lut_idx)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    Result = self.get_signed(lut_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1palette_Get_1lut__I_3F(JNIEnv *__env, jobject _self, jint _lut_idx, jfloatArray _lut)
{
  try {
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    int lut_idx = (int) _lut_idx;
    float *lut = NULL;
    jfloat *lut_ELTS = NULL;
    if (_lut != NULL)
      {
        lut_ELTS = __env->GetFloatArrayElements(_lut,NULL);
        lut = (float *) lut_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_palette_PTR));
    jp2_palette self = *((jp2_palette *)(&self_S));
    self.get_lut(lut_idx,lut);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_lut != NULL)
      {
        __env->ReleaseFloatArrayElements(_lut,lut_ELTS,0);
      }
    throw;
    }
    if (_lut != NULL)
      {
        __env->ReleaseFloatArrayElements(_lut,lut_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                              Jp2_resolution                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_resolution_CLS != NULL) return;
  try {
    Jp2_resolution_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1resolution_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_resolution_PTR)));
    jp2_resolution src = *((jp2_resolution *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Init(JNIEnv *__env, jobject _self, jfloat _aspect_ratio)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float aspect_ratio = (float) _aspect_ratio;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.init(aspect_ratio);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1different_1capture_1aspect_1ratio(JNIEnv *__env, jobject _self, jfloat _aspect_ratio)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float aspect_ratio = (float) _aspect_ratio;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.set_different_capture_aspect_ratio(aspect_ratio);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1resolution_Set_1resolution(JNIEnv *__env, jobject _self, jfloat _resolution, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    float resolution = (float) _resolution;
    bool for_display = (_for_display)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    self.set_resolution(resolution,for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1aspect_1ratio(JNIEnv *__env, jobject _self, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool for_display = (_for_display)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.get_aspect_ratio(for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Jp2_1resolution_Get_1resolution(JNIEnv *__env, jobject _self, jboolean _for_display)
{
  try {
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    bool for_display = (_for_display)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jp2_resolution_PTR));
    jp2_resolution self = *((jp2_resolution *)(&self_S));
    Result = self.get_resolution(for_display);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

/*****************************************************************************/
/*                                Jp2_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_source_CLS != NULL) return;
  try {
    Jp2_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_source *self = (jp2_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_source *self =
      new jp2_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jp2_1source_Read_1header(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    bool Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->read_header();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1source_Get_1header_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    kdu_long Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->get_header_bytes();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_dimensions_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    jp2_source *self = (jp2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_source_PTR) & ~((jlong) 1));
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                                Jp2_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jp2_target_CLS != NULL) return;
  try {
    Jp2_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jp2_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jp2_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jp2_target *self = (jp2_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jp2_1target_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jp2_target *self =
      new jp2_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open__Lkdu_1jni_Jp2_1family_1tgt_2(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    self->open(tgt);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Write_1header(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    self->write_header();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jp2_1target_Open_1codestream(JNIEnv *__env, jobject _self, jboolean _rubber_length)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    bool rubber_length = (_rubber_length)?true:false;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    self->open_codestream(rubber_length);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_dimensions_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jp2_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jp2_target_CLS==NULL)
      Jp2_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    jp2_target *self = (jp2_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jp2_target_PTR) & ~((jlong) 1));
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                           Jpx_codestream_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_codestream_source_CLS != NULL) return;
  try {
    Jpx_codestream_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.get_codestream_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1header_1loc(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result_copy = self.get_header_loc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_locator_CLS);
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        Result = (jp2_locator *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Jp2_locator_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1dimensions(JNIEnv *__env, jobject _self, jboolean _finalize_compatibility)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    bool finalize_compatibility = (_finalize_compatibility)?true:false;
    jp2_dimensions Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.access_dimensions(finalize_compatibility);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_dimensions_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.access_palette();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Get_1stream_1loc(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result_copy = self.get_stream_loc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_locator_CLS);
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        Result = (jp2_locator *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Jp2_locator_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Stream_1ready(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.stream_ready();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Access_1fragment_1list(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    jpx_fragment_list Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.access_fragment_list();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_fragment_list_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1source_Open_1stream(JNIEnv *__env, jobject _self, jobject _my_resource)
{
  try {
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    jpx_input_box *my_resource = (jpx_input_box *)
      _kdu_long_to_addr((_my_resource==NULL)?((jlong) 0):(__env->GetLongField(_my_resource,Jpx_input_box_PTR) & ~((jlong) 1)));
    jpx_input_box *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_source_PTR));
    jpx_codestream_source self = *((jpx_codestream_source *)(&self_S));
    Result = self.open_stream(my_resource);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jpx_input_box_CLS);
        __env->SetLongField(_Result,Jpx_input_box_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                           Jpx_codestream_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_codestream_target_CLS != NULL) return;
  try {
    Jpx_codestream_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Get_1codestream_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.get_codestream_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_dimensions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_dimensions_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_palette();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1fragment_1list(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    jpx_fragment_list Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_fragment_list();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_fragment_list_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Add_1fragment(JNIEnv *__env, jobject _self, jstring _url, jlong _offset, jlong _length)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    const char *url = NULL;
    if (_url != NULL)
      {
        url = __env->GetStringUTFChars(_url,NULL);
      }
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    self.add_fragment(url,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
    throw;
    }
    if (_url != NULL)
      {
        __env->ReleaseStringUTFChars(_url,url);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Write_1fragment_1table(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    self.write_fragment_table();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Open_1stream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    jp2_output_box *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.open_stream();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_output_box_CLS);
        __env->SetLongField(_Result,Jp2_output_box_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1codestream_1target_Access_1stream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_codestream_target_PTR));
    jpx_codestream_target self = *((jpx_codestream_target *)(&self_S));
    Result = self.access_stream();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_compressed_target_CLS);
        __env->SetLongField(_Result,Kdu_compressed_target_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                             Jpx_compatibility                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_compatibility_CLS != NULL) return;
  try {
    Jpx_compatibility_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jp2();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jp2_1compatible(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jp2_compatible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Is_1jpxb_1compatible(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.is_jpxb_compatible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Has_1reader_1requirements_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.has_reader_requirements_box();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.check_standard_feature(feature_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Check_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.check_vendor_feature(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    jint feature_id_ELT; __env->GetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    kdu_uint16 feature_id = (kdu_uint16) feature_id_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_standard_feature(which,feature_id);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    feature_id_ELT = (jint) feature_id;
  __env->SetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1standard_1feature__I_3I_3Z(JNIEnv *__env, jobject _self, jint _which, jintArray _feature_id, jbooleanArray _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    jint feature_id_ELT; __env->GetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    kdu_uint16 feature_id = (kdu_uint16) feature_id_ELT;
    jboolean is_supported_ELT; __env->GetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    bool is_supported = (is_supported_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_standard_feature(which,feature_id,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    feature_id_ELT = (jint) feature_id;
  __env->SetIntArrayRegion(_feature_id,0,1,&feature_id_ELT);
    is_supported_ELT = (jboolean) is_supported;
  __env->SetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_vendor_feature(which,uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Get_1vendor_1feature__I_3B_3Z(JNIEnv *__env, jobject _self, jint _which, jbyteArray _uuid, jbooleanArray _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    int which = (int) _which;
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    jboolean is_supported_ELT; __env->GetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    bool is_supported = (is_supported_ELT)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.get_vendor_feature(which,uuid,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    is_supported_ELT = (jboolean) is_supported;
  __env->SetBooleanArrayRegion(_is_supported,0,1,&is_supported_ELT);
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1standard_1feature_1support(JNIEnv *__env, jobject _self, jint _feature_id, jboolean _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool is_supported = (_is_supported)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_standard_feature_support(feature_id,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1vendor_1feature_1support(JNIEnv *__env, jobject _self, jbyteArray _uuid, jboolean _is_supported)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool is_supported = (_is_supported)?true:false;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_vendor_feature_support(uuid,is_supported);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1fully_1understand(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.test_fully_understand();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1compatibility_Test_1decode_1completely(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    Result = self.test_decode_completely();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_compatibility_PTR)));
    jpx_compatibility src = *((jpx_compatibility *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1standard_1feature(JNIEnv *__env, jobject _self, jint _feature_id, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_used_standard_feature(feature_id,fully_understand_sub_expression,decode_completely_sub_expression);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1compatibility_Set_1used_1vendor_1feature(JNIEnv *__env, jobject _self, jbyteArray _uuid, jbyte _fully_understand_sub_expression, jbyte _decode_completely_sub_expression)
{
  try {
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_compatibility_PTR));
    jpx_compatibility self = *((jpx_compatibility *)(&self_S));
    self.set_used_vendor_feature(uuid,fully_understand_sub_expression,decode_completely_sub_expression);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                              Jpx_composition                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_composition_CLS != NULL) return;
  try {
    Jpx_composition_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_composition_PTR)));
    jpx_composition src = *((jpx_composition *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Get_1global_1info(JNIEnv *__env, jobject _self, jobject _size)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_size,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_global_info(*size);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1next_1frame(JNIEnv *__env, jobject _self, jlong _last_frame)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *last_frame = (jx_frame *) _kdu_long_to_addr(_last_frame);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_next_frame(last_frame);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1prev_1frame(JNIEnv *__env, jobject _self, jlong _last_frame)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *last_frame = (jx_frame *) _kdu_long_to_addr(_last_frame);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_prev_frame(last_frame);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Get_1frame_1info(JNIEnv *__env, jobject _self, jlong _frame_ref, jintArray _num_instructions, jintArray _duration, jintArray _repeat_count, jbooleanArray _is_persistent)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    jint num_instructions_ELT; __env->GetIntArrayRegion(_num_instructions,0,1,&num_instructions_ELT);
    int num_instructions = (int) num_instructions_ELT;
    jint duration_ELT; __env->GetIntArrayRegion(_duration,0,1,&duration_ELT);
    int duration = (int) duration_ELT;
    jint repeat_count_ELT; __env->GetIntArrayRegion(_repeat_count,0,1,&repeat_count_ELT);
    int repeat_count = (int) repeat_count_ELT;
    jboolean is_persistent_ELT; __env->GetBooleanArrayRegion(_is_persistent,0,1,&is_persistent_ELT);
    bool is_persistent = (is_persistent_ELT)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.get_frame_info(frame_ref,num_instructions,duration,repeat_count,is_persistent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_instructions_ELT = (jint) num_instructions;
  __env->SetIntArrayRegion(_num_instructions,0,1,&num_instructions_ELT);
    duration_ELT = (jint) duration;
  __env->SetIntArrayRegion(_duration,0,1,&duration_ELT);
    repeat_count_ELT = (jint) repeat_count;
  __env->SetIntArrayRegion(_repeat_count,0,1,&repeat_count_ELT);
    is_persistent_ELT = (jboolean) is_persistent;
  __env->SetBooleanArrayRegion(_is_persistent,0,1,&is_persistent_ELT);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Get_1last_1persistent_1frame(JNIEnv *__env, jobject _self, jlong _frame_ref)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_last_persistent_frame(frame_ref);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _layer_idx, jintArray _increment, jbooleanArray _is_reused, jobject _source_dims, jobject _target_dims)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int instruction_idx = (int) _instruction_idx;
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    jint increment_ELT; __env->GetIntArrayRegion(_increment,0,1,&increment_ELT);
    int increment = (int) increment_ELT;
    jboolean is_reused_ELT; __env->GetBooleanArrayRegion(_is_reused,0,1,&is_reused_ELT);
    bool is_reused = (is_reused_ELT)?true:false;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_instruction(frame_ref,instruction_idx,layer_idx,increment,is_reused,*source_dims,*target_dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    increment_ELT = (jint) increment;
  __env->SetIntArrayRegion(_increment,0,1,&increment_ELT);
    is_reused_ELT = (jboolean) is_reused;
  __env->SetBooleanArrayRegion(_is_reused,0,1,&is_reused_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1composition_Get_1original_1iset(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _instruction_idx, jintArray _iset_idx, jintArray _inum_idx)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int instruction_idx = (int) _instruction_idx;
    jint iset_idx_ELT; __env->GetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    int iset_idx = (int) iset_idx_ELT;
    jint inum_idx_ELT; __env->GetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    int inum_idx = (int) inum_idx_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.get_original_iset(frame_ref,instruction_idx,iset_idx,inum_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    iset_idx_ELT = (jint) iset_idx;
  __env->SetIntArrayRegion(_iset_idx,0,1,&iset_idx_ELT);
    inum_idx_ELT = (jint) inum_idx;
  __env->SetIntArrayRegion(_inum_idx,0,1,&inum_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1composition_Add_1frame(JNIEnv *__env, jobject _self, jint _duration, jint _repeat_count, jboolean _is_persistent)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int duration = (int) _duration;
    int repeat_count = (int) _repeat_count;
    bool is_persistent = (_is_persistent)?true:false;
    jx_frame *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.add_frame(duration,repeat_count,is_persistent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1composition_Add_1instruction(JNIEnv *__env, jobject _self, jlong _frame_ref, jint _layer_idx, jint _increment, jobject _source_dims, jobject _target_dims)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jx_frame *frame_ref = (jx_frame *) _kdu_long_to_addr(_frame_ref);
    int layer_idx = (int) _layer_idx;
    int increment = (int) _increment;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    Result = self.add_instruction(frame_ref,layer_idx,increment,*source_dims,*target_dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1composition_Set_1loop_1count(JNIEnv *__env, jobject _self, jint _count)
{
  try {
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    int count = (int) _count;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_composition_PTR));
    jpx_composition self = *((jpx_composition *)(&self_S));
    self.set_loop_count(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                             Jpx_fragment_list                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_fragment_list_CLS != NULL) return;
  try {
    Jpx_fragment_list_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Add_1fragment(JNIEnv *__env, jobject _self, jint _url_idx, jlong _offset, jlong _length)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int url_idx = (int) _url_idx;
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    self.add_fragment(url_idx,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1total_1length(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_total_length();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1num_1fragments(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_num_fragments();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Get_1fragment(JNIEnv *__env, jobject _self, jint _frag_idx, jintArray _url_idx, jlongArray _offset, jlongArray _length)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    int frag_idx = (int) _frag_idx;
    jint url_idx_ELT; __env->GetIntArrayRegion(_url_idx,0,1,&url_idx_ELT);
    int url_idx = (int) url_idx_ELT;
    jlong offset_ELT; __env->GetLongArrayRegion(_offset,0,1,&offset_ELT);
    kdu_long offset = (kdu_long) offset_ELT;
    jlong length_ELT; __env->GetLongArrayRegion(_length,0,1,&length_ELT);
    kdu_long length = (kdu_long) length_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.get_fragment(frag_idx,url_idx,offset,length);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    url_idx_ELT = (jint) url_idx;
  __env->SetIntArrayRegion(_url_idx,0,1,&url_idx_ELT);
    offset_ELT = (jlong) offset;
  __env->SetLongArrayRegion(_offset,0,1,&offset_ELT);
    length_ELT = (jlong) length;
  __env->SetLongArrayRegion(_length,0,1,&length_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1fragment_1list_Locate_1fragment(JNIEnv *__env, jobject _self, jlong _pos, jlongArray _bytes_into_fragment)
{
  try {
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    kdu_long pos = (kdu_long) _pos;
    jlong bytes_into_fragment_ELT; __env->GetLongArrayRegion(_bytes_into_fragment,0,1,&bytes_into_fragment_ELT);
    kdu_long bytes_into_fragment = (kdu_long) bytes_into_fragment_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_fragment_list_PTR));
    jpx_fragment_list self = *((jpx_fragment_list *)(&self_S));
    Result = self.locate_fragment(pos,bytes_into_fragment);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_fragment_list_PTR,(jlong) _addr_to_kdu_long(self_S));
    bytes_into_fragment_ELT = (jlong) bytes_into_fragment;
  __env->SetLongArrayRegion(_bytes_into_fragment,0,1,&bytes_into_fragment_ELT);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                            Jpx_frame_expander                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_frame_expander_CLS != NULL) return;
  try {
    Jpx_frame_expander_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_frame_expander_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_frame_expander_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_frame_expander *self = (jpx_frame_expander *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_frame_expander *self =
      new jpx_frame_expander();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Reset(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    self->reset();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Test_1codestream_1visibility(JNIEnv *__env, jobject _self, jobject _source, jlong _frame, jint _iteration_idx, jboolean _follow_persistence, jint _codestream_idx, jobject _composition_region, jobject _codestream_roi, jboolean _ignore_use_in_alpha, jint _initial_matches_to_skip)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    jx_frame *frame = (jx_frame *) _kdu_long_to_addr(_frame);
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (_follow_persistence)?true:false;
    int codestream_idx = (int) _codestream_idx;
    kdu_dims *composition_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_composition_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *codestream_roi = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_codestream_roi,Kdu_dims_PTR) & ~((jlong) 1));
    bool ignore_use_in_alpha = (_ignore_use_in_alpha)?true:false;
    int initial_matches_to_skip = (int) _initial_matches_to_skip;
    int Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    Result = self->test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,*composition_region,*codestream_roi,ignore_use_in_alpha,initial_matches_to_skip);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Construct(JNIEnv *__env, jobject _self, jobject _source, jlong _frame, jint _iteration_idx, jboolean _follow_persistence, jobject _region_of_interest)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    jx_frame *frame = (jx_frame *) _kdu_long_to_addr(_frame);
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (_follow_persistence)?true:false;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    Result = self->construct(source,frame,iteration_idx,follow_persistence,*region_of_interest);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Has_1non_1covering_1members(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    bool Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    Result = self->has_non_covering_members();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1num_1members(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    int Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    Result = self->get_num_members();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1frame_1expander_Get_1member(JNIEnv *__env, jobject _self, jint _which, jintArray _instruction_idx, jintArray _layer_idx, jbooleanArray _covers_composition, jobject _source_dims, jobject _target_dims)
{
  try {
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int which = (int) _which;
    jint instruction_idx_ELT; __env->GetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    int instruction_idx = (int) instruction_idx_ELT;
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    jboolean covers_composition_ELT; __env->GetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    bool covers_composition = (covers_composition_ELT)?true:false;
    kdu_dims *source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jx_frame *Result;
    jpx_frame_expander *self = (jpx_frame_expander *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_frame_expander_PTR) & ~((jlong) 1));
    Result = self->get_member(which,instruction_idx,layer_idx,covers_composition,*source_dims,*target_dims);
    instruction_idx_ELT = (jint) instruction_idx;
  __env->SetIntArrayRegion(_instruction_idx,0,1,&instruction_idx_ELT);
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    covers_composition_ELT = (jboolean) covers_composition;
  __env->SetBooleanArrayRegion(_covers_composition,0,1,&covers_composition_ELT);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

/*****************************************************************************/
/*                               Jpx_input_box                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_input_box_CLS != NULL) return;
  try {
    Jpx_input_box_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_input_box_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_input_box_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_input_box *self = (jpx_input_box *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1input_1box_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_input_box *self =
      new jpx_input_box();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    bool Result;
    jpx_input_box *self = (jpx_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_input_box_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1input_1box_Open_1as(JNIEnv *__env, jobject _self, jobject _frag_list, jobject _data_refs, jobject _ultimate_src, jlong _box_type)
{
  try {
    if (Jpx_input_box_CLS==NULL)
      Jpx_input_box_LOADER(__env);
    if (Jpx_fragment_list_CLS==NULL)
      Jpx_fragment_list_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    void *frag_list_S = _kdu_long_to_addr((_frag_list==NULL)?((jlong) 0):(__env->GetLongField(_frag_list,Jpx_fragment_list_PTR)));
    jpx_fragment_list frag_list = *((jpx_fragment_list *)(&frag_list_S));
    void *data_refs_S = _kdu_long_to_addr((_data_refs==NULL)?((jlong) 0):(__env->GetLongField(_data_refs,Jp2_data_references_PTR)));
    jp2_data_references data_refs = *((jp2_data_references *)(&data_refs_S));
    jp2_family_src *ultimate_src = (jp2_family_src *)
      _kdu_long_to_addr((_ultimate_src==NULL)?((jlong) 0):(__env->GetLongField(_ultimate_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    jpx_input_box *self = (jpx_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_input_box_PTR) & ~((jlong) 1));
    Result = self->open_as(frag_list,data_refs,ultimate_src,box_type);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Jpx_layer_source                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_layer_source_CLS != NULL) return;
  try {
    Jpx_layer_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.get_layer_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1header_1loc(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_locator_CLS==NULL)
      Jp2_locator_LOADER(__env);
    jp2_locator Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result_copy = self.get_header_loc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_locator_CLS);
        jp2_locator *Result = new jp2_locator; *Result = Result_copy;
        Result = (jp2_locator *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Jp2_locator_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.access_channels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Access_1colour(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int which = (int) _which;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.access_colour(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1num_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.get_num_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1id(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int which = (int) _which;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.get_codestream_id(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1layer_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result_copy = self.get_layer_size();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1source_Have_1stream_1headers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.have_stream_headers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1layer_1source_Get_1codestream_1registration(JNIEnv *__env, jobject _self, jint _which, jobject _alignment, jobject _sampling, jobject _denominator)
{
  try {
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int which = (int) _which;
    kdu_coords *alignment = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_alignment,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *sampling = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_sampling,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_source_PTR));
    jpx_layer_source self = *((jpx_layer_source *)(&self_S));
    Result = self.get_codestream_registration(which,*alignment,*sampling,*denominator);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                             Jpx_layer_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_layer_target_CLS != NULL) return;
  try {
    Jpx_layer_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1layer_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_channels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Add_1colour(JNIEnv *__env, jobject _self, jint _prec, jbyte _approx)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int prec = (int) _prec;
    kdu_byte approx = (kdu_byte) _approx;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.add_colour(prec,approx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1layer_1target_Access_1colour(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    int which = (int) _which;
    jp2_colour Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    Result = self.access_colour(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1layer_1target_Set_1codestream_1registration(JNIEnv *__env, jobject _self, jint _codestream_id, jobject _alignment, jobject _sampling, jobject _denominator)
{
  try {
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kdu_coords *alignment = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_alignment,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *sampling = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_sampling,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_layer_target_PTR));
    jpx_layer_target self = *((jpx_layer_target *)(&self_S));
    self.set_codestream_registration(codestream_id,*alignment,*sampling,*denominator);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                             Jpx_meta_manager                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_meta_manager_CLS != NULL) return;
  try {
    Jpx_meta_manager_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Set_1box_1filter(JNIEnv *__env, jobject _self, jint _num_box_types, jlongArray _box_types)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    int num_box_types = (int) _num_box_types;
    kdu_uint32 *box_types = NULL;
    jlong *box_types_ELTS = NULL;
    jsize box_types_L = 0;
    if (_box_types != NULL)
      {
        box_types_ELTS = __env->GetLongArrayElements(_box_types,NULL);
        box_types_L = __env->GetArrayLength(_box_types);
        box_types = new kdu_uint32[box_types_L];
        { for (int i=0; i<box_types_L; i++) box_types[i] = (kdu_uint32)(box_types_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.set_box_filter(num_box_types,box_types);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
    throw;
    }
    if (_box_types != NULL)
      {
        for (int i=0; i<box_types_L; i++) box_types_ELTS[i] = (jlong)(box_types[i]);
      }
    if (_box_types != NULL)
      {
        delete[] box_types;
        __env->ReleaseLongArrayElements(_box_types,box_types_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Access_1root(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.access_root();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Locate_1node(JNIEnv *__env, jobject _self, jlong _file_pos)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_long file_pos = (kdu_long) _file_pos;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.locate_node(file_pos);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Get_1touched_1nodes(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.get_touched_nodes();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Peek_1touched_1nodes(JNIEnv *__env, jobject _self, jlong _box_type, jobject _last_peeked)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    void *last_peeked_S = _kdu_long_to_addr((_last_peeked==NULL)?((jlong) 0):(__env->GetLongField(_last_peeked,Jpx_metanode_PTR)));
    jpx_metanode last_peeked = *((jpx_metanode *)(&last_peeked_S));
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.peek_touched_nodes(box_type,last_peeked);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Copy(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_meta_manager_PTR)));
    jpx_meta_manager src = *((jpx_meta_manager *)(&src_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    self.copy(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Load_1matches(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.load_matches(num_codestreams,codestream_indices,num_compositing_layers,layer_indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Enumerate_1matches(JNIEnv *__env, jobject _self, jobject _last_node, jint _codestream_idx, jint _compositing_layer_idx, jboolean _applies_to_rendered_result, jobject _region, jint _min_size, jboolean _exclude_region_numlists)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    void *last_node_S = _kdu_long_to_addr((_last_node==NULL)?((jlong) 0):(__env->GetLongField(_last_node,Jpx_metanode_PTR)));
    jpx_metanode last_node = *((jpx_metanode *)(&last_node_S));
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    int min_size = (int) _min_size;
    bool exclude_region_numlists = (_exclude_region_numlists)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.enumerate_matches(last_node,codestream_idx,compositing_layer_idx,applies_to_rendered_result,*region,min_size,exclude_region_numlists);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1meta_1manager_Insert_1node(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result, jint _num_regions, jobject _regions)
{
  try {
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    int num_regions = (int) _num_regions;
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_meta_manager_PTR));
    jpx_meta_manager self = *((jpx_meta_manager *)(&self_S));
    Result = self.insert_node(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result,num_regions,regions);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                               Jpx_metanode                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_metanode_CLS != NULL) return;
  try {
    Jpx_metanode_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1info(JNIEnv *__env, jobject _self, jintArray _num_codestreams, jintArray _num_layers, jbooleanArray _applies_to_rendered_result)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint num_codestreams_ELT; __env->GetIntArrayRegion(_num_codestreams,0,1,&num_codestreams_ELT);
    int num_codestreams = (int) num_codestreams_ELT;
    jint num_layers_ELT; __env->GetIntArrayRegion(_num_layers,0,1,&num_layers_ELT);
    int num_layers = (int) num_layers_ELT;
    jboolean applies_to_rendered_result_ELT; __env->GetBooleanArrayRegion(_applies_to_rendered_result,0,1,&applies_to_rendered_result_ELT);
    bool applies_to_rendered_result = (applies_to_rendered_result_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_info(num_codestreams,num_layers,applies_to_rendered_result);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_codestreams_ELT = (jint) num_codestreams;
  __env->SetIntArrayRegion(_num_codestreams,0,1,&num_codestreams_ELT);
    num_layers_ELT = (jint) num_layers;
  __env->SetIntArrayRegion(_num_layers,0,1,&num_layers_ELT);
    applies_to_rendered_result_ELT = (jboolean) applies_to_rendered_result;
  __env->SetBooleanArrayRegion(_applies_to_rendered_result,0,1,&applies_to_rendered_result_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const int *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_codestreams();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const int *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1codestream(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_codestream(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1numlist_1layer(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_numlist_layer(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1numlist(JNIEnv *__env, jobject _self, jint _codestream_idx, jint _compositing_layer_idx, jboolean _applies_to_rendered_result)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.test_numlist(codestream_idx,compositing_layer_idx,applies_to_rendered_result);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1num_1regions(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_num_regions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1region(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int which = (int) _which;
    jpx_roi Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result_copy = self.get_region(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_roi_CLS);
        jpx_roi *Result = new jpx_roi; *Result = Result_copy;
        Result = (jpx_roi *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Jpx_roi_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1bounding_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result_copy = self.get_bounding_box();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Test_1region(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.test_region(*region);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_uint32 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_box_type();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1label(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_label();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1uuid(JNIEnv *__env, jobject _self, jbyteArray _uuid)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    kdu_byte *uuid = NULL;
    jbyte *uuid_ELTS = NULL;
    if (_uuid != NULL)
      {
        uuid_ELTS = __env->GetByteArrayElements(_uuid,NULL);
        uuid = (kdu_byte *) uuid_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_uuid(uuid);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    throw;
    }
    if (_uuid != NULL)
      {
        __env->ReleaseByteArrayElements(_uuid,uuid_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Open_1existing(JNIEnv *__env, jobject _self, jobject _box)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *box = (jp2_input_box *)
      _kdu_long_to_addr(__env->GetLongField(_box,Jp2_input_box_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.open_existing(*box);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Count_1descendants(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.count_descendants(count);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1descendant(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int which = (int) _which;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_descendant(which);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1parent(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_parent();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1parent(JNIEnv *__env, jobject _self, jobject _new_parent)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *new_parent_S = _kdu_long_to_addr((_new_parent==NULL)?((jlong) 0):(__env->GetLongField(_new_parent,Jpx_metanode_PTR)));
    jpx_metanode new_parent = *((jpx_metanode *)(&new_parent_S));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.change_parent(new_parent);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1numlist(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jint _num_compositing_layers, jintArray _layer_indices, jboolean _applies_to_rendered_result)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    int num_compositing_layers = (int) _num_compositing_layers;
    int *layer_indices = NULL;
    jint *layer_indices_ELTS = NULL;
    if (_layer_indices != NULL)
      {
        layer_indices_ELTS = __env->GetIntArrayElements(_layer_indices,NULL);
        layer_indices = (int *) layer_indices_ELTS;
      }
    bool applies_to_rendered_result = (_applies_to_rendered_result)?true:false;
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_numlist(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    if (_layer_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_layer_indices,layer_indices_ELTS,0);
      }
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1regions(JNIEnv *__env, jobject _self, jint _num_regions, jobject _regions)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    int num_regions = (int) _num_regions;
    jpx_roi *regions = (jpx_roi *)
      _kdu_long_to_addr((_regions==NULL)?((jlong) 0):(__env->GetLongField(_regions,Jpx_roi_PTR) & ~((jlong) 1)));
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_regions(num_regions,regions);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1label(JNIEnv *__env, jobject _self, jstring _text)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_label(text);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Change_1to_1label(JNIEnv *__env, jobject _self, jstring _text)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    const char *text = NULL;
    if (_text != NULL)
      {
        text = __env->GetStringUTFChars(_text,NULL);
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.change_to_label(text);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
    throw;
    }
    if (_text != NULL)
      {
        __env->ReleaseStringUTFChars(_text,text);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1metanode_Add_1copy(JNIEnv *__env, jobject _self, jobject _src, jboolean _recursive)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *src_S = _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jpx_metanode_PTR)));
    jpx_metanode src = *((jpx_metanode *)(&src_S));
    bool recursive = (_recursive)?true:false;
    jpx_metanode Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.add_copy(src,recursive);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Delete_1node(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.delete_node();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1changed(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.is_changed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Ancestor_1changed(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.ancestor_changed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1metanode_Is_1deleted(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.is_deleted();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1metanode_Touch(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    self.touch();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1metanode_Get_1state_1ref(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    void *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Jpx_metanode_PTR));
    jpx_metanode self = *((jpx_metanode *)(&self_S));
    Result = self.get_state_ref();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

/*****************************************************************************/
/*                                  Jpx_roi                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_roi_CLS != NULL) return;
  try {
    Jpx_roi_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1roi_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_roi_CLS==NULL)
      Jpx_roi_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_roi_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_roi_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_roi *self = (jpx_roi *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1roi_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_roi *self =
      new jpx_roi();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Jpx_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_source_CLS != NULL) return;
  try {
    Jpx_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_source *self = (jpx_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1source_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_source *self =
      new jpx_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    bool return_if_incompatible = (_return_if_incompatible)?true:false;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->open(src,return_if_incompatible);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->get_ultimate_src();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_family_src_CLS);
        __env->SetLongField(_Result,Jp2_family_src_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1compatibility(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    jpx_compatibility Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_compatibility();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_compatibility_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1data_1references(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    jp2_data_references Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_data_references();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_data_references_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->count_codestreams(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Count_1compositing_1layers(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->count_compositing_layers(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1codestream(JNIEnv *__env, jobject _self, jint _which, jboolean _need_main_header)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_codestream_source_CLS==NULL)
      Jpx_codestream_source_LOADER(__env);
    int which = (int) _which;
    bool need_main_header = (_need_main_header)?true:false;
    jpx_codestream_source Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_codestream(which,need_main_header);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_codestream_source_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_codestream_source_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1layer(JNIEnv *__env, jobject _self, jint _which, jboolean _need_stream_headers)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_layer_source_CLS==NULL)
      Jpx_layer_source_LOADER(__env);
    int which = (int) _which;
    bool need_stream_headers = (_need_stream_headers)?true:false;
    jpx_layer_source Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_layer(which,need_stream_headers);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_layer_source_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_layer_source_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1num_1layer_1codestreams(JNIEnv *__env, jobject _self, jint _which_layer)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    int which_layer = (int) _which_layer;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->get_num_layer_codestreams(which_layer);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Jpx_1source_Get_1layer_1codestream_1id(JNIEnv *__env, jobject _self, jint _which_layer, jint _which_stream)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    int which_layer = (int) _which_layer;
    int which_stream = (int) _which_stream;
    int Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->get_layer_codestream_id(which_layer,which_stream);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1composition(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jpx_composition Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_composition();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_composition_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1source_Access_1meta_1manager(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    jpx_meta_manager Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->access_meta_manager();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_meta_manager_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    bool Result;
    jpx_source *self = (jpx_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_source_PTR) & ~((jlong) 1));
    Result = self->close();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Jpx_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Jpx_target_CLS != NULL) return;
  try {
    Jpx_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Jpx_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Jpx_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        jpx_target *self = (jpx_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Jpx_1target_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    jpx_target *self =
      new jpx_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    bool Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Jpx_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    self->open(tgt);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1compatibility(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_compatibility_CLS==NULL)
      Jpx_compatibility_LOADER(__env);
    jpx_compatibility Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->access_compatibility();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_compatibility_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_compatibility_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1data_1references(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_data_references_CLS==NULL)
      Jp2_data_references_LOADER(__env);
    jp2_data_references Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->access_data_references();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_data_references_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_data_references_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1codestream(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_codestream_target_CLS==NULL)
      Jpx_codestream_target_LOADER(__env);
    jpx_codestream_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->add_codestream();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_codestream_target_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_codestream_target_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Add_1layer(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_layer_target_CLS==NULL)
      Jpx_layer_target_LOADER(__env);
    jpx_layer_target Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->add_layer();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_layer_target_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_layer_target_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1composition(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_composition_CLS==NULL)
      Jpx_composition_LOADER(__env);
    jpx_composition Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->access_composition();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_composition_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_composition_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Access_1meta_1manager(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jpx_meta_manager_CLS==NULL)
      Jpx_meta_manager_LOADER(__env);
    jpx_meta_manager Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->access_meta_manager();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_meta_manager_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_meta_manager_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1headers(JNIEnv *__env, jobject _self, jintArray _i_param)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int *i_param = NULL;
    jint *i_param_ELTS = NULL;
    if (_i_param != NULL)
      {
        i_param_ELTS = __env->GetIntArrayElements(_i_param,NULL);
        i_param = (int *) i_param_ELTS;
      }
    jp2_output_box *Result;
    try { // So we can clean up temporary arrays
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->write_headers(i_param);
    } catch (...) {
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    throw;
    }
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_output_box_CLS);
        __env->SetLongField(_Result,Jp2_output_box_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Jpx_1target_Write_1metadata(JNIEnv *__env, jobject _self, jintArray _i_param)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    if (Jp2_output_box_CLS==NULL)
      Jp2_output_box_LOADER(__env);
    int *i_param = NULL;
    jint *i_param_ELTS = NULL;
    if (_i_param != NULL)
      {
        i_param_ELTS = __env->GetIntArrayElements(_i_param,NULL);
        i_param = (int *) i_param_ELTS;
      }
    jp2_output_box *Result;
    try { // So we can clean up temporary arrays
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->write_metadata(i_param);
    } catch (...) {
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    throw;
    }
    if (_i_param != NULL)
      {
        __env->ReleaseIntArrayElements(_i_param,i_param_ELTS,0);
      }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_output_box_CLS);
        __env->SetLongField(_Result,Jp2_output_box_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Jpx_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Jpx_target_CLS==NULL)
      Jpx_target_LOADER(__env);
    bool Result;
    jpx_target *self = (jpx_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Jpx_target_PTR) & ~((jlong) 1));
    Result = self->close();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_analysis                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_analysis_CLS != NULL) return;
  try {
    Kdu_analysis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_analysis_CLS==NULL)
      Kdu_analysis_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_analysis_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_analysis_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_analysis *self = (kdu_analysis *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2J(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *node_S = _kdu_long_to_addr((_node==NULL)?((jlong) 0):(__env->GetLongField(_node,Kdu_node_PTR)));
    kdu_node node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_analysis *self =
      new kdu_analysis(node,allocator,use_shorts,normalization,roi,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1analysis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1roi_1node_2Lkdu_1jni_Kdu_1thread_1env_2J(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *resolution_S = _kdu_long_to_addr((_resolution==NULL)?((jlong) 0):(__env->GetLongField(_resolution,Kdu_resolution_PTR)));
    kdu_resolution resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_analysis *self =
      new kdu_analysis(resolution,allocator,use_shorts,normalization,roi,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                 Kdu_block                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_CLS != NULL) return;
  try {
    Kdu_block_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1passes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_max_passes();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1passes(JNIEnv *__env, jobject _self, jint _new_passes, jboolean _copy_existing)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_passes = (int) _new_passes;
    bool copy_existing = (_copy_existing)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_max_passes(new_passes,copy_existing);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1max_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_max_bytes();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1bytes(JNIEnv *__env, jobject _self, jint _new_bytes, jboolean _copy_existing)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_bytes = (int) _new_bytes;
    bool copy_existing = (_copy_existing)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_max_bytes(new_bytes,copy_existing);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1samples(JNIEnv *__env, jobject _self, jint _new_samples)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_samples = (int) _new_samples;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_max_samples(new_samples);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1max_1contexts(JNIEnv *__env, jobject _self, jint _new_contexts)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_contexts = (int) _new_contexts;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_max_contexts(new_contexts);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result_copy = self->get_size();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1size(JNIEnv *__env, jobject _self, jobject _new_size)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *new_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_new_size,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_size(*new_size);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1block_Get_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result_copy = self->get_region();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1region(JNIEnv *__env, jobject _self, jobject _new_region)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_region(*new_region);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_transpose();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1transpose(JNIEnv *__env, jobject _self, jboolean _new_transpose)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_transpose = (_new_transpose)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_transpose(new_transpose);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1vflip(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_vflip();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1vflip(JNIEnv *__env, jobject _self, jboolean _new_vflip)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_vflip = (_new_vflip)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_vflip(new_vflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1block_Get_1hflip(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_hflip();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1hflip(JNIEnv *__env, jobject _self, jboolean _new_hflip)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    bool new_hflip = (_new_hflip)?true:false;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_hflip(new_hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1modes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_modes();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1modes(JNIEnv *__env, jobject _self, jint _new_modes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_modes = (int) _new_modes;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_modes(new_modes);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1orientation(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_orientation();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1orientation(JNIEnv *__env, jobject _self, jint _new_orientation)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_orientation = (int) _new_orientation;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_orientation(new_orientation);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1missing_1msbs(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_missing_msbs();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1missing_1msbs(JNIEnv *__env, jobject _self, jint _new_msbs)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_msbs = (int) _new_msbs;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_missing_msbs(new_msbs);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Get_1num_1passes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_num_passes();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1num_1passes(JNIEnv *__env, jobject _self, jint _new_passes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int new_passes = (int) _new_passes;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_num_passes(new_passes);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->get_pass_lengths(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1lengths(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_pass_lengths(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->get_pass_slopes(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1pass_1slopes(JNIEnv *__env, jobject _self, jintArray _buffer)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (int *) buffer_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_pass_slopes(buffer);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Get_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->get_buffered_bytes(buffer,first_idx,num_bytes);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Set_1buffered_1bytes(JNIEnv *__env, jobject _self, jbyteArray _buffer, jint _first_idx, jint _num_bytes)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->set_buffered_bytes(buffer,first_idx,num_bytes);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1block_Start_1timing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->start_timing();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Finish_1timing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->finish_timing();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_Initialize_1timing(JNIEnv *__env, jobject _self, jint _iterations)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    int iterations = (int) _iterations;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    self->initialize_timing(iterations);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1block_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _unique_samples, jdoubleArray _time_wasted)
{
  try {
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    jlong unique_samples_ELT; __env->GetLongArrayRegion(_unique_samples,0,1,&unique_samples_ELT);
    kdu_long unique_samples = (kdu_long) unique_samples_ELT;
    jdouble time_wasted_ELT; __env->GetDoubleArrayRegion(_time_wasted,0,1,&time_wasted_ELT);
    double time_wasted = (double) time_wasted_ELT;
    double Result;
    kdu_block *self = (kdu_block *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_PTR) & ~((jlong) 1));
    Result = self->get_timing_stats(unique_samples,time_wasted);
    unique_samples_ELT = (jlong) unique_samples;
  __env->SetLongArrayRegion(_unique_samples,0,1,&unique_samples_ELT);
    time_wasted_ELT = (jdouble) time_wasted;
  __env->SetDoubleArrayRegion(_time_wasted,0,1,&time_wasted_ELT);
    return (jdouble) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jdouble) 0;
}

/*****************************************************************************/
/*                             Kdu_block_decoder                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_decoder_CLS != NULL) return;
  try {
    Kdu_block_decoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_block_decoder_CLS==NULL)
      Kdu_block_decoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_block_decoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_block_decoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_block_decoder *self = (kdu_block_decoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_block_decoder *self =
      new kdu_block_decoder();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1decoder_Decode(JNIEnv *__env, jobject _self, jobject _block)
{
  try {
    if (Kdu_block_decoder_CLS==NULL)
      Kdu_block_decoder_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_block_decoder *self = (kdu_block_decoder *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_decoder_PTR) & ~((jlong) 1));
    self->decode(block);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                             Kdu_block_encoder                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_block_encoder_CLS != NULL) return;
  try {
    Kdu_block_encoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_block_encoder_CLS==NULL)
      Kdu_block_encoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_block_encoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_block_encoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_block_encoder *self = (kdu_block_encoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_block_encoder *self =
      new kdu_block_encoder();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1block_1encoder_Encode(JNIEnv *__env, jobject _self, jobject _block, jboolean _reversible, jdouble _msb_wmse, jint _estimated_slope_threshold)
{
  try {
    if (Kdu_block_encoder_CLS==NULL)
      Kdu_block_encoder_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    bool reversible = (_reversible)?true:false;
    double msb_wmse = (double) _msb_wmse;
    kdu_uint16 estimated_slope_threshold = (kdu_uint16) _estimated_slope_threshold;
    kdu_block_encoder *self = (kdu_block_encoder *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_block_encoder_PTR) & ~((jlong) 1));
    self->encode(block,reversible,msb_wmse,estimated_slope_threshold);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                 Kdu_cache                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_cache_CLS != NULL) return;
  try {
    Kdu_cache_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_cache_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_cache_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_cache *self = (_aux_extended__kdu_cache *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_cache *self_delegator =(_jni_delegator__kdu_cache *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_cache *self =
      new _aux_extended__kdu_cache();
    self->_delegator = new _jni_delegator__kdu_cache(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    _aux_extended__kdu_cache *self = (_aux_extended__kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_cache *self_delegator = (_jni_delegator__kdu_cache *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Attach_1to(JNIEnv *__env, jobject _self, jobject _existing)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *existing = (kdu_cache *)
      _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_cache_PTR) & ~((jlong) 1)));
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->attach_to(existing);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Add_1to_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _data, jint _offset, jint _num_bytes, jboolean _is_final, jboolean _add_as_most_recent, jboolean _mark_if_augmented)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int offset = (int) _offset;
    int num_bytes = (int) _num_bytes;
    bool is_final = (_is_final)?true:false;
    bool add_as_most_recent = (_add_as_most_recent)?true:false;
    bool mark_if_augmented = (_mark_if_augmented)?true:false;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->add_to_databin(databin_class,codestream_id,databin_id,data,offset,num_bytes,is_final,add_as_most_recent,mark_if_augmented);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1length(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbooleanArray _is_complete)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool *is_complete = NULL;
    jboolean *is_complete_ELTS = NULL;
    jsize is_complete_L = 0;
    if (_is_complete != NULL)
      {
        is_complete_ELTS = __env->GetBooleanArrayElements(_is_complete,NULL);
        is_complete_L = __env->GetArrayLength(_is_complete);
        is_complete = new bool[is_complete_L];
        { for (int i=0; i<is_complete_L; i++) is_complete[i] = (is_complete)?true:false; }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_databin_length(databin_class,codestream_id,databin_id,is_complete);
    } catch (...) {
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    throw;
    }
    if (_is_complete != NULL)
      {
        for (int i=0; i<is_complete_L; i++) is_complete_ELTS[i] = (jboolean)(is_complete[i]);
      }
    if (_is_complete != NULL)
      {
        delete[] is_complete;
        __env->ReleaseBooleanArrayElements(_is_complete,is_complete_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Promote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->promote_databin(databin_class,codestream_id,databin_id);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Demote_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->demote_databin(databin_class,codestream_id,databin_id);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1codestream(JNIEnv *__env, jobject _self, jlong _stream_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_long stream_id = (kdu_long) _stream_id;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_next_codestream(stream_id);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1lru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (_only_if_marked)?true:false;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_next_lru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1next_1mru_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _only_if_marked)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (_only_if_marked)?true:false;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_next_mru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1cache_Mark_1databin(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jboolean _mark_state)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool mark_state = (_mark_state)?true:false;
    bool Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->mark_databin(databin_class,codestream_id,databin_id,mark_state);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Clear_1all_1marks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->clear_all_marks();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Set_1all_1marks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->set_all_marks();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1cache_Get_1databin_1prefix(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id, jbyteArray _buf, jint _max_bytes)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int max_bytes = (int) _max_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_databin_prefix(databin_class,codestream_id,databin_id,buf,max_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1cache_Set_1read_1scope(JNIEnv *__env, jobject _self, jint _databin_class, jlong _codestream_id, jlong _databin_id)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    self->set_read_scope(databin_class,codestream_id,databin_id);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1peak_1cache_1memory(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_peak_cache_memory();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1cache_Get_1transferred_1bytes(JNIEnv *__env, jobject _self, jint _databin_class)
{
  try {
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    int databin_class = (int) _databin_class;
    kdu_long Result;
    kdu_cache *self = (kdu_cache *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_cache_PTR) & ~((jlong) 1));
    Result = self->get_transferred_bytes(databin_class);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

void _jni_delegator__kdu_cache::acquire_lock()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jmethodID __Acquire_lock_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Acquire_lock","()V");
    __env->CallVoidMethod(_self,__Acquire_lock_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

void _jni_delegator__kdu_cache::release_lock()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    jmethodID __Release_lock_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Release_lock","()V");
    __env->CallVoidMethod(_self,__Release_lock_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

/*****************************************************************************/
/*                            Kdu_channel_mapping                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_channel_mapping_CLS != NULL) return;
  try {
    Kdu_channel_mapping_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_channel_mapping_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_channel_mapping_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_channel_mapping *self = (kdu_channel_mapping *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_channel_mapping *self =
      new kdu_channel_mapping();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Clear(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    self->clear();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Kdu_1codestream_2(JNIEnv *__env, jobject _self, jobject _codestream)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->configure(codestream);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1colour_2Lkdu_1jni_Jp2_1channels_2ILkdu_1jni_Jp2_1palette_2Lkdu_1jni_Jp2_1dimensions_2(JNIEnv *__env, jobject _self, jobject _colour, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *colour_S = _kdu_long_to_addr((_colour==NULL)?((jlong) 0):(__env->GetLongField(_colour,Jp2_colour_PTR)));
    jp2_colour colour = *((jp2_colour *)(&colour_S));
    void *channels_S = _kdu_long_to_addr((_channels==NULL)?((jlong) 0):(__env->GetLongField(_channels,Jp2_channels_PTR)));
    jp2_channels channels = *((jp2_channels *)(&channels_S));
    int codestream_idx = (int) _codestream_idx;
    void *palette_S = _kdu_long_to_addr((_palette==NULL)?((jlong) 0):(__env->GetLongField(_palette,Jp2_palette_PTR)));
    jp2_palette palette = *((jp2_palette *)(&palette_S));
    void *codestream_dimensions_S = _kdu_long_to_addr((_codestream_dimensions==NULL)?((jlong) 0):(__env->GetLongField(_codestream_dimensions,Jp2_dimensions_PTR)));
    jp2_dimensions codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->configure(colour,channels,codestream_idx,palette,codestream_dimensions);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Configure__Lkdu_1jni_Jp2_1source_2Z(JNIEnv *__env, jobject _self, jobject _jp2_in, jboolean _ignore_alpha)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_source_CLS==NULL)
      Jp2_source_LOADER(__env);
    jp2_source *jp2_in = (jp2_source *)
      _kdu_long_to_addr((_jp2_in==NULL)?((jlong) 0):(__env->GetLongField(_jp2_in,Jp2_source_PTR) & ~((jlong) 1)));
    bool ignore_alpha = (_ignore_alpha)?true:false;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->configure(jp2_in,ignore_alpha);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Add_1alpha_1to_1configuration(JNIEnv *__env, jobject _self, jobject _channels, jint _codestream_idx, jobject _palette, jobject _codestream_dimensions, jboolean _ignore_premultiplied_alpha)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    void *channels_S = _kdu_long_to_addr((_channels==NULL)?((jlong) 0):(__env->GetLongField(_channels,Jp2_channels_PTR)));
    jp2_channels channels = *((jp2_channels *)(&channels_S));
    int codestream_idx = (int) _codestream_idx;
    void *palette_S = _kdu_long_to_addr((_palette==NULL)?((jlong) 0):(__env->GetLongField(_palette,Jp2_palette_PTR)));
    jp2_palette palette = *((jp2_palette *)(&palette_S));
    void *codestream_dimensions_S = _kdu_long_to_addr((_codestream_dimensions==NULL)?((jlong) 0):(__env->GetLongField(_codestream_dimensions,Jp2_dimensions_PTR)));
    jp2_dimensions codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool ignore_premultiplied_alpha = (_ignore_premultiplied_alpha)?true:false;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->add_alpha_to_configuration(channels,codestream_idx,palette,codestream_dimensions,ignore_premultiplied_alpha);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_num_channels();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Set_1num_1channels(JNIEnv *__env, jobject _self, jint _num)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int num = (int) _num;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    self->set_num_channels(num);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1num_1colour_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_num_colour_channels();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1source_1component(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_source_component(n);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1precision(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    int Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_default_rendering_precision(n);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1default_1rendering_1signed(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    int n = (int) _n;
    bool Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_default_rendering_signed(n);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1channel_1mapping_Get_1colour_1converter(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Jp2_colour_converter_CLS==NULL)
      Jp2_colour_converter_LOADER(__env);
    jp2_colour_converter *Result;
    kdu_channel_mapping *self = (kdu_channel_mapping *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_channel_mapping_PTR) & ~((jlong) 1));
    Result = self->get_colour_converter();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_colour_converter_CLS);
        __env->SetLongField(_Result,Jp2_colour_converter_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_client                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_CLS != NULL) return;
  try {
    Kdu_client_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_client *self = (kdu_client *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_client *self =
      new kdu_client();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1context_1translator(JNIEnv *__env, jobject _self, jobject _translator)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    kdu_client_translator *translator = (kdu_client_translator *)
      _kdu_long_to_addr((_translator==NULL)?((jlong) 0):(__env->GetLongField(_translator,Kdu_client_translator_PTR) & ~((jlong) 1)));
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    self->install_context_translator(translator);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Connect(JNIEnv *__env, jobject _self, jstring _server, jstring _proxy, jstring _request, jstring _channel_transport, jstring _cache_dir)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    const char *server = NULL;
    if (_server != NULL)
      {
        server = __env->GetStringUTFChars(_server,NULL);
      }
    const char *proxy = NULL;
    if (_proxy != NULL)
      {
        proxy = __env->GetStringUTFChars(_proxy,NULL);
      }
    const char *request = NULL;
    if (_request != NULL)
      {
        request = __env->GetStringUTFChars(_request,NULL);
      }
    const char *channel_transport = NULL;
    if (_channel_transport != NULL)
      {
        channel_transport = __env->GetStringUTFChars(_channel_transport,NULL);
      }
    const char *cache_dir = NULL;
    if (_cache_dir != NULL)
      {
        cache_dir = __env->GetStringUTFChars(_cache_dir,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    self->connect(server,proxy,request,channel_transport,cache_dir);
    } catch (...) {
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_proxy != NULL)
      {
        __env->ReleaseStringUTFChars(_proxy,proxy);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_channel_transport != NULL)
      {
        __env->ReleaseStringUTFChars(_channel_transport,channel_transport);
      }
    if (_cache_dir != NULL)
      {
        __env->ReleaseStringUTFChars(_cache_dir,cache_dir);
      }
    throw;
    }
    if (_server != NULL)
      {
        __env->ReleaseStringUTFChars(_server,server);
      }
    if (_proxy != NULL)
      {
        __env->ReleaseStringUTFChars(_proxy,proxy);
      }
    if (_request != NULL)
      {
        __env->ReleaseStringUTFChars(_request,request);
      }
    if (_channel_transport != NULL)
      {
        __env->ReleaseStringUTFChars(_channel_transport,channel_transport);
      }
    if (_cache_dir != NULL)
      {
        __env->ReleaseStringUTFChars(_cache_dir,cache_dir);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1active(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->is_active();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1one_1time_1request(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->is_one_time_request();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1alive(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->is_alive();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Is_1idle(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->is_idle();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Disconnect(JNIEnv *__env, jobject _self, jboolean _keep_transport_open, jint _timeout_milliseconds)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    bool keep_transport_open = (_keep_transport_open)?true:false;
    int timeout_milliseconds = (int) _timeout_milliseconds;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    self->disconnect(keep_transport_open,timeout_milliseconds);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_Install_1notifier(JNIEnv *__env, jobject _self, jobject _notifier)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    kdu_client_notifier *notifier = (kdu_client_notifier *)
      _kdu_long_to_addr((_notifier==NULL)?((jlong) 0):(__env->GetLongField(_notifier,Kdu_client_notifier_PTR) & ~((jlong) 1)));
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    self->install_notifier(notifier);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1client_Get_1status(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    const char * Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->get_status();
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Post_1window(JNIEnv *__env, jobject _self, jobject _window)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->post_window(window);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_Get_1window_1in_1progress(JNIEnv *__env, jobject _self, jobject _window)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr((_window==NULL)?((jlong) 0):(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->get_window_in_progress(window);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_Get_1received_1bytes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_CLS==NULL)
      Kdu_client_LOADER(__env);
    int Result;
    kdu_client *self = (kdu_client *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_PTR) & ~((jlong) 1));
    Result = self->get_received_bytes();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                            Kdu_client_notifier                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_notifier_CLS != NULL) return;
  try {
    Kdu_client_notifier_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_notifier_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_notifier_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_client_notifier *self = (_aux_extended__kdu_client_notifier *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_client_notifier *self_delegator =(_jni_delegator__kdu_client_notifier *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_client_notifier *self =
      new _aux_extended__kdu_client_notifier();
    self->_delegator = new _jni_delegator__kdu_client_notifier(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1notifier_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    _aux_extended__kdu_client_notifier *self = (_aux_extended__kdu_client_notifier *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_notifier_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_client_notifier *self_delegator = (_jni_delegator__kdu_client_notifier *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

void _jni_delegator__kdu_client_notifier::notify()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_client_notifier_CLS==NULL)
      Kdu_client_notifier_LOADER(__env);
    jmethodID __Notify_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Notify","()V");
    __env->CallVoidMethod(_self,__Notify_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

/*****************************************************************************/
/*                           Kdu_client_translator                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_client_translator_CLS != NULL) return;
  try {
    Kdu_client_translator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_client_translator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_client_translator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_client_translator *self = (kdu_client_translator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1translator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_client_translator *self =
      new kdu_client_translator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Init(JNIEnv *__env, jobject _self, jobject _main_cache)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    if (Kdu_cache_CLS==NULL)
      Kdu_cache_LOADER(__env);
    kdu_cache *main_cache = (kdu_cache *)
      _kdu_long_to_addr((_main_cache==NULL)?((jlong) 0):(__env->GetLongField(_main_cache,Kdu_cache_PTR) & ~((jlong) 1)));
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    self->init(main_cache);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1client_1translator_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_1translator_Update(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    bool Result;
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    Result = self->update();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_1translator_Get_1num_1context_1members(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    Result = self->get_num_context_members(context_type,context_idx,remapping_ids);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1client_1translator_Get_1context_1codestream(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    Result = self->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1client_1translator_Get_1context_1components(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx, jintArray _num_components)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    jint num_components_ELT; __env->GetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    int num_components = (int) num_components_ELT;
    const int *Result;
    try { // So we can clean up temporary arrays
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    Result = self->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    num_components_ELT = (jint) num_components;
  __env->SetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1client_1translator_Perform_1context_1remapping(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx, jobject _resolution, jobject _region)
{
  try {
    if (Kdu_client_translator_CLS==NULL)
      Kdu_client_translator_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_client_translator *self = (kdu_client_translator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_client_translator_PTR) & ~((jlong) 1));
    Result = self->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,*resolution,*region);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Kdu_clientx                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_clientx_CLS != NULL) return;
  try {
    Kdu_clientx_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_clientx_CLS==NULL)
      Kdu_clientx_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_clientx_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_clientx_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_clientx *self = (kdu_clientx *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1clientx_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_clientx *self =
      new kdu_clientx();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                              Kdu_codestream                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_codestream_CLS != NULL) return;
  try {
    Kdu_codestream_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2Lkdu_1jni_Kdu_1compressed_1target_2Lkdu_1jni_Kdu_1dims_2IJ(JNIEnv *__env, jobject _self, jobject _siz, jobject _target, jobject _fragment_region, jint _fragment_tiles_generated, jlong _fragment_tile_bytes_generated)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    kdu_compressed_target *target = (kdu_compressed_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_dims *fragment_region = (kdu_dims *)
      _kdu_long_to_addr((_fragment_region==NULL)?((jlong) 0):(__env->GetLongField(_fragment_region,Kdu_dims_PTR) & ~((jlong) 1)));
    int fragment_tiles_generated = (int) _fragment_tiles_generated;
    kdu_long fragment_tile_bytes_generated = (kdu_long) _fragment_tile_bytes_generated;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(siz,target,fragment_region,fragment_tiles_generated,fragment_tile_bytes_generated);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(source,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Create__Lkdu_1jni_Siz_1params_2(JNIEnv *__env, jobject _self, jobject _siz)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    siz_params *siz = (siz_params *)
      _kdu_long_to_addr((_siz==NULL)?((jlong) 0):(__env->GetLongField(_siz,Siz_params_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.create(siz);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1target_2(JNIEnv *__env, jobject _self, jobject _target)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *target = (kdu_compressed_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.restart(target);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Restart__Lkdu_1jni_Kdu_1compressed_1source_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _source, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.restart(source,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Share_1buffering(JNIEnv *__env, jobject _self, jobject _existing)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *existing_S = _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_codestream_PTR)));
    kdu_codestream existing = *((kdu_codestream *)(&existing_S));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.share_buffering(existing);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.destroy();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Enable_1restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.enable_restart();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1persistent(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_persistent();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Augment_1cache_1threshold(JNIEnv *__env, jobject _self, jint _extra_bytes)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int extra_bytes = (int) _extra_bytes;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.augment_cache_threshold(extra_bytes);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1tile_1unloading_1threshold(JNIEnv *__env, jobject _self, jint _max_tiles_on_list)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int max_tiles_on_list = (int) _max_tiles_on_list;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.set_tile_unloading_threshold(max_tiles_on_list);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Is_1last_1fragment(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.is_last_fragment();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Access_1siz(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    siz_params *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.access_siz();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Siz_params_CLS);
        __env->SetLongField(_Result,Siz_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1components(JNIEnv *__env, jobject _self, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool want_output_comps = (_want_output_comps)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_num_components(want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1bit_1depth(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (_want_output_comps)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_bit_depth(comp_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1signed(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (_want_output_comps)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_signed(comp_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1subsampling(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _subs, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *subs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_subs,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_subsampling(comp_idx,*subs,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1registration(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _scale, jobject _crg, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *scale = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_scale,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *crg = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_crg,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_registration(comp_idx,*scale,*crg,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1dims(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _dims, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_dims(comp_idx,*dims,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1partition(JNIEnv *__env, jobject _self, jobject _partition)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *partition = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_partition,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_tile_partition(*partition);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1valid_1tiles(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_valid_tiles(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Find_1tile(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _loc, jobject _tile_idx, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords *loc = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_loc,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.find_tile(comp_idx,*loc,*tile_idx,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1tile_1dims(JNIEnv *__env, jobject _self, jobject _tile_idx, jint _comp_idx, jobject _dims, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    int comp_idx = (int) _comp_idx;
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.get_tile_dims(*tile_idx,comp_idx,*dims,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1max_1tile_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_max_tile_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1min_1dwt_1levels(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_min_dwt_levels();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Can_1flip(JNIEnv *__env, jobject _self, jboolean _check_current_appearance_only)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool check_current_appearance_only = (_check_current_appearance_only)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.can_flip(check_current_appearance_only);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Map_1region(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _comp_region, jobject _hires_region, jboolean _want_output_comps)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_dims *comp_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_comp_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *hires_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_hires_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool want_output_comps = (_want_output_comps)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.map_region(comp_idx,*comp_region,*hires_region,want_output_comps);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1textualization(JNIEnv *__env, jobject _self, jobject _output)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr((_output==NULL)?((jlong) 0):(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_textualization(output);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1max_1bytes(JNIEnv *__env, jobject _self, jlong _max_bytes, jboolean _simulate_parsing, jboolean _allow_periodic_trimming)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_long max_bytes = (kdu_long) _max_bytes;
    bool simulate_parsing = (_simulate_parsing)?true:false;
    bool allow_periodic_trimming = (_allow_periodic_trimming)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_max_bytes(max_bytes,simulate_parsing,allow_periodic_trimming);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1min_1slope_1threshold(JNIEnv *__env, jobject _self, jint _min_slope)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_uint16 min_slope = (kdu_uint16) _min_slope;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_min_slope_threshold(min_slope);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1resilient(JNIEnv *__env, jobject _self, jboolean _expect_ubiquitous_sops)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool expect_ubiquitous_sops = (_expect_ubiquitous_sops)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_resilient(expect_ubiquitous_sops);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fussy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_fussy();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1fast(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_fast();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__IIIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _first_component, jint _max_components, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int first_component = (int) _first_component;
    int max_components = (int) _max_components;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr((_region_of_interest==NULL)?((jlong) 0):(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1)));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.apply_input_restrictions(first_component,max_components,discard_levels,max_layers,region_of_interest,access_mode);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Apply_1input_1restrictions__I_3IIILkdu_1jni_Kdu_1dims_2I(JNIEnv *__env, jobject _self, jint _num_indices, jintArray _component_indices, jint _discard_levels, jint _max_layers, jobject _region_of_interest, jint _access_mode)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int num_indices = (int) _num_indices;
    int *component_indices = NULL;
    jint *component_indices_ELTS = NULL;
    if (_component_indices != NULL)
      {
        component_indices_ELTS = __env->GetIntArrayElements(_component_indices,NULL);
        component_indices = (int *) component_indices_ELTS;
      }
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = (kdu_dims *)
      _kdu_long_to_addr((_region_of_interest==NULL)?((jlong) 0):(__env->GetLongField(_region_of_interest,Kdu_dims_PTR) & ~((jlong) 1)));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.apply_input_restrictions(num_indices,component_indices,discard_levels,max_layers,region_of_interest,access_mode);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_component_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_component_indices,component_indices_ELTS,0);
      }
    throw;
    }
    if (_component_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_component_indices,component_indices_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Change_1appearance(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.change_appearance(transpose,vflip,hflip);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Set_1block_1truncation(JNIEnv *__env, jobject _self, jint _factor)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_int32 factor = (kdu_int32) _factor;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.set_block_truncation(factor);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Open_1tile(JNIEnv *__env, jobject _self, jobject _tile_idx, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *tile_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_tile_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_tile Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.open_tile(*tile_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_tile_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1comment(JNIEnv *__env, jobject _self, jobject _prev)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    void *prev_S = _kdu_long_to_addr((_prev==NULL)?((jlong) 0):(__env->GetLongField(_prev,Kdu_codestream_comment_PTR)));
    kdu_codestream_comment prev = *((kdu_codestream_comment *)(&prev_S));
    kdu_codestream_comment Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_comment(prev);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_codestream_comment_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1codestream_Add_1comment(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    kdu_codestream_comment Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.add_comment();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_codestream_comment_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Flush(JNIEnv *__env, jobject _self, jlongArray _layer_bytes, jint _num_layer_specs, jintArray _layer_thresholds, jboolean _trim_to_rate, jboolean _record_in_comseg, jdouble _tolerance, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    jint *layer_thresholds_ELTS = NULL;
    jsize layer_thresholds_L = 0;
    if (_layer_thresholds != NULL)
      {
        layer_thresholds_ELTS = __env->GetIntArrayElements(_layer_thresholds,NULL);
        layer_thresholds_L = __env->GetArrayLength(_layer_thresholds);
        layer_thresholds = new kdu_uint16[layer_thresholds_L];
        { for (int i=0; i<layer_thresholds_L; i++) layer_thresholds[i] = (kdu_uint16)(layer_thresholds_ELTS[i]); }
      }
    bool trim_to_rate = (_trim_to_rate)?true:false;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    double tolerance = (double) _tolerance;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg,tolerance,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_thresholds != NULL)
      {
        for (int i=0; i<layer_thresholds_L; i++) layer_thresholds_ELTS[i] = (jint)(layer_thresholds[i]);
      }
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_thresholds != NULL)
      {
        delete[] layer_thresholds;
        __env->ReleaseIntArrayElements(_layer_thresholds,layer_thresholds_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Trans_1out(JNIEnv *__env, jobject _self, jlong _max_bytes, jlongArray _layer_bytes, jint _layer_bytes_entries, jboolean _record_in_comseg, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    int layer_bytes_entries = (int) _layer_bytes_entries;
    bool record_in_comseg = (_record_in_comseg)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.trans_out(max_bytes,layer_bytes,layer_bytes_entries,record_in_comseg,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_Ready_1for_1flush(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.ready_for_flush(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1total_1bytes(JNIEnv *__env, jobject _self, jboolean _exclude_main_header)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool exclude_main_header = (_exclude_main_header)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_total_bytes(exclude_main_header);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1num_1tparts(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_num_tparts();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_Collect_1timing_1stats(JNIEnv *__env, jobject _self, jint _num_coder_iterations)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int num_coder_iterations = (int) _num_coder_iterations;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    self.collect_timing_stats(num_coder_iterations);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1timing_1stats(JNIEnv *__env, jobject _self, jlongArray _num_samples, jboolean _coder_only)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdu_long *num_samples = NULL;
    jlong *num_samples_ELTS = NULL;
    jsize num_samples_L = 0;
    if (_num_samples != NULL)
      {
        num_samples_ELTS = __env->GetLongArrayElements(_num_samples,NULL);
        num_samples_L = __env->GetArrayLength(_num_samples);
        num_samples = new kdu_long[num_samples_L];
        { for (int i=0; i<num_samples_L; i++) num_samples[i] = (kdu_long)(num_samples_ELTS[i]); }
      }
    bool coder_only = (_coder_only)?true:false;
    double Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_timing_stats(num_samples,coder_only);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_num_samples != NULL)
      {
        delete[] num_samples;
        __env->ReleaseLongArrayElements(_num_samples,num_samples_ELTS,0);
      }
    throw;
    }
    if (_num_samples != NULL)
      {
        for (int i=0; i<num_samples_L; i++) num_samples_ELTS[i] = (jlong)(num_samples[i]);
      }
    if (_num_samples != NULL)
      {
        delete[] num_samples;
        __env->ReleaseLongArrayElements(_num_samples,num_samples_ELTS,0);
      }
    return (jdouble) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jdouble) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1data_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool get_peak_allocation = (_get_peak_allocation)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_compressed_data_memory(get_peak_allocation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1codestream_Get_1compressed_1state_1memory(JNIEnv *__env, jobject _self, jboolean _get_peak_allocation)
{
  try {
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    bool get_peak_allocation = (_get_peak_allocation)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_PTR));
    kdu_codestream self = *((kdu_codestream *)(&self_S));
    Result = self.get_compressed_state_memory(get_peak_allocation);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

/*****************************************************************************/
/*                          Kdu_codestream_comment                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_codestream_comment_CLS != NULL) return;
  try {
    Kdu_codestream_comment_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Get_1text(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    const char * Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.get_text();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Check_1readonly(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.check_readonly();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1codestream_1comment_Put_1text(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_codestream_comment_CLS==NULL)
      Kdu_codestream_comment_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_codestream_comment_PTR));
    kdu_codestream_comment self = *((kdu_codestream_comment *)(&self_S));
    Result = self.put_text(string);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_codestream_comment_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Kdu_compositor_buf                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compositor_buf_CLS != NULL) return;
  try {
    Kdu_compositor_buf_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compositor_buf_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compositor_buf_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compositor_buf *self = (kdu_compositor_buf *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_compositor_buf *self =
      new kdu_compositor_buf();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Init(JNIEnv *__env, jobject _self, jlong _buf, jint _row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    kdu_uint32 *buf = (kdu_uint32 *) _kdu_long_to_addr(_buf);
    int row_gap = (int) _row_gap;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    self->init(buf,row_gap);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Is_1read_1access_1allowed(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    bool Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    Result = self->is_read_access_allowed();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Set_1read_1accessibility(JNIEnv *__env, jobject _self, jboolean _read_access_required)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    bool read_access_required = (_read_access_required)?true:false;
    bool Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    Result = self->set_read_accessibility(read_access_required);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1buf(JNIEnv *__env, jobject _self, jintArray _row_gap, jboolean _read_write)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jint row_gap_ELT; __env->GetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    int row_gap = (int) row_gap_ELT;
    bool read_write = (_read_write)?true:false;
    kdu_uint32 *Result;
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    Result = self->get_buf(row_gap,read_write);
    row_gap_ELT = (jint) row_gap;
  __env->SetIntArrayRegion(_row_gap,0,1,&row_gap_ELT);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compositor_1buf_Get_1region(JNIEnv *__env, jobject _self, jobject _src_region, jintArray _tgt_buf, jint _tgt_offset, jint _tgt_row_gap)
{
  try {
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_int32 *tgt_buf = NULL;
    jint *tgt_buf_ELTS = NULL;
    if (_tgt_buf != NULL)
      {
        tgt_buf_ELTS = __env->GetIntArrayElements(_tgt_buf,NULL);
        tgt_buf = (kdu_int32 *) tgt_buf_ELTS;
      }
    int tgt_offset = (int) _tgt_offset;
    int tgt_row_gap = (int) _tgt_row_gap;
    try { // So we can clean up temporary arrays
    kdu_compositor_buf *self = (kdu_compositor_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compositor_buf_PTR) & ~((jlong) 1));
    self->get_region(*src_region,tgt_buf,tgt_offset,tgt_row_gap);
    } catch (...) {
    if (_tgt_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
    throw;
    }
    if (_tgt_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_tgt_buf,tgt_buf_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                           Kdu_compressed_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_source_CLS != NULL) return;
  try {
    Kdu_compressed_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_source *self = (kdu_compressed_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->close();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1capabilities(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    int Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->get_capabilities();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Read(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->read(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Seek(JNIEnv *__env, jobject _self, jlong _offset)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->seek(offset);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Get_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->get_pos();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1tileheader_1scope(JNIEnv *__env, jobject _self, jint _tnum, jint _num_tiles)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->set_tileheader_scope(tnum,num_tiles);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1source_Set_1precinct_1scope(JNIEnv *__env, jobject _self, jlong _unique_id)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_long unique_id = (kdu_long) _unique_id;
    bool Result;
    kdu_compressed_source *self = (kdu_compressed_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_PTR) & ~((jlong) 1));
    Result = self->set_precinct_scope(unique_id);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                      Kdu_compressed_source_nonnative                      */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_source_nonnative_CLS != NULL) return;
  try {
    Kdu_compressed_source_nonnative_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_source_nonnative_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_compressed_source_nonnative *self = (_aux_extended__kdu_compressed_source_nonnative *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_compressed_source_nonnative *self_delegator =(_jni_delegator__kdu_compressed_source_nonnative *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_compressed_source_nonnative *self =
      new _aux_extended__kdu_compressed_source_nonnative();
    self->_delegator = new _jni_delegator__kdu_compressed_source_nonnative(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    _aux_extended__kdu_compressed_source_nonnative *self = (_aux_extended__kdu_compressed_source_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_compressed_source_nonnative *self_delegator = (_jni_delegator__kdu_compressed_source_nonnative *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1source_1nonnative_Push_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes)
{
  try {
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    try { // So we can clean up temporary arrays
    kdu_compressed_source_nonnative *self = (kdu_compressed_source_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_source_nonnative_PTR) & ~((jlong) 1));
    self->push_data(data,first_byte_pos,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

int _jni_delegator__kdu_compressed_source_nonnative::get_capabilities()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jmethodID __Get_capabilities_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Get_capabilities","()I");
    jint _Result;
    _Result = __env->CallIntMethod(_self,__Get_capabilities_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (int) _Result;
  } catch(...) { }
  throw (int) 0;
  return (int) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::seek(kdu_long offset)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong _offset = (jlong) offset;
    jmethodID __Seek_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Seek","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Seek_ID,_offset);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

kdu_long _jni_delegator__kdu_compressed_source_nonnative::get_pos()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jmethodID __Get_pos_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Get_pos","()J");
    jlong _Result;
    _Result = __env->CallLongMethod(_self,__Get_pos_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (kdu_long) _Result;
  } catch(...) { }
  throw (int) 0;
  return (kdu_long) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::set_tileheader_scope(int tnum, int num_tiles)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jint _tnum = (jint) tnum;
    jint _num_tiles = (jint) num_tiles;
    jmethodID __Set_tileheader_scope_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_tileheader_scope","(II)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Set_tileheader_scope_ID,_tnum,_num_tiles);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

bool _jni_delegator__kdu_compressed_source_nonnative::set_precinct_scope(kdu_long unique_id)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jlong _unique_id = (jlong) unique_id;
    jmethodID __Set_precinct_scope_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_precinct_scope","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Set_precinct_scope_ID,_unique_id);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

int _jni_delegator__kdu_compressed_source_nonnative::post_read(int num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_source_nonnative_CLS==NULL)
      Kdu_compressed_source_nonnative_LOADER(__env);
    jint _num_bytes = (jint) num_bytes;
    jmethodID __Post_read_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Post_read","(I)I");
    jint _Result;
    _Result = __env->CallIntMethod(_self,__Post_read_ID,_num_bytes);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (int) _Result;
  } catch(...) { }
  throw (int) 0;
  return (int) 0;
}

/*****************************************************************************/
/*                           Kdu_compressed_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_target_CLS != NULL) return;
  try {
    Kdu_compressed_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_target *self = (kdu_compressed_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    Result = self->close();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Start_1rewrite(JNIEnv *__env, jobject _self, jlong _backtrack)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long backtrack = (kdu_long) _backtrack;
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    Result = self->start_rewrite(backtrack);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_End_1rewrite(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    bool Result;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    Result = self->end_rewrite();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    Result = self->write(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_Set_1target_1size(JNIEnv *__env, jobject _self, jlong _num_bytes)
{
  try {
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_long num_bytes = (kdu_long) _num_bytes;
    kdu_compressed_target *self = (kdu_compressed_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_PTR) & ~((jlong) 1));
    self->set_target_size(num_bytes);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                      Kdu_compressed_target_nonnative                      */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_target_nonnative_CLS != NULL) return;
  try {
    Kdu_compressed_target_nonnative_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_target_nonnative_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_compressed_target_nonnative *self = (_aux_extended__kdu_compressed_target_nonnative *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_compressed_target_nonnative *self_delegator =(_jni_delegator__kdu_compressed_target_nonnative *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_compressed_target_nonnative *self =
      new _aux_extended__kdu_compressed_target_nonnative();
    self->_delegator = new _jni_delegator__kdu_compressed_target_nonnative(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    _aux_extended__kdu_compressed_target_nonnative *self = (_aux_extended__kdu_compressed_target_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_compressed_target_nonnative *self_delegator = (_jni_delegator__kdu_compressed_target_nonnative *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1target_1nonnative_Pull_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _first_byte_pos, jint _num_bytes)
{
  try {
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_compressed_target_nonnative *self = (kdu_compressed_target_nonnative *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_target_nonnative_PTR) & ~((jlong) 1));
    Result = self->pull_data(data,first_byte_pos,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

bool _jni_delegator__kdu_compressed_target_nonnative::start_rewrite(kdu_long backtrack)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong _backtrack = (jlong) backtrack;
    jmethodID __Start_rewrite_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_rewrite","(J)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Start_rewrite_ID,_backtrack);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

bool _jni_delegator__kdu_compressed_target_nonnative::end_rewrite()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jmethodID __End_rewrite_ID = __env->GetMethodID(__env->GetObjectClass(_self),"End_rewrite","()Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__End_rewrite_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

void _jni_delegator__kdu_compressed_target_nonnative::set_target_size(kdu_long num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jlong _num_bytes = (jlong) num_bytes;
    jmethodID __Set_target_size_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Set_target_size","(J)V");
    __env->CallVoidMethod(_self,__Set_target_size_ID,_num_bytes);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

bool _jni_delegator__kdu_compressed_target_nonnative::post_write(int num_bytes)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_compressed_target_nonnative_CLS==NULL)
      Kdu_compressed_target_nonnative_LOADER(__env);
    jint _num_bytes = (jint) num_bytes;
    jmethodID __Post_write_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Post_write","(I)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Post_write_ID,_num_bytes);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

/*****************************************************************************/
/*                        Kdu_compressed_video_source                        */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_video_source_CLS != NULL) return;
  try {
    Kdu_compressed_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_video_source *self = (kdu_compressed_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1timescale(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_uint32 Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_timescale();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1field_1order(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_field_order Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_field_order();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Set_1field_1mode(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int which = (int) _which;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    self->set_field_mode(which);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1num_1frames(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_num_frames();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Seek_1to_1frame(JNIEnv *__env, jobject _self, jint _frame_idx)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int frame_idx = (int) _frame_idx;
    bool Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->seek_to_frame(frame_idx);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1duration(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_duration();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Time_1to_1frame(JNIEnv *__env, jobject _self, jlong _time_instant)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long time_instant = (kdu_long) _time_instant;
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->time_to_frame(time_instant);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1instant(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_frame_instant();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Get_1frame_1period(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_long Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->get_frame_period();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Open_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    int Result;
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    Result = self->open_image();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1source_Close_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_source_CLS==NULL)
      Kdu_compressed_video_source_LOADER(__env);
    kdu_compressed_video_source *self = (kdu_compressed_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_source_PTR) & ~((jlong) 1));
    self->close_image();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                        Kdu_compressed_video_target                        */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_compressed_video_target_CLS != NULL) return;
  try {
    Kdu_compressed_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_compressed_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_compressed_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_compressed_video_target *self = (kdu_compressed_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Open_1image(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    kdu_compressed_video_target *self = (kdu_compressed_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_target_PTR) & ~((jlong) 1));
    self->open_image();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1compressed_1video_1target_Close_1image(JNIEnv *__env, jobject _self, jobject _codestream)
{
  try {
    if (Kdu_compressed_video_target_CLS==NULL)
      Kdu_compressed_video_target_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_compressed_video_target *self = (kdu_compressed_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_compressed_video_target_PTR) & ~((jlong) 1));
    self->close_image(codestream);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_coords                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_coords_CLS != NULL) return;
  try {
    Kdu_coords_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_coords_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_coords_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_coords *self = (kdu_coords *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_coords *self =
      new kdu_coords();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1coords_Native_1create__II(JNIEnv *__env, jclass this_class, jint _x, jint _y)
{
  try {
    int x = (int) _x;
    int y = (int) _y;
    kdu_coords *self =
      new kdu_coords(x,y);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Assign(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *src = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->assign(*src);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1x(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result = self->get_x();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1coords_Get_1y(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result = self->get_y();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1x(JNIEnv *__env, jobject _self, jint _x)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int x = (int) _x;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->set_x(x);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Set_1y(JNIEnv *__env, jobject _self, jint _y)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int y = (int) _y;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->set_y(y);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_Transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->transpose();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Plus(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result_copy = self->plus(*rhs);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Minus(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result_copy = self->minus(*rhs);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Add(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result_copy = self->add(*rhs);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1coords_Subtract(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords Result_copy;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result_copy = self->subtract(*rhs);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1coords_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *rhs = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_coords_PTR) & ~((jlong) 1));
    bool Result;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    Result = self->equals(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->from_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1coords_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_coords *self = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_coords_PTR) & ~((jlong) 1));
    self->to_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_decoder                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_decoder_CLS != NULL) return;
  try {
    Kdu_decoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_decoder_CLS==NULL)
      Kdu_decoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_decoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_decoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_decoder *self = (kdu_decoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1decoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *subband_S = _kdu_long_to_addr((_subband==NULL)?((jlong) 0):(__env->GetLongField(_subband,Kdu_subband_PTR)));
    kdu_subband subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_decoder *self =
      new kdu_decoder(subband,allocator,use_shorts,normalization,pull_offset,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                 Kdu_dims                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_dims_CLS != NULL) return;
  try {
    Kdu_dims_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_dims_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_dims_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_dims *self = (kdu_dims *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_dims *self =
      new kdu_dims();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Assign(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *src = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    self->assign(*src);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1pos(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->access_pos();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Access_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->access_size();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1dims_Area(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_long Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->area();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_Transpose(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    self->transpose();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1dims_Intersection(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims Result_copy;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result_copy = self->intersection(*rhs);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Intersects(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->intersects(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->is_empty();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1dims_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *rhs = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    Result = self->equals(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_From_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    self->from_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1dims_To_1apparent(JNIEnv *__env, jobject _self, jboolean _transp, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    bool transp = (_transp)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_dims *self = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_dims_PTR) & ~((jlong) 1));
    self->to_apparent(transp,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_encoder                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_encoder_CLS != NULL) return;
  try {
    Kdu_encoder_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_encoder_CLS==NULL)
      Kdu_encoder_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_encoder_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_encoder_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_encoder *self = (kdu_encoder *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1encoder_Native_1create(JNIEnv *__env, jclass this_class, jobject _subband, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _roi, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *subband_S = _kdu_long_to_addr((_subband==NULL)?((jlong) 0):(__env->GetLongField(_subband,Kdu_subband_PTR)));
    kdu_subband subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = (kdu_roi_node *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_node_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_encoder *self =
      new kdu_encoder(subband,allocator,use_shorts,normalization,roi,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                               Kdu_line_buf                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_line_buf_CLS != NULL) return;
  try {
    Kdu_line_buf_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_line_buf_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_line_buf_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_line_buf *self = (kdu_line_buf *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1line_1buf_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_line_buf *self =
      new kdu_line_buf();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Pre_1create(JNIEnv *__env, jobject _self, jobject _allocator, jint _width, jboolean _absolute, jboolean _use_shorts, jint _extend_left, jint _extend_right)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    int width = (int) _width;
    bool absolute = (_absolute)?true:false;
    bool use_shorts = (_use_shorts)?true:false;
    int extend_left = (int) _extend_left;
    int extend_right = (int) _extend_right;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    self->pre_create(allocator,width,absolute,use_shorts,extend_left,extend_right);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Create(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    self->create();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1line_1buf_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    self->destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->get_floats(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1floats(JNIEnv *__env, jobject _self, jfloatArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->set_floats(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->get_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3III(JNIEnv *__env, jobject _self, jintArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->set_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->get_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Set_1ints___3SII(JNIEnv *__env, jobject _self, jshortArray _buffer, jint _first_idx, jint _num_samples)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->set_ints(buffer,first_idx,num_samples);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1line_1buf_Get_1width(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    int Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->get_width();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1line_1buf_Is_1absolute(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    bool Result;
    kdu_line_buf *self = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_line_buf_PTR) & ~((jlong) 1));
    Result = self->is_absolute();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Kdu_message                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_message_CLS != NULL) return;
  try {
    Kdu_message_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_message_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_message_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_message *self = (_aux_extended__kdu_message *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_message *self_delegator =(_jni_delegator__kdu_message *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    _aux_extended__kdu_message *self =
      new _aux_extended__kdu_message();
    self->_delegator = new _jni_delegator__kdu_message(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    _aux_extended__kdu_message *self = (_aux_extended__kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_message *self_delegator = (_jni_delegator__kdu_message *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_Put_1text___3I(JNIEnv *__env, jobject _self, jintArray _string)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_uint16 *string = NULL;
    jint *string_ELTS = NULL;
    jsize string_L = 0;
    if (_string != NULL)
      {
        string_ELTS = __env->GetIntArrayElements(_string,NULL);
        string_L = __env->GetArrayLength(_string);
        string = new kdu_uint16[string_L];
        { for (int i=0; i<string_L; i++) string[i] = (kdu_uint16)(string_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_message *self = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    self->put_text(string);
    } catch (...) {
    if (_string != NULL)
      {
        delete[] string;
        __env->ReleaseIntArrayElements(_string,string_ELTS,0);
      }
    throw;
    }
    if (_string != NULL)
      {
        for (int i=0; i<string_L; i++) string_ELTS[i] = (jint)(string[i]);
      }
    if (_string != NULL)
      {
        delete[] string;
        __env->ReleaseIntArrayElements(_string,string_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1message_Set_1hex_1mode(JNIEnv *__env, jobject _self, jboolean _new_mode)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    bool new_mode = (_new_mode)?true:false;
    bool Result;
    kdu_message *self = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_PTR) & ~((jlong) 1));
    Result = self->set_hex_mode(new_mode);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

void _jni_delegator__kdu_message::put_text(const char * string)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jstring _string = __env->NewStringUTF(string);
    jmethodID __Put_text_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Put_text","(Ljava/lang/String;)V");
    __env->CallVoidMethod(_self,__Put_text_ID,_string);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

void _jni_delegator__kdu_message::flush(bool end_of_message)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jboolean _end_of_message = (end_of_message)?true:false;
    jmethodID __Flush_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Flush","(Z)V");
    __env->CallVoidMethod(_self,__Flush_ID,_end_of_message);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

void _jni_delegator__kdu_message::start_message()
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    jmethodID __Start_message_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Start_message","()V");
    __env->CallVoidMethod(_self,__Start_message_ID);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

/*****************************************************************************/
/*                           Kdu_message_formatter                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_message_formatter_CLS != NULL) return;
  try {
    Kdu_message_formatter_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_message_formatter_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_message_formatter_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_message_formatter *self = (kdu_message_formatter *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Native_1create(JNIEnv *__env, jclass this_class, jobject _output, jint _max_line)
{
  try {
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr((_output==NULL)?((jlong) 0):(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1)));
    int max_line = (int) _max_line;
    kdu_message_formatter *self =
      new kdu_message_formatter(output,max_line);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Set_1master_1indent(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    int val = (int) _val;
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    self->set_master_indent(val);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Put_1text__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    self->put_text(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    bool end_of_message = (_end_of_message)?true:false;
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    self->flush(end_of_message);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1message_1formatter_Start_1message(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_message_formatter_CLS==NULL)
      Kdu_message_formatter_LOADER(__env);
    kdu_message_formatter *self = (kdu_message_formatter *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_message_formatter_PTR) & ~((jlong) 1));
    self->start_message();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_metareq                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_metareq_CLS != NULL) return;
  try {
    Kdu_metareq_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1metareq_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_metareq_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_metareq_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_metareq *self = (kdu_metareq *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_metareq *rhs = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_metareq_PTR) & ~((jlong) 1));
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->equals(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1box_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_uint32 Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_box_type();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1qualifier(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_qualifier();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1priority(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_priority();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1byte_1limit(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_byte_limit();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1recurse(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    bool Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_recurse();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1root_1bin_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_long Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_root_bin_id();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1max_1depth(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_max_depth();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1metareq_Get_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    kdu_metareq *Result;
    kdu_metareq *self = (kdu_metareq *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_metareq_PTR) & ~((jlong) 1));
    Result = self->get_next();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_metareq_CLS);
        __env->SetLongField(_Result,Kdu_metareq_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                            Kdu_multi_analysis                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_multi_analysis_CLS != NULL) return;
  try {
    Kdu_multi_analysis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Create(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jobject _roi, jboolean _want_fastest, jint _processing_stripe_height, jobject _env, jlong _env_queue, jboolean _double_buffering)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (_force_precise)?true:false;
    kdu_roi_image *roi = (kdu_roi_image *)
      _kdu_long_to_addr((_roi==NULL)?((jlong) 0):(__env->GetLongField(_roi,Kdu_roi_image_PTR) & ~((jlong) 1)));
    bool want_fastest = (_want_fastest)?true:false;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    bool double_buffering = (_double_buffering)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.create(codestream,tile,force_precise,roi,want_fastest,processing_stripe_height,env,env_queue,double_buffering);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Destroy(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    self.destroy(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result_copy = self.get_size(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Exchange_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _written, jobject _env)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_line_buf *written = (kdu_line_buf *)
      _kdu_long_to_addr((_written==NULL)?((jlong) 0):(__env->GetLongField(_written,Kdu_line_buf_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_line_buf *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.exchange_line(comp_idx,written,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_line_buf_CLS);
        __env->SetLongField(_Result,Kdu_line_buf_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.is_line_precise(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1analysis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_analysis_CLS==NULL)
      Kdu_multi_analysis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_analysis_PTR));
    kdu_multi_analysis self = *((kdu_multi_analysis *)(&self_S));
    Result = self.is_line_absolute(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_analysis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                            Kdu_multi_synthesis                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_multi_synthesis_CLS != NULL) return;
  try {
    Kdu_multi_synthesis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Create(JNIEnv *__env, jobject _self, jobject _codestream, jobject _tile, jboolean _force_precise, jboolean _skip_ycc, jboolean _want_fastest, jint _processing_stripe_height, jobject _env, jlong _env_queue, jboolean _double_buffering)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    void *tile_S = _kdu_long_to_addr((_tile==NULL)?((jlong) 0):(__env->GetLongField(_tile,Kdu_tile_PTR)));
    kdu_tile tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (_force_precise)?true:false;
    bool skip_ycc = (_skip_ycc)?true:false;
    bool want_fastest = (_want_fastest)?true:false;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    bool double_buffering = (_double_buffering)?true:false;
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.create(codestream,tile,force_precise,skip_ycc,want_fastest,processing_stripe_height,env,env_queue,double_buffering);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Destroy(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    self.destroy(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1size(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result_copy = self.get_size(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Get_1line(JNIEnv *__env, jobject _self, jint _comp_idx, jobject _env)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_line_buf *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.get_line(comp_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_line_buf_CLS);
        __env->SetLongField(_Result,Kdu_line_buf_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1precise(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.is_line_precise(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1multi_1synthesis_Is_1line_1absolute(JNIEnv *__env, jobject _self, jint _comp_idx)
{
  try {
    if (Kdu_multi_synthesis_CLS==NULL)
      Kdu_multi_synthesis_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_multi_synthesis_PTR));
    kdu_multi_synthesis self = *((kdu_multi_synthesis *)(&self_S));
    Result = self.is_line_absolute(comp_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_multi_synthesis_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                 Kdu_node                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_node_CLS != NULL) return;
  try {
    Kdu_node_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1node_Compare(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    void *src_S = _kdu_long_to_addr(__env->GetLongField(_src,Kdu_node_PTR));
    kdu_node src = *((kdu_node *)(&src_S));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.compare(src);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    src_S = *((void **)(&(src)));
      __env->SetLongField(_src,Kdu_node_PTR,(jlong) _addr_to_kdu_long(src_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1child(JNIEnv *__env, jobject _self, jint _child_idx)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    int child_idx = (int) _child_idx;
    kdu_node Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_child(child_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_node_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_node_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1num_1descendants(JNIEnv *__env, jobject _self, jintArray _num_leaf_descendants)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    jint num_leaf_descendants_ELT; __env->GetIntArrayRegion(_num_leaf_descendants,0,1,&num_leaf_descendants_ELT);
    int num_leaf_descendants = (int) num_leaf_descendants_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_num_descendants(num_leaf_descendants);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_leaf_descendants_ELT = (jint) num_leaf_descendants;
  __env->SetIntArrayRegion(_num_leaf_descendants,0,1,&num_leaf_descendants_ELT);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1subband(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    kdu_subband Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_subband();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_subband_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1node_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1node_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_kernel_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1kernel_1coefficients(JNIEnv *__env, jobject _self, jboolean _vertical)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    bool vertical = (_vertical)?true:false;
    const float *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_kernel_coefficients(vertical);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1node_Get_1bibo_1gains(JNIEnv *__env, jobject _self, jintArray _num_steps, jboolean _vertical)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    jint num_steps_ELT; __env->GetIntArrayRegion(_num_steps,0,1,&num_steps_ELT);
    int num_steps = (int) num_steps_ELT;
    bool vertical = (_vertical)?true:false;
    const float *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_node_PTR));
    kdu_node self = *((kdu_node *)(&self_S));
    Result = self.get_bibo_gains(num_steps,vertical);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_node_PTR,(jlong) _addr_to_kdu_long(self_S));
    num_steps_ELT = (jint) num_steps;
  __env->SetIntArrayRegion(_num_steps,0,1,&num_steps_ELT);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Kdu_output                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_output_CLS != NULL) return;
  try {
    Kdu_output_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_output_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_output_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_output *self = (kdu_output *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__B(JNIEnv *__env, jobject _self, jbyte _byte)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_byte byte = (kdu_byte) _byte;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    Result = self->put(byte);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__I(JNIEnv *__env, jobject _self, jint _word)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_uint16 word = (kdu_uint16) _word;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    Result = self->put(word);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__J(JNIEnv *__env, jobject _self, jlong _word)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_uint32 word = (kdu_uint32) _word;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    Result = self->put(word);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1output_Put__F(JNIEnv *__env, jobject _self, jfloat _val)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    float val = (float) _val;
    int Result;
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    Result = self->put(val);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1output_Write(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _count)
{
  try {
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int count = (int) _count;
    try { // So we can clean up temporary arrays
    kdu_output *self = (kdu_output *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_output_PTR) & ~((jlong) 1));
    self->write(buf,count);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_params_CLS != NULL) return;
  try {
    Kdu_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_params *self = (kdu_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1object(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->new_object();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Link(JNIEnv *__env, jobject _self, jobject _existing, jint _tile_idx, jint _comp_idx, jint _num_tiles, jint _num_comps)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *existing = (kdu_params *)
      _kdu_long_to_addr((_existing==NULL)?((jlong) 0):(__env->GetLongField(_existing,Kdu_params_PTR) & ~((jlong) 1)));
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int num_tiles = (int) _num_tiles;
    int num_comps = (int) _num_comps;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->link(existing,tile_idx,comp_idx,num_tiles,num_comps);
    __env->SetLongField(_self,Kdu_params_PTR,(jlong) _addr_to_kdu_long(self));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_New_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->new_instance();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1from(JNIEnv *__env, jobject _self, jobject _source, jint _source_tile, jint _target_tile, jint _instance, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *source = (kdu_params *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_params_PTR) & ~((jlong) 1)));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels,transpose,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Copy_1all(JNIEnv *__env, jobject _self, jobject _source, jint _skip_components, jint _discard_levels, jboolean _transpose, jboolean _vflip, jboolean _hflip)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *source = (kdu_params *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_params_PTR) & ~((jlong) 1)));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->copy_all(source,skip_components,discard_levels,transpose,vflip,hflip);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1params_Identify_1cluster(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char * Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->identify_cluster();
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _cluster_name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *cluster_name = NULL;
    if (_cluster_name != NULL)
      {
        cluster_name = __env->GetStringUTFChars(_cluster_name,NULL);
      }
    kdu_params *Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->access_cluster(cluster_name);
    } catch (...) {
    if (_cluster_name != NULL)
      {
        __env->ReleaseStringUTFChars(_cluster_name,cluster_name);
      }
    throw;
    }
    if (_cluster_name != NULL)
      {
        __env->ReleaseStringUTFChars(_cluster_name,cluster_name);
      }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1cluster__I(JNIEnv *__env, jobject _self, jint _sequence_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int sequence_idx = (int) _sequence_idx;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->access_cluster(sequence_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get_instance();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1comps(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get_num_comps();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Get_1num_1tiles(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get_num_tiles();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1relation(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx, jboolean _read_only)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    bool read_only = (_read_only)?true:false;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->access_relation(tile_idx,comp_idx,inst_idx,read_only);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1unique(JNIEnv *__env, jobject _self, jint _tile_idx, jint _comp_idx, jint _inst_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->access_unique(tile_idx,comp_idx,inst_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1params_Access_1next_1inst(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->access_next_inst();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_params_CLS);
        __env->SetLongField(_Result,Kdu_params_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Clear_1marks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->clear_marks();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Any_1changes(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->any_changes();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Check_1typical_1tile(JNIEnv *__env, jobject _self, jint _tile_idx, jstring _excluded_clusters)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    const char *excluded_clusters = NULL;
    if (_excluded_clusters != NULL)
      {
        excluded_clusters = __env->GetStringUTFChars(_excluded_clusters,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->check_typical_tile(tile_idx,excluded_clusters);
    } catch (...) {
    if (_excluded_clusters != NULL)
      {
        __env->ReleaseStringUTFChars(_excluded_clusters,excluded_clusters);
      }
    throw;
    }
    if (_excluded_clusters != NULL)
      {
        __env->ReleaseStringUTFChars(_excluded_clusters,excluded_clusters);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Translate_1marker_1segment(JNIEnv *__env, jobject _self, jint _code, jint _num_bytes, jbyteArray _bytes, jint _which_tile, jint _tpart_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    kdu_uint16 code = (kdu_uint16) _code;
    int num_bytes = (int) _num_bytes;
    kdu_byte *bytes = NULL;
    jbyte *bytes_ELTS = NULL;
    if (_bytes != NULL)
      {
        bytes_ELTS = __env->GetByteArrayElements(_bytes,NULL);
        bytes = (kdu_byte *) bytes_ELTS;
      }
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->translate_marker_segment(code,num_bytes,bytes,which_tile,tpart_idx);
    } catch (...) {
    if (_bytes != NULL)
      {
        __env->ReleaseByteArrayElements(_bytes,bytes_ELTS,0);
      }
    throw;
    }
    if (_bytes != NULL)
      {
        __env->ReleaseByteArrayElements(_bytes,bytes_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Generate_1marker_1segments(JNIEnv *__env, jobject _self, jobject _out, jint _which_tile, jint _tpart_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    kdu_output *out = (kdu_output *)
      _kdu_long_to_addr((_out==NULL)?((jlong) 0):(__env->GetLongField(_out,Kdu_output_PTR) & ~((jlong) 1)));
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    int Result;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->generate_marker_segments(out,which_tile,tpart_idx);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3IZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jintArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jint value_ELT; __env->GetIntArrayRegion(_value,0,1,&value_ELT);
    int value = (int) value_ELT;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jint) value;
  __env->SetIntArrayRegion(_value,0,1,&value_ELT);
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3ZZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jbooleanArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jboolean value_ELT; __env->GetBooleanArrayRegion(_value,0,1,&value_ELT);
    bool value = (value_ELT)?true:false;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jboolean) value;
  __env->SetBooleanArrayRegion(_value,0,1,&value_ELT);
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Get__Ljava_lang_String_2II_3FZZZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloatArray _value, jboolean _allow_inherit, jboolean _allow_extend, jboolean _allow_derived)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    jfloat value_ELT; __env->GetFloatArrayRegion(_value,0,1,&value_ELT);
    float value = (float) value_ELT;
    bool allow_inherit = (_allow_inherit)?true:false;
    bool allow_extend = (_allow_extend)?true:false;
    bool allow_derived = (_allow_derived)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    value_ELT = (jfloat) value;
  __env->SetFloatArrayRegion(_value,0,1,&value_ELT);
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (_value)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Compare__Ljava_lang_String_2IIF(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jfloat _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2III(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jint _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IIZ(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jboolean _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (_value)?true:false;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set__Ljava_lang_String_2IID(JNIEnv *__env, jobject _self, jstring _name, jint _record_idx, jint _field_idx, jdouble _value)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    double value = (double) _value;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Set_1derived(JNIEnv *__env, jobject _self, jstring _name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->set_derived(name);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->parse_string(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1params_Parse_1string__Ljava_lang_String_2I(JNIEnv *__env, jobject _self, jstring _string, jint _tile_idx)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    int tile_idx = (int) _tile_idx;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->parse_string(string,tile_idx);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2Z(JNIEnv *__env, jobject _self, jobject _output, jboolean _skip_derived)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool skip_derived = (_skip_derived)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->textualize_attributes(*output,skip_derived);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Textualize_1attributes__Lkdu_1jni_Kdu_1message_2IIZ(JNIEnv *__env, jobject _self, jobject _output, jint _min_tile, jint _max_tile, jboolean _skip_derived)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    int min_tile = (int) _min_tile;
    int max_tile = (int) _max_tile;
    bool skip_derived = (_skip_derived)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->textualize_attributes(*output,min_tile,max_tile,skip_derived);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attributes(JNIEnv *__env, jobject _self, jobject _output, jboolean _include_comments)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool include_comments = (_include_comments)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->describe_attributes(*output,include_comments);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Describe_1attribute(JNIEnv *__env, jobject _self, jstring _name, jobject _output, jboolean _include_comments)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    bool include_comments = (_include_comments)?true:false;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->describe_attribute(name,*output,include_comments);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Delete_1unparsed_1attribute(JNIEnv *__env, jobject _self, jstring _name)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->delete_unparsed_attribute(name);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1params_Custom_1parse_1field(JNIEnv *__env, jobject _self, jstring _string, jstring _name, jint _field_idx, jintArray _val)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int field_idx = (int) _field_idx;
    jint val_ELT; __env->GetIntArrayRegion(_val,0,1,&val_ELT);
    int val = (int) val_ELT;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    Result = self->custom_parse_field(string,name,field_idx,val);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    val_ELT = (jint) val;
  __env->SetIntArrayRegion(_val,0,1,&val_ELT);
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Custom_1textualize_1field(JNIEnv *__env, jobject _self, jobject _output, jstring _name, jint _field_idx, jint _val)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    if (Kdu_message_CLS==NULL)
      Kdu_message_LOADER(__env);
    kdu_message *output = (kdu_message *)
      _kdu_long_to_addr(__env->GetLongField(_output,Kdu_message_PTR) & ~((jlong) 1));
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    int field_idx = (int) _field_idx;
    int val = (int) _val;
    try { // So we can clean up temporary arrays
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->custom_textualize_field(*output,name,field_idx,val);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize(JNIEnv *__env, jobject _self, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->finalize(after_reading);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__Z(JNIEnv *__env, jobject _self, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->finalize_all(after_reading);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1params_Finalize_1all__IZ(JNIEnv *__env, jobject _self, jint _tile_idx, jboolean _after_reading)
{
  try {
    if (Kdu_params_CLS==NULL)
      Kdu_params_LOADER(__env);
    int tile_idx = (int) _tile_idx;
    bool after_reading = (_after_reading)?true:false;
    kdu_params *self = (kdu_params *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_params_PTR) & ~((jlong) 1));
    self->finalize_all(tile_idx,after_reading);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                               Kdu_precinct                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_precinct_CLS != NULL) return;
  try {
    Kdu_precinct_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Check_1loaded(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.check_loaded();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1unique_1id(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_unique_id();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jint _band_idx, jobject _indices)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_valid_blocks(band_idx,*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1precinct_Open_1block(JNIEnv *__env, jobject _self, jint _band_idx, jobject _block_idx, jobject _env)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_coords *block_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_block_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_block *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.open_block(band_idx,*block_idx,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_block_CLS);
        __env->SetLongField(_Result,Kdu_block_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.close_block(block,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Size_1packets(JNIEnv *__env, jobject _self, jintArray _cumulative_packets, jintArray _cumulative_bytes, jbooleanArray _is_significant)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    jint cumulative_packets_ELT; __env->GetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    int cumulative_packets = (int) cumulative_packets_ELT;
    jint cumulative_bytes_ELT; __env->GetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    int cumulative_bytes = (int) cumulative_bytes_ELT;
    jboolean is_significant_ELT; __env->GetBooleanArrayRegion(_is_significant,0,1,&is_significant_ELT);
    bool is_significant = (is_significant_ELT)?true:false;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.size_packets(cumulative_packets,cumulative_bytes,is_significant);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    cumulative_packets_ELT = (jint) cumulative_packets;
  __env->SetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    cumulative_bytes_ELT = (jint) cumulative_bytes;
  __env->SetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    is_significant_ELT = (jboolean) is_significant;
  __env->SetBooleanArrayRegion(_is_significant,0,1,&is_significant_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1precinct_Get_1packets(JNIEnv *__env, jobject _self, jint _leading_skip_packets, jint _leading_skip_bytes, jintArray _cumulative_packets, jintArray _cumulative_bytes, jobject _out)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_output_CLS==NULL)
      Kdu_output_LOADER(__env);
    int leading_skip_packets = (int) _leading_skip_packets;
    int leading_skip_bytes = (int) _leading_skip_bytes;
    jint cumulative_packets_ELT; __env->GetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    int cumulative_packets = (int) cumulative_packets_ELT;
    jint cumulative_bytes_ELT; __env->GetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    int cumulative_bytes = (int) cumulative_bytes_ELT;
    kdu_output *out = (kdu_output *)
      _kdu_long_to_addr((_out==NULL)?((jlong) 0):(__env->GetLongField(_out,Kdu_output_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    Result = self.get_packets(leading_skip_packets,leading_skip_bytes,cumulative_packets,cumulative_bytes,out);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
    cumulative_packets_ELT = (jint) cumulative_packets;
  __env->SetIntArrayRegion(_cumulative_packets,0,1,&cumulative_packets_ELT);
    cumulative_bytes_ELT = (jint) cumulative_bytes;
  __env->SetIntArrayRegion(_cumulative_bytes,0,1,&cumulative_bytes_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.restart();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1precinct_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_precinct_PTR));
    kdu_precinct self = *((kdu_precinct *)(&self_S));
    self.close();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                               Kdu_pull_ifc                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_pull_ifc_CLS != NULL) return;
  try {
    Kdu_pull_ifc_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_pull_ifc_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_pull_ifc_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_pull_ifc *self = (kdu_pull_ifc *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_pull_ifc *self =
      new kdu_pull_ifc();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    self->destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Start(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    self->start(env);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    bool Result;
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Pull__Lkdu_1jni_Kdu_1line_1buf_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _line, jobject _env)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    self->pull(*line,env);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1pull_1ifc_Pull__Lkdu_1jni_Kdu_1line_1buf_2Z(JNIEnv *__env, jobject _self, jobject _line, jboolean _allow_exchange)
{
  try {
    if (Kdu_pull_ifc_CLS==NULL)
      Kdu_pull_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    bool allow_exchange = (_allow_exchange)?true:false;
    kdu_pull_ifc *self = (kdu_pull_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_pull_ifc_PTR) & ~((jlong) 1));
    self->pull(*line,allow_exchange);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                               Kdu_push_ifc                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_push_ifc_CLS != NULL) return;
  try {
    Kdu_push_ifc_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_push_ifc_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_push_ifc_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_push_ifc *self = (kdu_push_ifc *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_push_ifc *self =
      new kdu_push_ifc();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    self->destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    bool Result;
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Push__Lkdu_1jni_Kdu_1line_1buf_2Lkdu_1jni_Kdu_1thread_1env_2(JNIEnv *__env, jobject _self, jobject _line, jobject _env)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    self->push(*line,env);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1push_1ifc_Push__Lkdu_1jni_Kdu_1line_1buf_2Z(JNIEnv *__env, jobject _self, jobject _line, jboolean _allow_exchange)
{
  try {
    if (Kdu_push_ifc_CLS==NULL)
      Kdu_push_ifc_LOADER(__env);
    if (Kdu_line_buf_CLS==NULL)
      Kdu_line_buf_LOADER(__env);
    kdu_line_buf *line = (kdu_line_buf *)
      _kdu_long_to_addr(__env->GetLongField(_line,Kdu_line_buf_PTR) & ~((jlong) 1));
    bool allow_exchange = (_allow_exchange)?true:false;
    kdu_push_ifc *self = (kdu_push_ifc *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_push_ifc_PTR) & ~((jlong) 1));
    self->push(*line,allow_exchange);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                               Kdu_range_set                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_range_set_CLS != NULL) return;
  try {
    Kdu_range_set_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_range_set_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_range_set_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_range_set *self = (kdu_range_set *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1range_1set_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_range_set *self =
      new kdu_range_set();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Copy_1from(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *src = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_range_set_PTR) & ~((jlong) 1));
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    self->copy_from(*src);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->is_empty();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *rhs = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_range_set_PTR) & ~((jlong) 1));
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->contains(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *rhs = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_range_set_PTR) & ~((jlong) 1));
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->equals(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Init(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    self->init();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__Lkdu_1jni_Kdu_1sampled_1range_2Z(JNIEnv *__env, jobject _self, jobject _range, jboolean _allow_merging)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    kdu_sampled_range *range = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_range,Kdu_sampled_range_PTR) & ~((jlong) 1));
    bool allow_merging = (_allow_merging)?true:false;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    self->add(*range,allow_merging);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__I(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int val = (int) _val;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    self->add(val);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1range_1set_Add__II(JNIEnv *__env, jobject _self, jint _from, jint _to)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int from = (int) _from;
    int to = (int) _to;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    self->add(from,to);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1num_1ranges(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->get_num_ranges();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Get_1range(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int n = (int) _n;
    kdu_sampled_range Result_copy;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result_copy = self->get_range(n);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_sampled_range_CLS);
        kdu_sampled_range *Result = new kdu_sampled_range; *Result = Result_copy;
        Result = (kdu_sampled_range *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_sampled_range_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1range_1set_Access_1range(JNIEnv *__env, jobject _self, jint _n)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int n = (int) _n;
    kdu_sampled_range *Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->access_range(n);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_sampled_range_CLS);
        __env->SetLongField(_Result,Kdu_sampled_range_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1range_1set_Test(JNIEnv *__env, jobject _self, jint _index)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int index = (int) _index;
    bool Result;
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->test(index);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1range_1set_Expand(JNIEnv *__env, jobject _self, jintArray _buf, jint _accept_min, jint _accept_max)
{
  try {
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int *buf = NULL;
    jint *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetIntArrayElements(_buf,NULL);
        buf = (int *) buf_ELTS;
      }
    int accept_min = (int) _accept_min;
    int accept_max = (int) _accept_max;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_range_set *self = (kdu_range_set *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_range_set_PTR) & ~((jlong) 1));
    Result = self->expand(buf,accept_min,accept_max);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseIntArrayElements(_buf,buf_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                           Kdu_region_compositor                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_region_compositor_CLS != NULL) return;
  try {
    Kdu_region_compositor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_region_compositor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_region_compositor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        _aux_extended__kdu_region_compositor *self = (_aux_extended__kdu_region_compositor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        _jni_delegator__kdu_region_compositor *self_delegator =(_jni_delegator__kdu_region_compositor *)(self->_delegator);
        delete self;
        if (self_delegator != NULL)
          delete self_delegator;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1thread_1env_2J(JNIEnv *__env, jclass this_class, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(env,env_queue);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1init(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    _aux_extended__kdu_region_compositor *self = (_aux_extended__kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    _jni_delegator__kdu_region_compositor *self_delegator = (_jni_delegator__kdu_region_compositor *)(self->_delegator);
    self_delegator->_init(__env,_self);
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Native_1create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jclass this_class, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *source = (mj2_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Mj2_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _aux_extended__kdu_region_compositor *self =
      new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    self->_delegator = new _jni_delegator__kdu_region_compositor(__env);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pre_1destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->pre_destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Kdu_1compressed_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *source = (kdu_compressed_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Jpx_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_source_CLS==NULL)
      Jpx_source_LOADER(__env);
    jpx_source *source = (jpx_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Jpx_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Create__Lkdu_1jni_Mj2_1source_2I(JNIEnv *__env, jobject _self, jobject _source, jint _persistent_cache_threshold)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *source = (mj2_source *)
      _kdu_long_to_addr((_source==NULL)?((jlong) 0):(__env->GetLongField(_source,Mj2_source_PTR) & ~((jlong) 1)));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->create(source,persistent_cache_threshold);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1error_1level(JNIEnv *__env, jobject _self, jint _error_level)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int error_level = (int) _error_level;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_error_level(error_level);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1surface_1initialization_1mode(JNIEnv *__env, jobject _self, jboolean _pre_initialize)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool pre_initialize = (_pre_initialize)?true:false;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_surface_initialization_mode(pre_initialize);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Add_1compositing_1layer(JNIEnv *__env, jobject _self, jint _layer_idx, jobject _full_source_dims, jobject _full_target_dims, jboolean _transpose, jboolean _vflip, jboolean _hflip, jint _frame_idx, jint _field_handling)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    kdu_dims *full_source_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_source_dims,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *full_target_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_full_target_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    int frame_idx = (int) _frame_idx;
    int field_handling = (int) _field_handling;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->add_compositing_layer(layer_idx,*full_source_dims,*full_target_dims,transpose,vflip,hflip,frame_idx,field_handling);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Change_1compositing_1layer_1frame(JNIEnv *__env, jobject _self, jint _layer_idx, jint _frame_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    int frame_idx = (int) _frame_idx;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->change_compositing_layer_frame(layer_idx,frame_idx);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Remove_1compositing_1layer(JNIEnv *__env, jobject _self, jint _layer_idx, jboolean _permanent)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    bool permanent = (_permanent)?true:false;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->remove_compositing_layer(layer_idx,permanent);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1single_1component(JNIEnv *__env, jobject _self, jint _stream_idx, jint _component_idx, jint _access_mode)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    int component_idx = (int) _component_idx;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->set_single_component(stream_idx,component_idx,access_mode);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Cull_1inactive_1layers(JNIEnv *__env, jobject _self, jint _max_inactive)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int max_inactive = (int) _max_inactive;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->cull_inactive_layers(max_inactive);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1frame(JNIEnv *__env, jobject _self, jobject _expander)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_frame_expander_CLS==NULL)
      Jpx_frame_expander_LOADER(__env);
    jpx_frame_expander *expander = (jpx_frame_expander *)
      _kdu_long_to_addr((_expander==NULL)?((jlong) 0):(__env->GetLongField(_expander,Jpx_frame_expander_PTR) & ~((jlong) 1)));
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_frame(expander);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1scale(JNIEnv *__env, jobject _self, jboolean _transpose, jboolean _vflip, jboolean _hflip, jfloat _scale)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool transpose = (_transpose)?true:false;
    bool vflip = (_vflip)?true:false;
    bool hflip = (_hflip)?true:false;
    float scale = (float) _scale;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_scale(transpose,vflip,hflip,scale);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1optimal_1scale(JNIEnv *__env, jobject _self, jobject _region, jfloat _scale_anchor, jfloat _min_scale, jfloat _max_scale, jintArray _compositing_layer_idx, jintArray _codestream_idx, jintArray _component_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    int *compositing_layer_idx = NULL;
    jint *compositing_layer_idx_ELTS = NULL;
    if (_compositing_layer_idx != NULL)
      {
        compositing_layer_idx_ELTS = __env->GetIntArrayElements(_compositing_layer_idx,NULL);
        compositing_layer_idx = (int *) compositing_layer_idx_ELTS;
      }
    int *codestream_idx = NULL;
    jint *codestream_idx_ELTS = NULL;
    if (_codestream_idx != NULL)
      {
        codestream_idx_ELTS = __env->GetIntArrayElements(_codestream_idx,NULL);
        codestream_idx = (int *) codestream_idx_ELTS;
      }
    int *component_idx = NULL;
    jint *component_idx_ELTS = NULL;
    if (_component_idx != NULL)
      {
        component_idx_ELTS = __env->GetIntArrayElements(_component_idx,NULL);
        component_idx = (int *) component_idx_ELTS;
      }
    float Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->find_optimal_scale(*region,scale_anchor,min_scale,max_scale,compositing_layer_idx,codestream_idx,component_idx);
    } catch (...) {
    if (_compositing_layer_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_compositing_layer_idx,compositing_layer_idx_ELTS,0);
      }
    if (_codestream_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_idx,codestream_idx_ELTS,0);
      }
    if (_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_component_idx,component_idx_ELTS,0);
      }
    throw;
    }
    if (_compositing_layer_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_compositing_layer_idx,compositing_layer_idx_ELTS,0);
      }
    if (_codestream_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_idx,codestream_idx_ELTS,0);
      }
    if (_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_component_idx,component_idx_ELTS,0);
      }
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1buffer_1surface(JNIEnv *__env, jobject _self, jobject _region, jint _background)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_int32 background = (kdu_int32) _background;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_buffer_surface(*region,background);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Check_1invalid_1scale_1code(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->check_invalid_scale_code();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1total_1composition_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_total_composition_dims(*dims);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1composition_1buffer(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_compositor_buf *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_composition_buffer(*region);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_compositor_buf_CLS);
        __env->SetLongField(_Result,Kdu_compositor_buf_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Push_1composition_1buffer(JNIEnv *__env, jobject _self, jlong _stamp, jint _id)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_long stamp = (kdu_long) _stamp;
    int id = (int) _id;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->push_composition_buffer(stamp,id);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Pop_1composition_1buffer(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->pop_composition_buffer();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inspect_1composition_1queue(JNIEnv *__env, jobject _self, jint _elt, jlongArray _stamp, jintArray _id)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int elt = (int) _elt;
    kdu_long *stamp = NULL;
    jlong *stamp_ELTS = NULL;
    jsize stamp_L = 0;
    if (_stamp != NULL)
      {
        stamp_ELTS = __env->GetLongArrayElements(_stamp,NULL);
        stamp_L = __env->GetArrayLength(_stamp);
        stamp = new kdu_long[stamp_L];
        { for (int i=0; i<stamp_L; i++) stamp[i] = (kdu_long)(stamp_ELTS[i]); }
      }
    int *id = NULL;
    jint *id_ELTS = NULL;
    if (_id != NULL)
      {
        id_ELTS = __env->GetIntArrayElements(_id,NULL);
        id = (int *) id_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->inspect_composition_queue(elt,stamp,id);
    } catch (...) {
    if (_stamp != NULL)
      {
        delete[] stamp;
        __env->ReleaseLongArrayElements(_stamp,stamp_ELTS,0);
      }
    if (_id != NULL)
      {
        __env->ReleaseIntArrayElements(_id,id_ELTS,0);
      }
    throw;
    }
    if (_stamp != NULL)
      {
        for (int i=0; i<stamp_L; i++) stamp_ELTS[i] = (jlong)(stamp[i]);
      }
    if (_stamp != NULL)
      {
        delete[] stamp;
        __env->ReleaseLongArrayElements(_stamp,stamp_ELTS,0);
      }
    if (_id != NULL)
      {
        __env->ReleaseIntArrayElements(_id,id_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Flush_1composition_1queue(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->flush_composition_queue();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1max_1quality_1layers(JNIEnv *__env, jobject _self, jint _quality_layers)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int quality_layers = (int) _quality_layers;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->set_max_quality_layers(quality_layers);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1max_1available_1quality_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    int Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_max_available_quality_layers();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Set_1thread_1env(JNIEnv *__env, jobject _self, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_thread_env *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->set_thread_env(env,env_queue);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_thread_env_CLS);
        __env->SetLongField(_Result,Kdu_thread_env_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Process(JNIEnv *__env, jobject _self, jint _suggested_increment, jobject _new_region)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int suggested_increment = (int) _suggested_increment;
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->process(suggested_increment,*new_region);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Is_1processing_1complete(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->is_processing_complete();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Refresh(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->refresh();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Halt_1processing(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->halt_processing();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1point(JNIEnv *__env, jobject _self, jobject _point, jintArray _layer_idx, jintArray _codestream_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    jint layer_idx_ELT; __env->GetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    int layer_idx = (int) layer_idx_ELT;
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->find_point(*point,layer_idx,codestream_idx);
    layer_idx_ELT = (jint) layer_idx;
  __env->SetIntArrayRegion(_layer_idx,0,1,&layer_idx_ELT);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Map_1region(JNIEnv *__env, jobject _self, jintArray _codestream_idx, jobject _region)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->map_region(codestream_idx,*region);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Inverse_1map_1region(JNIEnv *__env, jobject _self, jobject _region, jint _codestream_idx, jint _layer_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    int codestream_idx = (int) _codestream_idx;
    int layer_idx = (int) _layer_idx;
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result_copy = self->inverse_map_region(*region,codestream_idx,layer_idx);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1layer_1region(JNIEnv *__env, jobject _self, jint _layer_idx, jint _instance, jboolean _apply_cropping)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int layer_idx = (int) _layer_idx;
    int instance = (int) _instance;
    bool apply_cropping = (_apply_cropping)?true:false;
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result_copy = self->find_layer_region(layer_idx,instance,apply_cropping);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Find_1codestream_1region(JNIEnv *__env, jobject _self, jint _codestream_idx, jint _instance, jboolean _apply_cropping)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int codestream_idx = (int) _codestream_idx;
    int instance = (int) _instance;
    bool apply_cropping = (_apply_cropping)?true:false;
    kdu_dims Result_copy;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result_copy = self->find_codestream_region(codestream_idx,instance,apply_cropping);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1codestream(JNIEnv *__env, jobject _self, jlong _last_stream_ref, jboolean _only_active_codestreams, jboolean _no_duplicates)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdrc_stream *last_stream_ref = (kdrc_stream *) _kdu_long_to_addr(_last_stream_ref);
    bool only_active_codestreams = (_only_active_codestreams)?true:false;
    bool no_duplicates = (_no_duplicates)?true:false;
    kdrc_stream *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_next_codestream(last_stream_ref,only_active_codestreams,no_duplicates);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1next_1visible_1codestream(JNIEnv *__env, jobject _self, jlong _last_stream_ref, jobject _region, jboolean _include_alpha)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdrc_stream *last_stream_ref = (kdrc_stream *) _kdu_long_to_addr(_last_stream_ref);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool include_alpha = (_include_alpha)?true:false;
    kdrc_stream *Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_next_visible_codestream(last_stream_ref,*region,include_alpha);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Access_1codestream(JNIEnv *__env, jobject _self, jlong _stream_ref)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    kdrc_stream *stream_ref = (kdrc_stream *) _kdu_long_to_addr(_stream_ref);
    kdu_codestream Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->access_codestream(stream_ref);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_codestream_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1codestream_1info(JNIEnv *__env, jobject _self, jlong _stream_ref, jintArray _codestream_idx, jintArray _compositing_layer_idx, jintArray _components_in_use, jintArray _principle_component_idx, jfloatArray _principle_component_scale_x, jfloatArray _principle_component_scale_y)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    kdrc_stream *stream_ref = (kdrc_stream *) _kdu_long_to_addr(_stream_ref);
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    jint compositing_layer_idx_ELT; __env->GetIntArrayRegion(_compositing_layer_idx,0,1,&compositing_layer_idx_ELT);
    int compositing_layer_idx = (int) compositing_layer_idx_ELT;
    int *components_in_use = NULL;
    jint *components_in_use_ELTS = NULL;
    if (_components_in_use != NULL)
      {
        components_in_use_ELTS = __env->GetIntArrayElements(_components_in_use,NULL);
        components_in_use = (int *) components_in_use_ELTS;
      }
    int *principle_component_idx = NULL;
    jint *principle_component_idx_ELTS = NULL;
    if (_principle_component_idx != NULL)
      {
        principle_component_idx_ELTS = __env->GetIntArrayElements(_principle_component_idx,NULL);
        principle_component_idx = (int *) principle_component_idx_ELTS;
      }
    float *principle_component_scale_x = NULL;
    jfloat *principle_component_scale_x_ELTS = NULL;
    if (_principle_component_scale_x != NULL)
      {
        principle_component_scale_x_ELTS = __env->GetFloatArrayElements(_principle_component_scale_x,NULL);
        principle_component_scale_x = (float *) principle_component_scale_x_ELTS;
      }
    float *principle_component_scale_y = NULL;
    jfloat *principle_component_scale_y_ELTS = NULL;
    if (_principle_component_scale_y != NULL)
      {
        principle_component_scale_y_ELTS = __env->GetFloatArrayElements(_principle_component_scale_y,NULL);
        principle_component_scale_y = (float *) principle_component_scale_y_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx,components_in_use,principle_component_idx,principle_component_scale_x,principle_component_scale_y);
    } catch (...) {
    if (_components_in_use != NULL)
      {
        __env->ReleaseIntArrayElements(_components_in_use,components_in_use_ELTS,0);
      }
    if (_principle_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_principle_component_idx,principle_component_idx_ELTS,0);
      }
    if (_principle_component_scale_x != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_x,principle_component_scale_x_ELTS,0);
      }
    if (_principle_component_scale_y != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_y,principle_component_scale_y_ELTS,0);
      }
    throw;
    }
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    compositing_layer_idx_ELT = (jint) compositing_layer_idx;
  __env->SetIntArrayRegion(_compositing_layer_idx,0,1,&compositing_layer_idx_ELT);
    if (_components_in_use != NULL)
      {
        __env->ReleaseIntArrayElements(_components_in_use,components_in_use_ELTS,0);
      }
    if (_principle_component_idx != NULL)
      {
        __env->ReleaseIntArrayElements(_principle_component_idx,principle_component_idx_ELTS,0);
      }
    if (_principle_component_scale_x != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_x,principle_component_scale_x_ELTS,0);
      }
    if (_principle_component_scale_y != NULL)
      {
        __env->ReleaseFloatArrayElements(_principle_component_scale_y,principle_component_scale_y_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Get_1codestream_1packets(JNIEnv *__env, jobject _self, jlong _stream_ref, jobject _region, jlongArray _visible_precinct_samples, jlongArray _visible_packet_samples, jlongArray _max_visible_packet_samples)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdrc_stream *stream_ref = (kdrc_stream *) _kdu_long_to_addr(_stream_ref);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    jlong visible_precinct_samples_ELT; __env->GetLongArrayRegion(_visible_precinct_samples,0,1,&visible_precinct_samples_ELT);
    kdu_long visible_precinct_samples = (kdu_long) visible_precinct_samples_ELT;
    jlong visible_packet_samples_ELT; __env->GetLongArrayRegion(_visible_packet_samples,0,1,&visible_packet_samples_ELT);
    kdu_long visible_packet_samples = (kdu_long) visible_packet_samples_ELT;
    jlong max_visible_packet_samples_ELT; __env->GetLongArrayRegion(_max_visible_packet_samples,0,1,&max_visible_packet_samples_ELT);
    kdu_long max_visible_packet_samples = (kdu_long) max_visible_packet_samples_ELT;
    bool Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->get_codestream_packets(stream_ref,*region,visible_precinct_samples,visible_packet_samples,max_visible_packet_samples);
    visible_precinct_samples_ELT = (jlong) visible_precinct_samples;
  __env->SetLongArrayRegion(_visible_precinct_samples,0,1,&visible_precinct_samples_ELT);
    visible_packet_samples_ELT = (jlong) visible_packet_samples;
  __env->SetLongArrayRegion(_visible_packet_samples,0,1,&visible_packet_samples_ELT);
    max_visible_packet_samples_ELT = (jlong) max_visible_packet_samples;
  __env->SetLongArrayRegion(_max_visible_packet_samples,0,1,&max_visible_packet_samples_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Configure_1overlays(JNIEnv *__env, jobject _self, jboolean _enable, jint _min_display_size, jint _painting_param)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool enable = (_enable)?true:false;
    int min_display_size = (int) _min_display_size;
    int painting_param = (int) _painting_param;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->configure_overlays(enable,min_display_size,painting_param);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Update_1overlays(JNIEnv *__env, jobject _self, jboolean _start_from_scratch)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    bool start_from_scratch = (_start_from_scratch)?true:false;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    self->update_overlays(start_from_scratch);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1compositor_Search_1overlays(JNIEnv *__env, jobject _self, jobject _point, jintArray _codestream_idx)
{
  try {
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *point = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_point,Kdu_coords_PTR) & ~((jlong) 1));
    jint codestream_idx_ELT; __env->GetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    int codestream_idx = (int) codestream_idx_ELT;
    jpx_metanode Result;
    kdu_region_compositor *self = (kdu_region_compositor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_compositor_PTR) & ~((jlong) 1));
    Result = self->search_overlays(*point,codestream_idx);
    codestream_idx_ELT = (jint) codestream_idx;
  __env->SetIntArrayRegion(_codestream_idx,0,1,&codestream_idx_ELT);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jpx_metanode_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

bool _jni_delegator__kdu_region_compositor::custom_paint_overlay(kdu_compositor_buf *buffer, kdu_dims buffer_region, kdu_dims bounding_region, int codestream_idx, jpx_metanode node, int painting_param, kdu_coords image_offset, kdu_coords subsampling, bool transpose, bool vflip, bool hflip, kdu_coords expansion_numerator, kdu_coords expansion_denominator, kdu_coords compositing_offset)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Jpx_metanode_CLS==NULL)
      Jpx_metanode_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jobject _buffer = NULL;
    if (buffer != NULL)
      {
        _buffer = __env->AllocObject(Kdu_compositor_buf_CLS);
        __env->SetLongField(_buffer,Kdu_compositor_buf_PTR,(jlong) _addr_to_kdu_long(buffer));
      }
    jobject _buffer_region = __env->AllocObject(Kdu_dims_CLS);
    kdu_dims *_buffer_region_BUF = new kdu_dims; *_buffer_region_BUF = buffer_region;
    _buffer_region_BUF = (kdu_dims *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_buffer_region_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_buffer_region,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(_buffer_region_BUF));
    jobject _bounding_region = __env->AllocObject(Kdu_dims_CLS);
    kdu_dims *_bounding_region_BUF = new kdu_dims; *_bounding_region_BUF = bounding_region;
    _bounding_region_BUF = (kdu_dims *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_bounding_region_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_bounding_region,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(_bounding_region_BUF));
    jint _codestream_idx = (jint) codestream_idx;
    jobject _node = __env->AllocObject(Jpx_metanode_CLS);
    void *node_S = *((void **)(&(node)));
      __env->SetLongField(_node,Jpx_metanode_PTR,(jlong) _addr_to_kdu_long(node_S));
    jint _painting_param = (jint) painting_param;
    jobject _image_offset = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_image_offset_BUF = new kdu_coords; *_image_offset_BUF = image_offset;
    _image_offset_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_image_offset_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_image_offset,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_image_offset_BUF));
    jobject _subsampling = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_subsampling_BUF = new kdu_coords; *_subsampling_BUF = subsampling;
    _subsampling_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_subsampling_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_subsampling,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_subsampling_BUF));
    jboolean _transpose = (transpose)?true:false;
    jboolean _vflip = (vflip)?true:false;
    jboolean _hflip = (hflip)?true:false;
    jobject _expansion_numerator = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_expansion_numerator_BUF = new kdu_coords; *_expansion_numerator_BUF = expansion_numerator;
    _expansion_numerator_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_expansion_numerator_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_expansion_numerator,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_expansion_numerator_BUF));
    jobject _expansion_denominator = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_expansion_denominator_BUF = new kdu_coords; *_expansion_denominator_BUF = expansion_denominator;
    _expansion_denominator_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_expansion_denominator_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_expansion_denominator,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_expansion_denominator_BUF));
    jobject _compositing_offset = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_compositing_offset_BUF = new kdu_coords; *_compositing_offset_BUF = compositing_offset;
    _compositing_offset_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_compositing_offset_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_compositing_offset,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_compositing_offset_BUF));
    jmethodID __Custom_paint_overlay_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Custom_paint_overlay","(Lkdu_jni/Kdu_compositor_buf;Lkdu_jni/Kdu_dims;Lkdu_jni/Kdu_dims;ILkdu_jni/Jpx_metanode;ILkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;ZZZLkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;)Z");
    jboolean _Result;
    _Result = __env->CallBooleanMethod(_self,__Custom_paint_overlay_ID,_buffer,_buffer_region,_bounding_region,_codestream_idx,_node,_painting_param,_image_offset,_subsampling,_transpose,_vflip,_hflip,_expansion_numerator,_expansion_denominator,_compositing_offset);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return (_Result)?true:false;
  } catch(...) { }
  throw (int) 0;
  return (bool) 0;
}

kdu_compositor_buf *_jni_delegator__kdu_region_compositor::allocate_buffer(kdu_coords min_size, kdu_coords &actual_size, bool read_access_required)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    jobject _min_size = __env->AllocObject(Kdu_coords_CLS);
    kdu_coords *_min_size_BUF = new kdu_coords; *_min_size_BUF = min_size;
    _min_size_BUF = (kdu_coords *)
      _kdu_long_to_addr(((jlong) _addr_to_kdu_long(_min_size_BUF)) + 1); // Enable auto-destroy.
    __env->SetLongField(_min_size,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(_min_size_BUF));
    jobject _actual_size = NULL;
      {
        _actual_size = __env->AllocObject(Kdu_coords_CLS);
        __env->SetLongField(_actual_size,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(&actual_size));
      }
    jboolean _read_access_required = (read_access_required)?true:false;
    jmethodID __Allocate_buffer_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Allocate_buffer","(Lkdu_jni/Kdu_coords;Lkdu_jni/Kdu_coords;Z)Lkdu_jni/Kdu_compositor_buf;");
    jobject _Result;
    _Result = __env->CallObjectMethod(_self,__Allocate_buffer_ID,_min_size,_actual_size,_read_access_required);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    kdu_compositor_buf *Result = (kdu_compositor_buf *)
      _kdu_long_to_addr((_Result==NULL)?((jlong) 0):(__env->GetLongField(_Result,Kdu_compositor_buf_PTR) & ~((jlong) 1)));
    return Result;
  } catch(...) { }
  throw (int) 0;
  return NULL;
}

void _jni_delegator__kdu_region_compositor::delete_buffer(kdu_compositor_buf *buf)
{
  try {
    JNIEnv *__env = _jniEnv();
    if (Kdu_region_compositor_CLS==NULL)
      Kdu_region_compositor_LOADER(__env);
    if (Kdu_compositor_buf_CLS==NULL)
      Kdu_compositor_buf_LOADER(__env);
    jobject _buf = NULL;
    if (buf != NULL)
      {
        _buf = __env->AllocObject(Kdu_compositor_buf_CLS);
        __env->SetLongField(_buf,Kdu_compositor_buf_PTR,(jlong) _addr_to_kdu_long(buf));
      }
    jmethodID __Delete_buffer_ID = __env->GetMethodID(__env->GetObjectClass(_self),"Delete_buffer","(Lkdu_jni/Kdu_compositor_buf;)V");
    __env->CallVoidMethod(_self,__Delete_buffer_ID,_buf);
    if (__env->ExceptionOccurred() != NULL) throw (int) 0;
    return;
  } catch(...) { }
  throw (int) 0;
}

/*****************************************************************************/
/*                          Kdu_region_decompressor                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_region_decompressor_CLS != NULL) return;
  try {
    Kdu_region_decompressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_region_decompressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_region_decompressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_region_decompressor *self = (kdu_region_decompressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_region_decompressor *self =
      new kdu_region_decompressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__Lkdu_1jni_Kdu_1codestream_2Lkdu_1jni_Kdu_1channel_1mapping_2IILkdu_1jni_Kdu_1coords_2Lkdu_1jni_Kdu_1coords_2I(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jobject _expand_numerator, jobject _expand_denominator, jint _access_mode)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = (kdu_channel_mapping *)
      _kdu_long_to_addr((_mapping==NULL)?((jlong) 0):(__env->GetLongField(_mapping,Kdu_channel_mapping_PTR) & ~((jlong) 1)));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    kdu_coords *expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_dims Result_copy;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result_copy = self->get_rendered_image_dims(codestream,mapping,single_component,discard_levels,*expand_numerator,*expand_denominator,access_mode);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Get_1rendered_1image_1dims__(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result_copy = self->get_rendered_image_dims();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Set_1white_1stretch(JNIEnv *__env, jobject _self, jint _white_stretch_precision)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    int white_stretch_precision = (int) _white_stretch_precision;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    self->set_white_stretch(white_stretch_precision);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jobject _mapping, jint _single_component, jint _discard_levels, jint _max_layers, jobject _region, jobject _expand_numerator, jobject _expand_denominator, jboolean _precise, jint _access_mode, jboolean _fastest, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_channel_mapping_CLS==NULL)
      Kdu_channel_mapping_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = (kdu_channel_mapping *)
      _kdu_long_to_addr((_mapping==NULL)?((jlong) 0):(__env->GetLongField(_mapping,Kdu_channel_mapping_PTR) & ~((jlong) 1)));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_coords *expand_numerator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_numerator,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *expand_denominator = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_expand_denominator,Kdu_coords_PTR) & ~((jlong) 1));
    bool precise = (_precise)?true:false;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool fastest = (_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    bool Result;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result = self->start(codestream,mapping,single_component,discard_levels,max_layers,*region,*expand_numerator,*expand_denominator,precise,access_mode,fastest,env,env_queue);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3ILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2(JNIEnv *__env, jobject _self, jintArray _buffer, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result = self->process(buffer,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3B_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZ(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *channel_offsets = NULL;
    jint *channel_offsets_ELTS = NULL;
    if (_channel_offsets != NULL)
      {
        channel_offsets_ELTS = __env->GetIntArrayElements(_channel_offsets,NULL);
        channel_offsets = (int *) channel_offsets_ELTS;
      }
    int pixel_gap = (int) _pixel_gap;
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (_measure_row_gap_in_pixels)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result = self->process(buffer,channel_offsets,pixel_gap,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region,precision_bits,measure_row_gap_in_pixels);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Process___3I_3IILkdu_1jni_Kdu_1coords_2IIILkdu_1jni_Kdu_1dims_2Lkdu_1jni_Kdu_1dims_2IZ(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _channel_offsets, jint _pixel_gap, jobject _buffer_origin, jint _row_gap, jint _suggested_increment, jint _max_region_pixels, jobject _incomplete_region, jobject _new_region, jint _precision_bits, jboolean _measure_row_gap_in_pixels)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_uint16 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    jsize buffer_L = 0;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer_L = __env->GetArrayLength(_buffer);
        buffer = new kdu_uint16[buffer_L];
        { for (int i=0; i<buffer_L; i++) buffer[i] = (kdu_uint16)(buffer_ELTS[i]); }
      }
    int *channel_offsets = NULL;
    jint *channel_offsets_ELTS = NULL;
    if (_channel_offsets != NULL)
      {
        channel_offsets_ELTS = __env->GetIntArrayElements(_channel_offsets,NULL);
        channel_offsets = (int *) channel_offsets_ELTS;
      }
    int pixel_gap = (int) _pixel_gap;
    kdu_coords *buffer_origin = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_buffer_origin,Kdu_coords_PTR) & ~((jlong) 1));
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims *incomplete_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_incomplete_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_dims *new_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_new_region,Kdu_dims_PTR) & ~((jlong) 1));
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (_measure_row_gap_in_pixels)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result = self->process(buffer,channel_offsets,pixel_gap,*buffer_origin,row_gap,suggested_increment,max_region_pixels,*incomplete_region,*new_region,precision_bits,measure_row_gap_in_pixels);
    } catch (...) {
    if (_buffer != NULL)
      {
        delete[] buffer;
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        for (int i=0; i<buffer_L; i++) buffer_ELTS[i] = (jint)(buffer[i]);
      }
    if (_buffer != NULL)
      {
        delete[] buffer;
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_channel_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_channel_offsets,channel_offsets_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1region_1decompressor_Finish(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_region_decompressor_CLS==NULL)
      Kdu_region_decompressor_LOADER(__env);
    bool Result;
    kdu_region_decompressor *self = (kdu_region_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_region_decompressor_PTR) & ~((jlong) 1));
    Result = self->finish();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                              Kdu_resolution                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_resolution_CLS != NULL) return;
  try {
    Kdu_resolution_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1next(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_next();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Which(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.which();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dwt_1level(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_dwt_level();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1comp_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_comp_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1precincts(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    self.get_valid_precincts(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Open_1precinct(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_precinct_CLS==NULL)
      Kdu_precinct_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_precinct Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.open_precinct(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_precinct_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_precinct_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1id(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_id(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jdouble JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1relevance(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    double Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_relevance(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jdouble) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jdouble) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1packets(JNIEnv *__env, jobject _self, jobject _precinct_idx, jobject _env, jboolean _parse_if_necessary)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool parse_if_necessary = (_parse_if_necessary)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_packets(*precinct_idx,env,parse_if_necessary);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1precinct_1samples(JNIEnv *__env, jobject _self, jobject _precinct_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *precinct_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_precinct_idx,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_long Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_precinct_samples(*precinct_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1node(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    kdu_node Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_node();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_node_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_node_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1valid_1band_1indices(JNIEnv *__env, jobject _self, jintArray _min_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    jint min_idx_ELT; __env->GetIntArrayRegion(_min_idx,0,1,&min_idx_ELT);
    int min_idx = (int) min_idx_ELT;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_valid_band_indices(min_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    min_idx_ELT = (jint) min_idx;
  __env->SetIntArrayRegion(_min_idx,0,1,&min_idx_ELT);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1resolution_Access_1subband(JNIEnv *__env, jobject _self, jint _band_idx)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int band_idx = (int) _band_idx;
    kdu_subband Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.access_subband(band_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_subband_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1resolution_Propagate_1roi(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_resolution_PTR));
    kdu_resolution self = *((kdu_resolution *)(&self_S));
    Result = self.propagate_roi();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                               Kdu_roi_image                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_roi_image_CLS != NULL) return;
  try {
    Kdu_roi_image_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1image_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_roi_image_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_roi_image_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_roi_image *self = (kdu_roi_image *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1roi_1image_Acquire_1node(JNIEnv *__env, jobject _self, jint _component, jobject _tile_region)
{
  try {
    if (Kdu_roi_image_CLS==NULL)
      Kdu_roi_image_LOADER(__env);
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int component = (int) _component;
    kdu_dims *tile_region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_tile_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_roi_node *Result;
    kdu_roi_image *self = (kdu_roi_image *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_image_PTR) & ~((jlong) 1));
    Result = self->acquire_node(component,*tile_region);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_roi_node_CLS);
        __env->SetLongField(_Result,Kdu_roi_node_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                               Kdu_roi_node                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_roi_node_CLS != NULL) return;
  try {
    Kdu_roi_node_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_roi_node_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_roi_node_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_roi_node *self = (kdu_roi_node *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Release(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    kdu_roi_node *self = (kdu_roi_node *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_node_PTR) & ~((jlong) 1));
    self->release();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1roi_1node_Pull(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _width)
{
  try {
    if (Kdu_roi_node_CLS==NULL)
      Kdu_roi_node_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int width = (int) _width;
    try { // So we can clean up temporary arrays
    kdu_roi_node *self = (kdu_roi_node *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_roi_node_PTR) & ~((jlong) 1));
    self->pull(buf,width);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                           Kdu_sample_allocator                            */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_sample_allocator_CLS != NULL) return;
  try {
    Kdu_sample_allocator_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_sample_allocator_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_sample_allocator_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_sample_allocator *self = (kdu_sample_allocator *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_sample_allocator *self =
      new kdu_sample_allocator();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Restart(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    self->restart();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Pre_1alloc(JNIEnv *__env, jobject _self, jboolean _use_shorts, jint _before, jint _after, jint _num_requests)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    bool use_shorts = (_use_shorts)?true:false;
    int before = (int) _before;
    int after = (int) _after;
    int num_requests = (int) _num_requests;
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    self->pre_alloc(use_shorts,before,after,num_requests);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Finalize(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    self->finalize();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sample_1allocator_Get_1size(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    int Result;
    kdu_sample_allocator *self = (kdu_sample_allocator *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sample_allocator_PTR) & ~((jlong) 1));
    Result = self->get_size();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                             Kdu_sampled_range                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_sampled_range_CLS != NULL) return;
  try {
    Kdu_sampled_range_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_sampled_range_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_sampled_range_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_sampled_range *self = (kdu_sampled_range *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_sampled_range *self =
      new kdu_sampled_range();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__I(JNIEnv *__env, jclass this_class, jint _val)
{
  try {
    int val = (int) _val;
    kdu_sampled_range *self =
      new kdu_sampled_range(val);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__II(JNIEnv *__env, jclass this_class, jint _from, jint _to)
{
  try {
    int from = (int) _from;
    int to = (int) _to;
    kdu_sampled_range *self =
      new kdu_sampled_range(from,to);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Native_1create__III(JNIEnv *__env, jclass this_class, jint _from, jint _to, jint _step)
{
  try {
    int from = (int) _from;
    int to = (int) _to;
    int step = (int) _step;
    kdu_sampled_range *self =
      new kdu_sampled_range(from,to,step);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Is_1empty(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    bool Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->is_empty();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1from(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_from();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1to(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_to();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1step(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_step();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1remapping_1id(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int which = (int) _which;
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_remapping_id(which);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1context_1type(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_context_type();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Get_1context_1expansion(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    Result = self->get_context_expansion();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_range_set_CLS);
        __env->SetLongField(_Result,Kdu_range_set_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1from(JNIEnv *__env, jobject _self, jint _from)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int from = (int) _from;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    self->set_from(from);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1to(JNIEnv *__env, jobject _self, jint _to)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int to = (int) _to;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    self->set_to(to);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1step(JNIEnv *__env, jobject _self, jint _step)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int step = (int) _step;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    self->set_step(step);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1remapping_1id(JNIEnv *__env, jobject _self, jint _which, jint _id_val)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int which = (int) _which;
    int id_val = (int) _id_val;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    self->set_remapping_id(which,id_val);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1sampled_1range_Set_1context_1type(JNIEnv *__env, jobject _self, jint _ctp)
{
  try {
    if (Kdu_sampled_range_CLS==NULL)
      Kdu_sampled_range_LOADER(__env);
    int ctp = (int) _ctp;
    kdu_sampled_range *self = (kdu_sampled_range *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_sampled_range_PTR) & ~((jlong) 1));
    self->set_context_type(ctp);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                 Kdu_serve                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_serve_CLS != NULL) return;
  try {
    Kdu_serve_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_serve_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_serve_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_serve *self = (kdu_serve *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_serve *self =
      new kdu_serve();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Initialize(JNIEnv *__env, jobject _self, jobject _target, jint _max_chunk_size, jint _chunk_prefix_bytes, jboolean _ignore_relevance_info)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    kdu_serve_target *target = (kdu_serve_target *)
      _kdu_long_to_addr((_target==NULL)?((jlong) 0):(__env->GetLongField(_target,Kdu_serve_target_PTR) & ~((jlong) 1)));
    int max_chunk_size = (int) _max_chunk_size;
    int chunk_prefix_bytes = (int) _chunk_prefix_bytes;
    bool ignore_relevance_info = (_ignore_relevance_info)?true:false;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->initialize(target,max_chunk_size,chunk_prefix_bytes,ignore_relevance_info);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Set_1window(JNIEnv *__env, jobject _self, jobject _window)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1));
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->set_window(*window);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1window(JNIEnv *__env, jobject _self, jobject _window)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *window = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_window,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    Result = self->get_window(*window);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Augment_1cache_1model__IIIJII(JNIEnv *__env, jobject _self, jint _databin_class, jint _stream_min, jint _stream_max, jlong _bin_id, jint _available_bytes, jint _available_packets)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->augment_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes,available_packets);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Truncate_1cache_1model__IIIJII(JNIEnv *__env, jobject _self, jint _databin_class, jint _stream_min, jint _stream_max, jlong _bin_id, jint _available_bytes, jint _available_packets)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->truncate_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes,available_packets);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Augment_1cache_1model__IIIIIIIIIIII(JNIEnv *__env, jobject _self, jint _stream_min, jint _stream_max, jint _tmin, jint _tmax, jint _cmin, jint _cmax, jint _rmin, jint _rmax, jint _pmin, jint _pmax, jint _available_bytes, jint _available_packets)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    int tmin = (int) _tmin;
    int tmax = (int) _tmax;
    int cmin = (int) _cmin;
    int cmax = (int) _cmax;
    int rmin = (int) _rmin;
    int rmax = (int) _rmax;
    int pmin = (int) _pmin;
    int pmax = (int) _pmax;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->augment_cache_model(stream_min,stream_max,tmin,tmax,cmin,cmax,rmin,rmax,pmin,pmax,available_bytes,available_packets);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_Truncate_1cache_1model__IIIIIIIIIIII(JNIEnv *__env, jobject _self, jint _stream_min, jint _stream_max, jint _tmin, jint _tmax, jint _cmin, jint _cmax, jint _rmin, jint _rmax, jint _pmin, jint _pmax, jint _available_bytes, jint _available_packets)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    int tmin = (int) _tmin;
    int tmax = (int) _tmax;
    int cmin = (int) _cmin;
    int cmax = (int) _cmax;
    int rmin = (int) _rmin;
    int rmax = (int) _rmax;
    int pmin = (int) _pmin;
    int pmax = (int) _pmax;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    self->truncate_cache_model(stream_min,stream_max,tmin,tmax,cmin,cmax,rmin,rmax,pmin,pmax,available_bytes,available_packets);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_Get_1image_1done(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    bool Result;
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    Result = self->get_image_done();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_Push_1extra_1data(JNIEnv *__env, jobject _self, jbyteArray _data, jint _num_bytes)
{
  try {
    if (Kdu_serve_CLS==NULL)
      Kdu_serve_LOADER(__env);
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve *self = (kdu_serve *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_PTR) & ~((jlong) 1));
    Result = self->push_extra_data(data,num_bytes);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                             Kdu_serve_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_serve_target_CLS != NULL) return;
  try {
    Kdu_serve_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_serve_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_serve_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_serve_target *self = (kdu_serve_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1codestream_1ranges(JNIEnv *__env, jobject _self, jintArray _num_ranges, jint _compositing_layer_idx)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    jint num_ranges_ELT; __env->GetIntArrayRegion(_num_ranges,0,1,&num_ranges_ELT);
    int num_ranges = (int) num_ranges_ELT;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    int *Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->get_codestream_ranges(num_ranges,compositing_layer_idx);
    num_ranges_ELT = (jint) num_ranges;
  __env->SetIntArrayRegion(_num_ranges,0,1,&num_ranges_ELT);
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1serve_1target_Attach_1to_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    kdu_codestream Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->attach_to_codestream(codestream_id,thread_handle);
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_codestream_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_codestream_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Detach_1from_1codestream(JNIEnv *__env, jobject _self, jint _codestream_id, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    self->detach_from_codestream(codestream_id,thread_handle);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Lock_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    self->lock_codestreams(num_codestreams,codestream_indices,thread_handle);
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1serve_1target_Release_1codestreams(JNIEnv *__env, jobject _self, jint _num_codestreams, jintArray _codestream_indices, jlong _thread_handle)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int num_codestreams = (int) _num_codestreams;
    int *codestream_indices = NULL;
    jint *codestream_indices_ELTS = NULL;
    if (_codestream_indices != NULL)
      {
        codestream_indices_ELTS = __env->GetIntArrayElements(_codestream_indices,NULL);
        codestream_indices = (int *) codestream_indices_ELTS;
      }
    kd_serve *thread_handle = (kd_serve *) _kdu_long_to_addr(_thread_handle);
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    self->release_codestreams(num_codestreams,codestream_indices,thread_handle);
    } catch (...) {
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
    throw;
    }
    if (_codestream_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_codestream_indices,codestream_indices_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1num_1context_1members(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->get_num_context_members(context_type,context_idx,remapping_ids);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1context_1codestream(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1context_1components(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx, jintArray _num_components)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    jint num_components_ELT; __env->GetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    int num_components = (int) num_components_ELT;
    const int *Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    num_components_ELT = (jint) num_components;
  __env->SetIntArrayRegion(_num_components,0,1,&num_components_ELT);
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1serve_1target_Perform_1context_1remapping(JNIEnv *__env, jobject _self, jint _context_type, jint _context_idx, jintArray _remapping_ids, jint _member_idx, jobject _resolution, jobject _region)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    int *remapping_ids = NULL;
    jint *remapping_ids_ELTS = NULL;
    if (_remapping_ids != NULL)
      {
        remapping_ids_ELTS = __env->GetIntArrayElements(_remapping_ids,NULL);
        remapping_ids = (int *) remapping_ids_ELTS;
      }
    int member_idx = (int) _member_idx;
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,*resolution,*region);
    } catch (...) {
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    throw;
    }
    if (_remapping_ids != NULL)
      {
        __env->ReleaseIntArrayElements(_remapping_ids,remapping_ids_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1serve_1target_Find_1roi(JNIEnv *__env, jobject _self, jint _stream_id, jstring _roi_name)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    int stream_id = (int) _stream_id;
    const char *roi_name = NULL;
    if (_roi_name != NULL)
      {
        roi_name = __env->GetStringUTFChars(_roi_name,NULL);
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->find_roi(stream_id,roi_name);
    } catch (...) {
    if (_roi_name != NULL)
      {
        __env->ReleaseStringUTFChars(_roi_name,roi_name);
      }
    throw;
    }
    if (_roi_name != NULL)
      {
        __env->ReleaseStringUTFChars(_roi_name,roi_name);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1serve_1target_Get_1roi_1details(JNIEnv *__env, jobject _self, jint _index, jobject _resolution, jobject _region)
{
  try {
    if (Kdu_serve_target_CLS==NULL)
      Kdu_serve_target_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    int index = (int) _index;
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    const char * Result;
    kdu_serve_target *self = (kdu_serve_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_serve_target_PTR) & ~((jlong) 1));
    Result = self->get_roi_details(index,*resolution,*region);
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_servex                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_servex_CLS != NULL) return;
  try {
    Kdu_servex_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_servex_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_servex_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_servex *self = (kdu_servex *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Open(JNIEnv *__env, jobject _self, jstring _filename, jint _phld_threshold, jint _per_client_cache, jlong _cache_fp, jboolean _cache_exists, jlong _sub_start, jlong _sub_lim)
{
  try {
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    const char *filename = NULL;
    if (_filename != NULL)
      {
        filename = __env->GetStringUTFChars(_filename,NULL);
      }
    int phld_threshold = (int) _phld_threshold;
    int per_client_cache = (int) _per_client_cache;
    FILE *cache_fp = (FILE *) _kdu_long_to_addr(_cache_fp);
    bool cache_exists = (_cache_exists)?true:false;
    kdu_long sub_start = (kdu_long) _sub_start;
    kdu_long sub_lim = (kdu_long) _sub_lim;
    try { // So we can clean up temporary arrays
    kdu_servex *self = (kdu_servex *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_servex_PTR) & ~((jlong) 1));
    self->open(filename,phld_threshold,per_client_cache,cache_fp,cache_exists,sub_start,sub_lim);
    } catch (...) {
    if (_filename != NULL)
      {
        __env->ReleaseStringUTFChars(_filename,filename);
      }
    throw;
    }
    if (_filename != NULL)
      {
        __env->ReleaseStringUTFChars(_filename,filename);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1servex_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_servex_CLS==NULL)
      Kdu_servex_LOADER(__env);
    kdu_servex *self = (kdu_servex *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_servex_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                          Kdu_simple_file_source                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_file_source_CLS != NULL) return;
  try {
    Kdu_simple_file_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_file_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_file_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_file_source *self = (kdu_simple_file_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_file_source *self =
      new kdu_simple_file_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _allow_seeks)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    kdu_simple_file_source *self =
      new kdu_simple_file_source(fname,allow_seeks);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    bool Result;
    kdu_simple_file_source *self = (kdu_simple_file_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_source_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _allow_seeks, jboolean _return_on_failure)
{
  try {
    if (Kdu_simple_file_source_CLS==NULL)
      Kdu_simple_file_source_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool allow_seeks = (_allow_seeks)?true:false;
    bool return_on_failure = (_return_on_failure)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_source *self = (kdu_simple_file_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_source_PTR) & ~((jlong) 1));
    Result = self->open(fname,allow_seeks,return_on_failure);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_simple_file_target                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_file_target_CLS != NULL) return;
  try {
    Kdu_simple_file_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_file_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_file_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_file_target *self = (kdu_simple_file_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_file_target *self =
      new kdu_simple_file_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Native_1create__Ljava_lang_String_2Z(JNIEnv *__env, jclass this_class, jstring _fname, jboolean _append_to_existing)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool append_to_existing = (_append_to_existing)?true:false;
    kdu_simple_file_target *self =
      new kdu_simple_file_target(fname,append_to_existing);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    bool Result;
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jboolean _append_to_existing, jboolean _return_on_failure)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    bool append_to_existing = (_append_to_existing)?true:false;
    bool return_on_failure = (_return_on_failure)?true:false;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    Result = self->open(fname,append_to_existing,return_on_failure);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1file_1target_Strip_1tail(JNIEnv *__env, jobject _self, jbyteArray _buf, jint _num_bytes)
{
  try {
    if (Kdu_simple_file_target_CLS==NULL)
      Kdu_simple_file_target_LOADER(__env);
    kdu_byte *buf = NULL;
    jbyte *buf_ELTS = NULL;
    if (_buf != NULL)
      {
        buf_ELTS = __env->GetByteArrayElements(_buf,NULL);
        buf = (kdu_byte *) buf_ELTS;
      }
    int num_bytes = (int) _num_bytes;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_simple_file_target *self = (kdu_simple_file_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_file_target_PTR) & ~((jlong) 1));
    Result = self->strip_tail(buf,num_bytes);
    } catch (...) {
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    throw;
    }
    if (_buf != NULL)
      {
        __env->ReleaseByteArrayElements(_buf,buf_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_simple_video_source                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_video_source_CLS != NULL) return;
  try {
    Kdu_simple_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_video_source *self = (kdu_simple_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_video_source *self =
      new kdu_simple_video_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Native_1create__Ljava_lang_String_2_3J(JNIEnv *__env, jclass this_class, jstring _fname, jlongArray _flags)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    jlong flags_ELT; __env->GetLongArrayRegion(_flags,0,1,&flags_ELT);
    kdu_uint32 flags = (kdu_uint32) flags_ELT;
    kdu_simple_video_source *self =
      new kdu_simple_video_source(fname,flags);
    flags_ELT = (jlong) flags;
  __env->SetLongArrayRegion(_flags,0,1,&flags_ELT);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    bool Result;
    kdu_simple_video_source *self = (kdu_simple_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_source_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1source_Open(JNIEnv *__env, jobject _self, jstring _fname, jlongArray _flags)
{
  try {
    if (Kdu_simple_video_source_CLS==NULL)
      Kdu_simple_video_source_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    jlong flags_ELT; __env->GetLongArrayRegion(_flags,0,1,&flags_ELT);
    kdu_uint32 flags = (kdu_uint32) flags_ELT;
    try { // So we can clean up temporary arrays
    kdu_simple_video_source *self = (kdu_simple_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_source_PTR) & ~((jlong) 1));
    self->open(fname,flags);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    flags_ELT = (jlong) flags;
  __env->SetLongArrayRegion(_flags,0,1,&flags_ELT);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                          Kdu_simple_video_target                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_simple_video_target_CLS != NULL) return;
  try {
    Kdu_simple_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_simple_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_simple_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_simple_video_target *self = (kdu_simple_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_simple_video_target *self =
      new kdu_simple_video_target();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Native_1create__Ljava_lang_String_2JJJ(JNIEnv *__env, jclass this_class, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags)
{
  try {
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    kdu_simple_video_target *self =
      new kdu_simple_video_target(fname,timescale,frame_period,flags);
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    bool Result;
    kdu_simple_video_target *self = (kdu_simple_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_target_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1simple_1video_1target_Open(JNIEnv *__env, jobject _self, jstring _fname, jlong _timescale, jlong _frame_period, jlong _flags)
{
  try {
    if (Kdu_simple_video_target_CLS==NULL)
      Kdu_simple_video_target_LOADER(__env);
    const char *fname = NULL;
    if (_fname != NULL)
      {
        fname = __env->GetStringUTFChars(_fname,NULL);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    try { // So we can clean up temporary arrays
    kdu_simple_video_target *self = (kdu_simple_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_simple_video_target_PTR) & ~((jlong) 1));
    self->open(fname,timescale,frame_period,flags);
    } catch (...) {
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
    throw;
    }
    if (_fname != NULL)
      {
        __env->ReleaseStringUTFChars(_fname,fname);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                           Kdu_stripe_compressor                           */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_stripe_compressor_CLS != NULL) return;
  try {
    Kdu_stripe_compressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_stripe_compressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_stripe_compressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_stripe_compressor *self = (kdu_stripe_compressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_stripe_compressor *self =
      new kdu_stripe_compressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes, jint _min_slope_threshold, jboolean _no_prediction, jboolean _force_precise, jboolean _record_layer_info_in_comment, jdouble _size_tolerance, jint _num_components, jboolean _want_fastest, jobject _env, jlong _env_queue, jint _env_dbuf_height)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    jlong *layer_sizes_ELTS = NULL;
    jsize layer_sizes_L = 0;
    if (_layer_sizes != NULL)
      {
        layer_sizes_ELTS = __env->GetLongArrayElements(_layer_sizes,NULL);
        layer_sizes_L = __env->GetArrayLength(_layer_sizes);
        layer_sizes = new kdu_long[layer_sizes_L];
        { for (int i=0; i<layer_sizes_L; i++) layer_sizes[i] = (kdu_long)(layer_sizes_ELTS[i]); }
      }
    kdu_uint16 *layer_slopes = NULL;
    jint *layer_slopes_ELTS = NULL;
    jsize layer_slopes_L = 0;
    if (_layer_slopes != NULL)
      {
        layer_slopes_ELTS = __env->GetIntArrayElements(_layer_slopes,NULL);
        layer_slopes_L = __env->GetArrayLength(_layer_slopes);
        layer_slopes = new kdu_uint16[layer_slopes_L];
        { for (int i=0; i<layer_slopes_L; i++) layer_slopes[i] = (kdu_uint16)(layer_slopes_ELTS[i]); }
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (_no_prediction)?true:false;
    bool force_precise = (_force_precise)?true:false;
    bool record_layer_info_in_comment = (_record_layer_info_in_comment)?true:false;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (_want_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    int env_dbuf_height = (int) _env_dbuf_height;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    self->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest,env,env_queue,env_dbuf_height);
    } catch (...) {
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    throw;
    }
    if (_layer_sizes != NULL)
      {
        for (int i=0; i<layer_sizes_L; i++) layer_sizes_ELTS[i] = (jlong)(layer_sizes[i]);
      }
    if (_layer_slopes != NULL)
      {
        for (int i=0; i<layer_slopes_L; i++) layer_slopes_ELTS[i] = (jint)(layer_slopes[i]);
      }
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Finish(JNIEnv *__env, jobject _self, jint _num_layer_specs, jlongArray _layer_sizes, jintArray _layer_slopes)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    jlong *layer_sizes_ELTS = NULL;
    jsize layer_sizes_L = 0;
    if (_layer_sizes != NULL)
      {
        layer_sizes_ELTS = __env->GetLongArrayElements(_layer_sizes,NULL);
        layer_sizes_L = __env->GetArrayLength(_layer_sizes);
        layer_sizes = new kdu_long[layer_sizes_L];
        { for (int i=0; i<layer_sizes_L; i++) layer_sizes[i] = (kdu_long)(layer_sizes_ELTS[i]); }
      }
    kdu_uint16 *layer_slopes = NULL;
    jint *layer_slopes_ELTS = NULL;
    jsize layer_slopes_L = 0;
    if (_layer_slopes != NULL)
      {
        layer_slopes_ELTS = __env->GetIntArrayElements(_layer_slopes,NULL);
        layer_slopes_L = __env->GetArrayLength(_layer_slopes);
        layer_slopes = new kdu_uint16[layer_slopes_L];
        { for (int i=0; i<layer_slopes_L; i++) layer_slopes[i] = (kdu_uint16)(layer_slopes_ELTS[i]); }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->finish(num_layer_specs,layer_sizes,layer_slopes);
    } catch (...) {
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    throw;
    }
    if (_layer_sizes != NULL)
      {
        for (int i=0; i<layer_sizes_L; i++) layer_sizes_ELTS[i] = (jlong)(layer_sizes[i]);
      }
    if (_layer_slopes != NULL)
      {
        for (int i=0; i<layer_slopes_L; i++) layer_slopes_ELTS[i] = (jint)(layer_slopes[i]);
      }
    if (_layer_sizes != NULL)
      {
        delete[] layer_sizes;
        __env->ReleaseLongArrayElements(_layer_sizes,layer_sizes_ELTS,0);
      }
    if (_layer_slopes != NULL)
      {
        delete[] layer_slopes;
        __env->ReleaseIntArrayElements(_layer_slopes,layer_slopes_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *max_stripe_heights = NULL;
    jint *max_stripe_heights_ELTS = NULL;
    if (_max_stripe_heights != NULL)
      {
        max_stripe_heights_ELTS = __env->GetIntArrayElements(_max_stripe_heights,NULL);
        max_stripe_heights = (int *) max_stripe_heights_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    } catch (...) {
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    throw;
    }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3B_3I_3I_3I_3I_3II(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3S_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3I_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1compressor_Push_1stripe___3F_3I_3I_3I_3I_3I_3ZI(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed, jint _flush_period)
{
  try {
    if (Kdu_stripe_compressor_CLS==NULL)
      Kdu_stripe_compressor_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_compressor *self = (kdu_stripe_compressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_compressor_PTR) & ~((jlong) 1));
    Result = self->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                          Kdu_stripe_decompressor                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_stripe_decompressor_CLS != NULL) return;
  try {
    Kdu_stripe_decompressor_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_stripe_decompressor_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_stripe_decompressor_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_stripe_decompressor *self = (kdu_stripe_decompressor *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_stripe_decompressor *self =
      new kdu_stripe_decompressor();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Start(JNIEnv *__env, jobject _self, jobject _codestream, jboolean _force_precise, jboolean _want_fastest, jobject _env, jlong _env_queue, jint _env_dbuf_height)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    if (Kdu_codestream_CLS==NULL)
      Kdu_codestream_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *codestream_S = _kdu_long_to_addr((_codestream==NULL)?((jlong) 0):(__env->GetLongField(_codestream,Kdu_codestream_PTR)));
    kdu_codestream codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (_force_precise)?true:false;
    bool want_fastest = (_want_fastest)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    int env_dbuf_height = (int) _env_dbuf_height;
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    self->start(codestream,force_precise,want_fastest,env,env_queue,env_dbuf_height);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Finish(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    bool Result;
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->finish();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Get_1recommended_1stripe_1heights(JNIEnv *__env, jobject _self, jint _preferred_min_height, jint _absolute_max_height, jintArray _stripe_heights, jintArray _max_stripe_heights)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *max_stripe_heights = NULL;
    jint *max_stripe_heights_ELTS = NULL;
    if (_max_stripe_heights != NULL)
      {
        max_stripe_heights_ELTS = __env->GetIntArrayElements(_max_stripe_heights,NULL);
        max_stripe_heights = (int *) max_stripe_heights_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    } catch (...) {
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    throw;
    }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_max_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_max_stripe_heights,max_stripe_heights_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3B_3I_3I_3I_3I_3I(JNIEnv *__env, jobject _self, jbyteArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_byte *buffer = NULL;
    jbyte *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetByteArrayElements(_buffer,NULL);
        buffer = (kdu_byte *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    throw;
    }
    if (_buffer != NULL)
      {
        __env->ReleaseByteArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3S_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jshortArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_int16 *buffer = NULL;
    jshort *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetShortArrayElements(_buffer,NULL);
        buffer = (kdu_int16 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseShortArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3I_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jintArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    kdu_int32 *buffer = NULL;
    jint *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetIntArrayElements(_buffer,NULL);
        buffer = (kdu_int32 *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseIntArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1stripe_1decompressor_Pull_1stripe___3F_3I_3I_3I_3I_3I_3Z(JNIEnv *__env, jobject _self, jfloatArray _buffer, jintArray _stripe_heights, jintArray _sample_offsets, jintArray _sample_gaps, jintArray _row_gaps, jintArray _precisions, jbooleanArray _is_signed)
{
  try {
    if (Kdu_stripe_decompressor_CLS==NULL)
      Kdu_stripe_decompressor_LOADER(__env);
    float *buffer = NULL;
    jfloat *buffer_ELTS = NULL;
    if (_buffer != NULL)
      {
        buffer_ELTS = __env->GetFloatArrayElements(_buffer,NULL);
        buffer = (float *) buffer_ELTS;
      }
    int *stripe_heights = NULL;
    jint *stripe_heights_ELTS = NULL;
    if (_stripe_heights != NULL)
      {
        stripe_heights_ELTS = __env->GetIntArrayElements(_stripe_heights,NULL);
        stripe_heights = (int *) stripe_heights_ELTS;
      }
    int *sample_offsets = NULL;
    jint *sample_offsets_ELTS = NULL;
    if (_sample_offsets != NULL)
      {
        sample_offsets_ELTS = __env->GetIntArrayElements(_sample_offsets,NULL);
        sample_offsets = (int *) sample_offsets_ELTS;
      }
    int *sample_gaps = NULL;
    jint *sample_gaps_ELTS = NULL;
    if (_sample_gaps != NULL)
      {
        sample_gaps_ELTS = __env->GetIntArrayElements(_sample_gaps,NULL);
        sample_gaps = (int *) sample_gaps_ELTS;
      }
    int *row_gaps = NULL;
    jint *row_gaps_ELTS = NULL;
    if (_row_gaps != NULL)
      {
        row_gaps_ELTS = __env->GetIntArrayElements(_row_gaps,NULL);
        row_gaps = (int *) row_gaps_ELTS;
      }
    int *precisions = NULL;
    jint *precisions_ELTS = NULL;
    if (_precisions != NULL)
      {
        precisions_ELTS = __env->GetIntArrayElements(_precisions,NULL);
        precisions = (int *) precisions_ELTS;
      }
    bool *is_signed = NULL;
    jboolean *is_signed_ELTS = NULL;
    jsize is_signed_L = 0;
    if (_is_signed != NULL)
      {
        is_signed_ELTS = __env->GetBooleanArrayElements(_is_signed,NULL);
        is_signed_L = __env->GetArrayLength(_is_signed);
        is_signed = new bool[is_signed_L];
        { for (int i=0; i<is_signed_L; i++) is_signed[i] = (is_signed)?true:false; }
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_stripe_decompressor *self = (kdu_stripe_decompressor *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_stripe_decompressor_PTR) & ~((jlong) 1));
    Result = self->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    throw;
    }
    if (_is_signed != NULL)
      {
        for (int i=0; i<is_signed_L; i++) is_signed_ELTS[i] = (jboolean)(is_signed[i]);
      }
    if (_buffer != NULL)
      {
        __env->ReleaseFloatArrayElements(_buffer,buffer_ELTS,0);
      }
    if (_stripe_heights != NULL)
      {
        __env->ReleaseIntArrayElements(_stripe_heights,stripe_heights_ELTS,0);
      }
    if (_sample_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_offsets,sample_offsets_ELTS,0);
      }
    if (_sample_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_sample_gaps,sample_gaps_ELTS,0);
      }
    if (_row_gaps != NULL)
      {
        __env->ReleaseIntArrayElements(_row_gaps,row_gaps_ELTS,0);
      }
    if (_precisions != NULL)
      {
        __env->ReleaseIntArrayElements(_precisions,precisions_ELTS,0);
      }
    if (_is_signed != NULL)
      {
        delete[] is_signed;
        __env->ReleaseBooleanArrayElements(_is_signed,is_signed_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Kdu_subband                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_subband_CLS != NULL) return;
  try {
    Kdu_subband_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1band_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_band_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_K_max();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1K_1max_1prime(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_K_max_prime();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1delta(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_delta();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1subband_Get_1msb_1wmse(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_msb_wmse();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1subband_Get_1roi_1weight(JNIEnv *__env, jobject _self, jfloatArray _energy_weight)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    jfloat energy_weight_ELT; __env->GetFloatArrayRegion(_energy_weight,0,1,&energy_weight_ELT);
    float energy_weight = (float) energy_weight_ELT;
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_roi_weight(energy_weight);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    energy_weight_ELT = (jfloat) energy_weight;
  __env->SetFloatArrayRegion(_energy_weight,0,1,&energy_weight_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1dims(JNIEnv *__env, jobject _self, jobject _dims)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_dims,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_dims(*dims);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1valid_1blocks(JNIEnv *__env, jobject _self, jobject _indices)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *indices = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_indices,Kdu_dims_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_valid_blocks(*indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Get_1block_1size(JNIEnv *__env, jobject _self, jobject _nominal_size, jobject _first_size)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *nominal_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_nominal_size,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_coords *first_size = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_first_size,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.get_block_size(*nominal_size,*first_size);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1subband_Open_1block(JNIEnv *__env, jobject _self, jobject _block_idx, jintArray _return_tpart, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_coords *block_idx = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_block_idx,Kdu_coords_PTR) & ~((jlong) 1));
    int *return_tpart = NULL;
    jint *return_tpart_ELTS = NULL;
    if (_return_tpart != NULL)
      {
        return_tpart_ELTS = __env->GetIntArrayElements(_return_tpart,NULL);
        return_tpart = (int *) return_tpart_ELTS;
      }
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_block *Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.open_block(*block_idx,return_tpart,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_return_tpart != NULL)
      {
        __env->ReleaseIntArrayElements(_return_tpart,return_tpart_ELTS,0);
      }
    throw;
    }
    if (_return_tpart != NULL)
      {
        __env->ReleaseIntArrayElements(_return_tpart,return_tpart_ELTS,0);
      }
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_block_CLS);
        __env->SetLongField(_Result,Kdu_block_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1subband_Close_1block(JNIEnv *__env, jobject _self, jobject _block, jobject _env)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    if (Kdu_block_CLS==NULL)
      Kdu_block_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_block *block = (kdu_block *)
      _kdu_long_to_addr((_block==NULL)?((jlong) 0):(__env->GetLongField(_block,Kdu_block_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    self.close_block(block,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1subband_Get_1conservative_1slope_1threshold(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_subband_CLS==NULL)
      Kdu_subband_LOADER(__env);
    kdu_uint16 Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_subband_PTR));
    kdu_subband self = *((kdu_subband *)(&self_S));
    Result = self.get_conservative_slope_threshold();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_subband_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

/*****************************************************************************/
/*                               Kdu_synthesis                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_synthesis_CLS != NULL) return;
  try {
    Kdu_synthesis_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_synthesis_CLS==NULL)
      Kdu_synthesis_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_synthesis_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_synthesis_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_synthesis *self = (kdu_synthesis *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1node_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFILkdu_1jni_Kdu_1thread_1env_2J(JNIEnv *__env, jclass this_class, jobject _node, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jint _pull_offset, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_node_CLS==NULL)
      Kdu_node_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *node_S = _kdu_long_to_addr((_node==NULL)?((jlong) 0):(__env->GetLongField(_node,Kdu_node_PTR)));
    kdu_node node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_synthesis *self =
      new kdu_synthesis(node,allocator,use_shorts,normalization,pull_offset,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1synthesis_Native_1create__Lkdu_1jni_Kdu_1resolution_2Lkdu_1jni_Kdu_1sample_1allocator_2ZFLkdu_1jni_Kdu_1thread_1env_2J(JNIEnv *__env, jclass this_class, jobject _resolution, jobject _allocator, jboolean _use_shorts, jfloat _normalization, jobject _env, jlong _env_queue)
{
  try {
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    if (Kdu_sample_allocator_CLS==NULL)
      Kdu_sample_allocator_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    void *resolution_S = _kdu_long_to_addr((_resolution==NULL)?((jlong) 0):(__env->GetLongField(_resolution,Kdu_resolution_PTR)));
    kdu_resolution resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = (kdu_sample_allocator *)
      _kdu_long_to_addr((_allocator==NULL)?((jlong) 0):(__env->GetLongField(_allocator,Kdu_sample_allocator_PTR) & ~((jlong) 1)));
    bool use_shorts = (_use_shorts)?true:false;
    float normalization = (float) _normalization;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _kdu_long_to_addr(_env_queue);
    kdu_synthesis *self =
      new kdu_synthesis(resolution,allocator,use_shorts,normalization,env,env_queue);
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                             Kdu_thread_entity                             */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_entity_CLS != NULL) return;
  try {
    Kdu_thread_entity_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_entity_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_entity_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_entity *self = (kdu_thread_entity *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_entity *self =
      new kdu_thread_entity();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Pre_1destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->pre_destroy();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_New_1instance(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->new_instance();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_thread_entity_CLS);
        __env->SetLongField(_Result,Kdu_thread_entity_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Is_1group_1owner(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->is_group_owner();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1current_1thread_1entity(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->get_current_thread_entity();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_thread_entity_CLS);
        __env->SetLongField(_Result,Kdu_thread_entity_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1num_1locks(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->get_num_locks();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Create(JNIEnv *__env, jobject _self, jlong _cpu_affinity)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_long cpu_affinity = (kdu_long) _cpu_affinity;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->create(cpu_affinity);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Destroy(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->destroy();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Get_1num_1threads(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->get_num_threads();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Add_1thread(JNIEnv *__env, jobject _self, jint _thread_concurrency)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int thread_concurrency = (int) _thread_concurrency;
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->add_thread(thread_concurrency);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Add_1queue(JNIEnv *__env, jobject _self, jobject _worker, jlong _super_queue, jstring _name, jlong _queue_bank_idx)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_worker_CLS==NULL)
      Kdu_worker_LOADER(__env);
    kdu_worker *worker = (kdu_worker *)
      _kdu_long_to_addr((_worker==NULL)?((jlong) 0):(__env->GetLongField(_worker,Kdu_worker_PTR) & ~((jlong) 1)));
    kdu_thread_queue *super_queue = (kdu_thread_queue *) _kdu_long_to_addr(_super_queue);
    const char *name = NULL;
    if (_name != NULL)
      {
        name = __env->GetStringUTFChars(_name,NULL);
      }
    kdu_long queue_bank_idx = (kdu_long) _queue_bank_idx;
    kdu_thread_queue *Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->add_queue(worker,super_queue,name,queue_bank_idx);
    } catch (...) {
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    throw;
    }
    if (_name != NULL)
      {
        __env->ReleaseStringUTFChars(_name,name);
      }
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Add_1jobs(JNIEnv *__env, jobject _self, jlong _queue, jint _num_jobs, jboolean _finalize_queue, jlong _secondary_seq)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_queue *queue = (kdu_thread_queue *) _kdu_long_to_addr(_queue);
    int num_jobs = (int) _num_jobs;
    bool finalize_queue = (_finalize_queue)?true:false;
    kdu_uint32 secondary_seq = (kdu_uint32) _secondary_seq;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->add_jobs(queue,num_jobs,finalize_queue,secondary_seq);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Synchronize(JNIEnv *__env, jobject _self, jlong _root_queue, jboolean _finalize_descendants_when_synchronized, jboolean _finalize_root_when_synchronized)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _kdu_long_to_addr(_root_queue);
    bool finalize_descendants_when_synchronized = (_finalize_descendants_when_synchronized)?true:false;
    bool finalize_root_when_synchronized = (_finalize_root_when_synchronized)?true:false;
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->synchronize(root_queue,finalize_descendants_when_synchronized,finalize_root_when_synchronized);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Terminate(JNIEnv *__env, jobject _self, jlong _root_queue, jboolean _leave_root, jintArray _exc_code)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _kdu_long_to_addr(_root_queue);
    bool leave_root = (_leave_root)?true:false;
    int *exc_code = NULL;
    jint *exc_code_ELTS = NULL;
    if (_exc_code != NULL)
      {
        exc_code_ELTS = __env->GetIntArrayElements(_exc_code,NULL);
        exc_code = (int *) exc_code_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->terminate(root_queue,leave_root,exc_code);
    } catch (...) {
    if (_exc_code != NULL)
      {
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    throw;
    }
    if (_exc_code != NULL)
      {
        __env->ReleaseIntArrayElements(_exc_code,exc_code_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Register_1synchronized_1job(JNIEnv *__env, jobject _self, jobject _worker, jlong _queue, jboolean _run_deferred)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    if (Kdu_worker_CLS==NULL)
      Kdu_worker_LOADER(__env);
    kdu_worker *worker = (kdu_worker *)
      _kdu_long_to_addr((_worker==NULL)?((jlong) 0):(__env->GetLongField(_worker,Kdu_worker_PTR) & ~((jlong) 1)));
    kdu_thread_queue *queue = (kdu_thread_queue *) _kdu_long_to_addr(_queue);
    bool run_deferred = (_run_deferred)?true:false;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->register_synchronized_job(worker,queue,run_deferred);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Process_1jobs(JNIEnv *__env, jobject _self, jlong _wait_queue, jboolean _waiting_for_sync, jboolean _throw_group_failure)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_queue *wait_queue = (kdu_thread_queue *) _kdu_long_to_addr(_wait_queue);
    bool waiting_for_sync = (_waiting_for_sync)?true:false;
    bool throw_group_failure = (_throw_group_failure)?true:false;
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->process_jobs(wait_queue,waiting_for_sync,throw_group_failure);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Handle_1exception(JNIEnv *__env, jobject _self, jint _exc_code)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int exc_code = (int) _exc_code;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->handle_exception(exc_code);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Acquire_1lock(JNIEnv *__env, jobject _self, jint _lock_id, jboolean _allow_exceptions)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int lock_id = (int) _lock_id;
    bool allow_exceptions = (_allow_exceptions)?true:false;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->acquire_lock(lock_id,allow_exceptions);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Try_1lock(JNIEnv *__env, jobject _self, jint _lock_id, jboolean _allow_exceptions)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int lock_id = (int) _lock_id;
    bool allow_exceptions = (_allow_exceptions)?true:false;
    bool Result;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    Result = self->try_lock(lock_id,allow_exceptions);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1entity_Release_1lock(JNIEnv *__env, jobject _self, jint _lock_id)
{
  try {
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    int lock_id = (int) _lock_id;
    kdu_thread_entity *self = (kdu_thread_entity *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_entity_PTR) & ~((jlong) 1));
    self->release_lock(lock_id);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                              Kdu_thread_env                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_env_CLS != NULL) return;
  try {
    Kdu_thread_env_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_env_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_env_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_env *self = (kdu_thread_env *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1env_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_env *self =
      new kdu_thread_env();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1env_Get_1state(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kd_thread_env *Result;
    kdu_thread_env *self = (kdu_thread_env *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_env_PTR) & ~((jlong) 1));
    Result = self->get_state();
    return (jlong) _addr_to_kdu_long(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1thread_1env_Get_1current_1thread_1env(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *Result;
    kdu_thread_env *self = (kdu_thread_env *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_env_PTR) & ~((jlong) 1));
    Result = self->get_current_thread_env();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_thread_env_CLS);
        __env->SetLongField(_Result,Kdu_thread_env_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                          Kdu_thread_safe_message                          */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_thread_safe_message_CLS != NULL) return;
  try {
    Kdu_thread_safe_message_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_thread_safe_message_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_thread_safe_message_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_thread_safe_message *self = (kdu_thread_safe_message *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_thread_safe_message *self =
      new kdu_thread_safe_message();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Flush(JNIEnv *__env, jobject _self, jboolean _end_of_message)
{
  try {
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    bool end_of_message = (_end_of_message)?true:false;
    kdu_thread_safe_message *self = (kdu_thread_safe_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_safe_message_PTR) & ~((jlong) 1));
    self->flush(end_of_message);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1thread_1safe_1message_Start_1message(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_thread_safe_message_CLS==NULL)
      Kdu_thread_safe_message_LOADER(__env);
    kdu_thread_safe_message *self = (kdu_thread_safe_message *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_thread_safe_message_PTR) & ~((jlong) 1));
    self->start_message();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Kdu_tiffdir                                */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tiffdir_CLS != NULL) return;
  try {
    Kdu_tiffdir_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_tiffdir_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_tiffdir_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_tiffdir *self = (kdu_tiffdir *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_tiffdir *self =
      new kdu_tiffdir();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Init(JNIEnv *__env, jobject _self, jboolean _littlendian)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool littlendian = (_littlendian)?true:false;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->init(littlendian);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Opendir(JNIEnv *__env, jobject _self, jobject _src)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_source_CLS==NULL)
      Kdu_compressed_source_LOADER(__env);
    kdu_compressed_source *src = (kdu_compressed_source *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Kdu_compressed_source_PTR) & ~((jlong) 1)));
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->opendir(src);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1header(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *tgt = (kdu_compressed_target *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    int Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->write_header(tgt,dir_offset);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Writedir(JNIEnv *__env, jobject _self, jobject _tgt, jlong _dir_offset)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    if (Kdu_compressed_target_CLS==NULL)
      Kdu_compressed_target_LOADER(__env);
    kdu_compressed_target *tgt = (kdu_compressed_target *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Kdu_compressed_target_PTR) & ~((jlong) 1)));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->writedir(tgt,dir_offset);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1littlendian(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->is_littlendian();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Is_1native_1littlendian(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->is_native_littlendian();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1dirlength(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->get_dirlength();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1taglength(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->get_taglength(tag_type);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Get_1fieldlength(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->get_fieldlength(tag_type);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tiffdir_Delete_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    bool Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->delete_tag(tag_type);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tiffdir_Open_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 Result;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->open_tag(tag_type);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JI_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jbyteArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JI_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jintArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint16 *data = NULL;
    jint *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetIntArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint16[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint16)(data_ELTS[i]); }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jint)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JI_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jlongArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint32 *data = NULL;
    jlong *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetLongArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint32[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint32)(data_ELTS[i]); }
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jlong)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tiffdir_Read_1tag__JI_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jdoubleArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    double *data = NULL;
    jdouble *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetDoubleArrayElements(_data,NULL);
        data = (double *) data_ELTS;
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    Result = self->read_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Create_1tag(JNIEnv *__env, jobject _self, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->create_tag(tag_type);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3B(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jbyteArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_byte *data = NULL;
    jbyte *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetByteArrayElements(_data,NULL);
        data = (kdu_byte *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseByteArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3I(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jintArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint16 *data = NULL;
    jint *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetIntArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint16[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint16)(data_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jint)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseIntArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3J(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jlongArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint32 *data = NULL;
    jlong *data_ELTS = NULL;
    jsize data_L = 0;
    if (_data != NULL)
      {
        data_ELTS = __env->GetLongArrayElements(_data,NULL);
        data_L = __env->GetArrayLength(_data);
        data = new kdu_uint32[data_L];
        { for (int i=0; i<data_L; i++) data[i] = (kdu_uint32)(data_ELTS[i]); }
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        for (int i=0; i<data_L; i++) data_ELTS[i] = (jlong)(data[i]);
      }
    if (_data != NULL)
      {
        delete[] data;
        __env->ReleaseLongArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI_3D(JNIEnv *__env, jobject _self, jlong _tag_type, jint _length, jdoubleArray _data)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    double *data = NULL;
    jdouble *data_ELTS = NULL;
    if (_data != NULL)
      {
        data_ELTS = __env->GetDoubleArrayElements(_data,NULL);
        data = (double *) data_ELTS;
      }
    try { // So we can clean up temporary arrays
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,length,data);
    } catch (...) {
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
    throw;
    }
    if (_data != NULL)
      {
        __env->ReleaseDoubleArrayElements(_data,data_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JI(JNIEnv *__env, jobject _self, jlong _tag_type, jint _val16)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint16 val16 = (kdu_uint16) _val16;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,val16);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JJ(JNIEnv *__env, jobject _self, jlong _tag_type, jlong _val32)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 val32 = (kdu_uint32) _val32;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,val32);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Write_1tag__JD(JNIEnv *__env, jobject _self, jlong _tag_type, jdouble _valdbl)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    double valdbl = (double) _valdbl;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->write_tag(tag_type,valdbl);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tiffdir_Copy_1tag(JNIEnv *__env, jobject _self, jobject _src, jlong _tag_type)
{
  try {
    if (Kdu_tiffdir_CLS==NULL)
      Kdu_tiffdir_LOADER(__env);
    kdu_tiffdir *src = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_tiffdir_PTR) & ~((jlong) 1));
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_tiffdir *self = (kdu_tiffdir *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tiffdir_PTR) & ~((jlong) 1));
    self->copy_tag(*src,tag_type);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                 Kdu_tile                                  */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tile_CLS != NULL) return;
  try {
    Kdu_tile_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Close(JNIEnv *__env, jobject _self, jobject _env)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    self.close(env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tnum(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_tnum();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Get_1tile_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result_copy = self.get_tile_idx();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1ycc(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_ycc();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_Set_1components_1of_1interest(JNIEnv *__env, jobject _self, jint _num_components_of_interest, jintArray _components_of_interest)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int num_components_of_interest = (int) _num_components_of_interest;
    int *components_of_interest = NULL;
    jint *components_of_interest_ELTS = NULL;
    if (_components_of_interest != NULL)
      {
        components_of_interest_ELTS = __env->GetIntArrayElements(_components_of_interest,NULL);
        components_of_interest = (int *) components_of_interest_ELTS;
      }
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    self.set_components_of_interest(num_components_of_interest,components_of_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_components_of_interest != NULL)
      {
        __env->ReleaseIntArrayElements(_components_of_interest,components_of_interest_ELTS,0);
      }
    throw;
    }
    if (_components_of_interest != NULL)
      {
        __env->ReleaseIntArrayElements(_components_of_interest,components_of_interest_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1block_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _num_stage_inputs, jintArray _num_stage_outputs, jintArray _num_block_inputs, jintArray _num_block_outputs, jintArray _block_input_indices, jintArray _block_output_indices, jfloatArray _irrev_block_offsets, jintArray _rev_block_offsets, jintArray _stage_input_indices)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    jint num_stage_inputs_ELT; __env->GetIntArrayRegion(_num_stage_inputs,0,1,&num_stage_inputs_ELT);
    int num_stage_inputs = (int) num_stage_inputs_ELT;
    jint num_stage_outputs_ELT; __env->GetIntArrayRegion(_num_stage_outputs,0,1,&num_stage_outputs_ELT);
    int num_stage_outputs = (int) num_stage_outputs_ELT;
    jint num_block_inputs_ELT; __env->GetIntArrayRegion(_num_block_inputs,0,1,&num_block_inputs_ELT);
    int num_block_inputs = (int) num_block_inputs_ELT;
    jint num_block_outputs_ELT; __env->GetIntArrayRegion(_num_block_outputs,0,1,&num_block_outputs_ELT);
    int num_block_outputs = (int) num_block_outputs_ELT;
    int *block_input_indices = NULL;
    jint *block_input_indices_ELTS = NULL;
    if (_block_input_indices != NULL)
      {
        block_input_indices_ELTS = __env->GetIntArrayElements(_block_input_indices,NULL);
        block_input_indices = (int *) block_input_indices_ELTS;
      }
    int *block_output_indices = NULL;
    jint *block_output_indices_ELTS = NULL;
    if (_block_output_indices != NULL)
      {
        block_output_indices_ELTS = __env->GetIntArrayElements(_block_output_indices,NULL);
        block_output_indices = (int *) block_output_indices_ELTS;
      }
    float *irrev_block_offsets = NULL;
    jfloat *irrev_block_offsets_ELTS = NULL;
    if (_irrev_block_offsets != NULL)
      {
        irrev_block_offsets_ELTS = __env->GetFloatArrayElements(_irrev_block_offsets,NULL);
        irrev_block_offsets = (float *) irrev_block_offsets_ELTS;
      }
    int *rev_block_offsets = NULL;
    jint *rev_block_offsets_ELTS = NULL;
    if (_rev_block_offsets != NULL)
      {
        rev_block_offsets_ELTS = __env->GetIntArrayElements(_rev_block_offsets,NULL);
        rev_block_offsets = (int *) rev_block_offsets_ELTS;
      }
    int *stage_input_indices = NULL;
    jint *stage_input_indices_ELTS = NULL;
    if (_stage_input_indices != NULL)
      {
        stage_input_indices_ELTS = __env->GetIntArrayElements(_stage_input_indices,NULL);
        stage_input_indices = (int *) stage_input_indices_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices,irrev_block_offsets,rev_block_offsets,stage_input_indices);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_block_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_input_indices,block_input_indices_ELTS,0);
      }
    if (_block_output_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_output_indices,block_output_indices_ELTS,0);
      }
    if (_irrev_block_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_block_offsets,irrev_block_offsets_ELTS,0);
      }
    if (_rev_block_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_block_offsets,rev_block_offsets_ELTS,0);
      }
    if (_stage_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_stage_input_indices,stage_input_indices_ELTS,0);
      }
    throw;
    }
    num_stage_inputs_ELT = (jint) num_stage_inputs;
  __env->SetIntArrayRegion(_num_stage_inputs,0,1,&num_stage_inputs_ELT);
    num_stage_outputs_ELT = (jint) num_stage_outputs;
  __env->SetIntArrayRegion(_num_stage_outputs,0,1,&num_stage_outputs_ELT);
    num_block_inputs_ELT = (jint) num_block_inputs;
  __env->SetIntArrayRegion(_num_block_inputs,0,1,&num_block_inputs_ELT);
    num_block_outputs_ELT = (jint) num_block_outputs;
  __env->SetIntArrayRegion(_num_block_outputs,0,1,&num_block_outputs_ELT);
    if (_block_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_input_indices,block_input_indices_ELTS,0);
      }
    if (_block_output_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_block_output_indices,block_output_indices_ELTS,0);
      }
    if (_irrev_block_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_block_offsets,irrev_block_offsets_ELTS,0);
      }
    if (_rev_block_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_block_offsets,rev_block_offsets_ELTS,0);
      }
    if (_stage_input_indices != NULL)
      {
        __env->ReleaseIntArrayElements(_stage_input_indices,stage_input_indices_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1matrix_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jfloatArray _coefficients)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    float *coefficients = NULL;
    jfloat *coefficients_ELTS = NULL;
    if (_coefficients != NULL)
      {
        coefficients_ELTS = __env->GetFloatArrayElements(_coefficients,NULL);
        coefficients = (float *) coefficients_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_matrix_info(stage_idx,block_idx,coefficients);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_coefficients,coefficients_ELTS,0);
      }
    throw;
    }
    if (_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_coefficients,coefficients_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1rxform_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jintArray _coefficients, jintArray _active_outputs)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int *coefficients = NULL;
    jint *coefficients_ELTS = NULL;
    if (_coefficients != NULL)
      {
        coefficients_ELTS = __env->GetIntArrayElements(_coefficients,NULL);
        coefficients = (int *) coefficients_ELTS;
      }
    int *active_outputs = NULL;
    jint *active_outputs_ELTS = NULL;
    if (_active_outputs != NULL)
      {
        active_outputs_ELTS = __env->GetIntArrayElements(_active_outputs,NULL);
        active_outputs = (int *) active_outputs_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_rxform_info(stage_idx,block_idx,coefficients,active_outputs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_coefficients,coefficients_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    throw;
    }
    if (_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_coefficients,coefficients_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Get_1mct_1dependency_1info(JNIEnv *__env, jobject _self, jint _stage_idx, jint _block_idx, jbooleanArray _is_reversible, jfloatArray _irrev_coefficients, jfloatArray _irrev_offsets, jintArray _rev_coefficients, jintArray _rev_offsets, jintArray _active_outputs)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    jboolean is_reversible_ELT; __env->GetBooleanArrayRegion(_is_reversible,0,1,&is_reversible_ELT);
    bool is_reversible = (is_reversible_ELT)?true:false;
    float *irrev_coefficients = NULL;
    jfloat *irrev_coefficients_ELTS = NULL;
    if (_irrev_coefficients != NULL)
      {
        irrev_coefficients_ELTS = __env->GetFloatArrayElements(_irrev_coefficients,NULL);
        irrev_coefficients = (float *) irrev_coefficients_ELTS;
      }
    float *irrev_offsets = NULL;
    jfloat *irrev_offsets_ELTS = NULL;
    if (_irrev_offsets != NULL)
      {
        irrev_offsets_ELTS = __env->GetFloatArrayElements(_irrev_offsets,NULL);
        irrev_offsets = (float *) irrev_offsets_ELTS;
      }
    int *rev_coefficients = NULL;
    jint *rev_coefficients_ELTS = NULL;
    if (_rev_coefficients != NULL)
      {
        rev_coefficients_ELTS = __env->GetIntArrayElements(_rev_coefficients,NULL);
        rev_coefficients = (int *) rev_coefficients_ELTS;
      }
    int *rev_offsets = NULL;
    jint *rev_offsets_ELTS = NULL;
    if (_rev_offsets != NULL)
      {
        rev_offsets_ELTS = __env->GetIntArrayElements(_rev_offsets,NULL);
        rev_offsets = (int *) rev_offsets_ELTS;
      }
    int *active_outputs = NULL;
    jint *active_outputs_ELTS = NULL;
    if (_active_outputs != NULL)
      {
        active_outputs_ELTS = __env->GetIntArrayElements(_active_outputs,NULL);
        active_outputs = (int *) active_outputs_ELTS;
      }
    bool Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets,rev_coefficients,rev_offsets,active_outputs);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_irrev_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_coefficients,irrev_coefficients_ELTS,0);
      }
    if (_irrev_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_offsets,irrev_offsets_ELTS,0);
      }
    if (_rev_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_coefficients,rev_coefficients_ELTS,0);
      }
    if (_rev_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_offsets,rev_offsets_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    throw;
    }
    is_reversible_ELT = (jboolean) is_reversible;
  __env->SetBooleanArrayRegion(_is_reversible,0,1,&is_reversible_ELT);
    if (_irrev_coefficients != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_coefficients,irrev_coefficients_ELTS,0);
      }
    if (_irrev_offsets != NULL)
      {
        __env->ReleaseFloatArrayElements(_irrev_offsets,irrev_offsets_ELTS,0);
      }
    if (_rev_coefficients != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_coefficients,rev_coefficients_ELTS,0);
      }
    if (_rev_offsets != NULL)
      {
        __env->ReleaseIntArrayElements(_rev_offsets,rev_offsets_ELTS,0);
      }
    if (_active_outputs != NULL)
      {
        __env->ReleaseIntArrayElements(_active_outputs,active_outputs_ELTS,0);
      }
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_num_components();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_Get_1num_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_num_layers();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_Parse_1all_1relevant_1packets(JNIEnv *__env, jobject _self, jboolean _start_from_scratch_if_possible, jobject _env)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    bool start_from_scratch_if_possible = (_start_from_scratch_if_possible)?true:false;
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.parse_all_relevant_packets(start_from_scratch_if_possible,env);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1tile_Get_1parsed_1packet_1stats(JNIEnv *__env, jobject _self, jint _component_idx, jint _discard_levels, jint _num_layers, jlongArray _layer_bytes, jlongArray _layer_packets)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int component_idx = (int) _component_idx;
    int discard_levels = (int) _discard_levels;
    int num_layers = (int) _num_layers;
    kdu_long *layer_bytes = NULL;
    jlong *layer_bytes_ELTS = NULL;
    jsize layer_bytes_L = 0;
    if (_layer_bytes != NULL)
      {
        layer_bytes_ELTS = __env->GetLongArrayElements(_layer_bytes,NULL);
        layer_bytes_L = __env->GetArrayLength(_layer_bytes);
        layer_bytes = new kdu_long[layer_bytes_L];
        { for (int i=0; i<layer_bytes_L; i++) layer_bytes[i] = (kdu_long)(layer_bytes_ELTS[i]); }
      }
    kdu_long *layer_packets = NULL;
    jlong *layer_packets_ELTS = NULL;
    jsize layer_packets_L = 0;
    if (_layer_packets != NULL)
      {
        layer_packets_ELTS = __env->GetLongArrayElements(_layer_packets,NULL);
        layer_packets_L = __env->GetArrayLength(_layer_packets);
        layer_packets = new kdu_long[layer_packets_L];
        { for (int i=0; i<layer_packets_L; i++) layer_packets[i] = (kdu_long)(layer_packets_ELTS[i]); }
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.get_parsed_packet_stats(component_idx,discard_levels,num_layers,layer_bytes,layer_packets);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    } catch (...) {
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_packets != NULL)
      {
        delete[] layer_packets;
        __env->ReleaseLongArrayElements(_layer_packets,layer_packets_ELTS,0);
      }
    throw;
    }
    if (_layer_bytes != NULL)
      {
        for (int i=0; i<layer_bytes_L; i++) layer_bytes_ELTS[i] = (jlong)(layer_bytes[i]);
      }
    if (_layer_packets != NULL)
      {
        for (int i=0; i<layer_packets_L; i++) layer_packets_ELTS[i] = (jlong)(layer_packets[i]);
      }
    if (_layer_bytes != NULL)
      {
        delete[] layer_bytes;
        __env->ReleaseLongArrayElements(_layer_bytes,layer_bytes_ELTS,0);
      }
    if (_layer_packets != NULL)
      {
        delete[] layer_packets;
        __env->ReleaseLongArrayElements(_layer_packets,layer_packets_ELTS,0);
      }
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_Access_1component(JNIEnv *__env, jobject _self, jint _component_idx)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    int component_idx = (int) _component_idx;
    kdu_tile_comp Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.access_component(component_idx);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_tile_comp_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jfloat JNICALL Java_kdu_1jni_Kdu_1tile_Find_1component_1gain_1info(JNIEnv *__env, jobject _self, jint _comp_idx, jboolean _restrict_to_interest)
{
  try {
    if (Kdu_tile_CLS==NULL)
      Kdu_tile_LOADER(__env);
    int comp_idx = (int) _comp_idx;
    bool restrict_to_interest = (_restrict_to_interest)?true:false;
    float Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_PTR));
    kdu_tile self = *((kdu_tile *)(&self_S));
    Result = self.find_component_gain_info(comp_idx,restrict_to_interest);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jfloat) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jfloat) 0;
}

/*****************************************************************************/
/*                               Kdu_tile_comp                               */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_tile_comp_CLS != NULL) return;
  try {
    Kdu_tile_comp_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1reversible(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_reversible();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1subsampling(JNIEnv *__env, jobject _self, jobject _factors)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *factors = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_factors,Kdu_coords_PTR) & ~((jlong) 1));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    self.get_subsampling(*factors);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1bit_1depth(JNIEnv *__env, jobject _self, jboolean _internal)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool internal = (_internal)?true:false;
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_bit_depth(internal);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1signed(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_signed();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Get_1num_1resolutions(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    int Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.get_num_resolutions();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__I(JNIEnv *__env, jobject _self, jint _res_level)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    int res_level = (int) _res_level;
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.access_resolution(res_level);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1tile_1comp_Access_1resolution__(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_tile_comp_CLS==NULL)
      Kdu_tile_comp_LOADER(__env);
    if (Kdu_resolution_CLS==NULL)
      Kdu_resolution_LOADER(__env);
    kdu_resolution Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Kdu_tile_comp_PTR));
    kdu_tile_comp self = *((kdu_tile_comp *)(&self_S));
    Result = self.access_resolution();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Kdu_tile_comp_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Kdu_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_window                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_window_CLS != NULL) return;
  try {
    Kdu_window_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_window_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_window_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_window *self = (kdu_window *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Kdu_1window_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    kdu_window *self =
      new kdu_window();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->init();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Copy_1from(JNIEnv *__env, jobject _self, jobject _src, jboolean _copy_expansions)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *src = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_src,Kdu_window_PTR) & ~((jlong) 1));
    bool copy_expansions = (_copy_expansions)?true:false;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->copy_from(*src,copy_expansions);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Equals(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->equals(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Contains(JNIEnv *__env, jobject _self, jobject _rhs)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *rhs = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_rhs,Kdu_window_PTR) & ~((jlong) 1));
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->contains(*rhs);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords Result_copy;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result_copy = self->get_resolution();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_coords_CLS);
        kdu_coords *Result = new kdu_coords; *Result = Result_copy;
        Result = (kdu_coords *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_coords_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1resolution(JNIEnv *__env, jobject _self, jobject _resolution)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_coords_CLS==NULL)
      Kdu_coords_LOADER(__env);
    kdu_coords *resolution = (kdu_coords *)
      _kdu_long_to_addr(__env->GetLongField(_resolution,Kdu_coords_PTR) & ~((jlong) 1));
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->set_resolution(*resolution);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1round_1direction(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->get_round_direction();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1round_1direction(JNIEnv *__env, jobject _self, jint _direction)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int direction = (int) _direction;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->set_round_direction(direction);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1region(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result_copy = self->get_region();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1region(JNIEnv *__env, jobject _self, jobject _region)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *region = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_region,Kdu_dims_PTR) & ~((jlong) 1));
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->set_region(*region);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1components(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->access_components();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_range_set_CLS);
        __env->SetLongField(_Result,Kdu_range_set_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1codestreams(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->access_codestreams();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_range_set_CLS);
        __env->SetLongField(_Result,Kdu_range_set_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Access_1contexts(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->access_contexts();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_range_set_CLS);
        __env->SetLongField(_Result,Kdu_range_set_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Create_1context_1expansion(JNIEnv *__env, jobject _self, jint _which)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_range_set_CLS==NULL)
      Kdu_range_set_LOADER(__env);
    int which = (int) _which;
    kdu_range_set *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->create_context_expansion(which);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_range_set_CLS);
        __env->SetLongField(_Result,Kdu_range_set_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1context(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->parse_context(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Kdu_1window_Get_1max_1layers(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->get_max_layers();
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1max_1layers(JNIEnv *__env, jobject _self, jint _val)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    int val = (int) _val;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->set_max_layers(val);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Kdu_1window_Get_1metadata_1only(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    bool Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->get_metadata_only();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Set_1metadata_1only(JNIEnv *__env, jobject _self, jboolean _val)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    bool val = (_val)?true:false;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->set_metadata_only(val);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Kdu_1window_Get_1metareq(JNIEnv *__env, jobject _self, jint _index)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    if (Kdu_metareq_CLS==NULL)
      Kdu_metareq_LOADER(__env);
    int index = (int) _index;
    kdu_metareq *Result;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->get_metareq(index);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Kdu_metareq_CLS);
        __env->SetLongField(_Result,Kdu_metareq_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Init_1metareq(JNIEnv *__env, jobject _self)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->init_metareq();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1window_Add_1metareq(JNIEnv *__env, jobject _self, jlong _box_type, jint _qualifier, jboolean _priority, jint _byte_limit, jboolean _recurse, jlong _root_bin_id, jint _max_depth)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (_priority)?true:false;
    int byte_limit = (int) _byte_limit;
    bool recurse = (_recurse)?true:false;
    kdu_long root_bin_id = (kdu_long) _root_bin_id;
    int max_depth = (int) _max_depth;
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    self->add_metareq(box_type,qualifier,priority,byte_limit,recurse,root_bin_id,max_depth);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jstring JNICALL Java_kdu_1jni_Kdu_1window_Parse_1metareq(JNIEnv *__env, jobject _self, jstring _string)
{
  try {
    if (Kdu_window_CLS==NULL)
      Kdu_window_LOADER(__env);
    const char *string = NULL;
    if (_string != NULL)
      {
        string = __env->GetStringUTFChars(_string,NULL);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    kdu_window *self = (kdu_window *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_window_PTR) & ~((jlong) 1));
    Result = self->parse_metareq(string);
    } catch (...) {
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    throw;
    }
    if (_string != NULL)
      {
        __env->ReleaseStringUTFChars(_string,string);
      }
    return __env->NewStringUTF(Result);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                                Kdu_worker                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1worker_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Kdu_worker_CLS != NULL) return;
  try {
    Kdu_worker_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1worker_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Kdu_worker_CLS==NULL)
      Kdu_worker_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Kdu_worker_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Kdu_worker_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        kdu_worker *self = (kdu_worker *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT void JNICALL Java_kdu_1jni_Kdu_1worker_Do_1job(JNIEnv *__env, jobject _self, jobject _ent, jint _job_idx)
{
  try {
    if (Kdu_worker_CLS==NULL)
      Kdu_worker_LOADER(__env);
    if (Kdu_thread_entity_CLS==NULL)
      Kdu_thread_entity_LOADER(__env);
    kdu_thread_entity *ent = (kdu_thread_entity *)
      _kdu_long_to_addr((_ent==NULL)?((jlong) 0):(__env->GetLongField(_ent,Kdu_thread_entity_PTR) & ~((jlong) 1)));
    int job_idx = (int) _job_idx;
    kdu_worker *self = (kdu_worker *)
      _kdu_long_to_addr(__env->GetLongField(_self,Kdu_worker_PTR) & ~((jlong) 1));
    self->do_job(ent,job_idx);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Mcc_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mcc_params_CLS != NULL) return;
  try {
    Mcc_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mcc_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mcc_params_CLS==NULL)
      Mcc_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mcc_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mcc_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mcc_params *self = (mcc_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mcc_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mcc_params *self =
      new mcc_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mco_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mco_params_CLS != NULL) return;
  try {
    Mco_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mco_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mco_params_CLS==NULL)
      Mco_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mco_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mco_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mco_params *self = (mco_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mco_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mco_params *self =
      new mco_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mct_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mct_params_CLS != NULL) return;
  try {
    Mct_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mct_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mct_params_CLS==NULL)
      Mct_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mct_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mct_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mct_params *self = (mct_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mct_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    mct_params *self =
      new mct_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Mj2_source                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_source_CLS != NULL) return;
  try {
    Mj2_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_source *self = (mj2_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Native_1create__(JNIEnv *__env, jclass this_class)
{
  try {
    mj2_source *self =
      new mj2_source();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->exists();
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Open(JNIEnv *__env, jobject _self, jobject _src, jboolean _return_if_incompatible)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *src = (jp2_family_src *)
      _kdu_long_to_addr((_src==NULL)?((jlong) 0):(__env->GetLongField(_src,Jp2_family_src_PTR) & ~((jlong) 1)));
    bool return_if_incompatible = (_return_if_incompatible)?true:false;
    int Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->open(src,return_if_incompatible);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1source_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    self->close();
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1ultimate_1src(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Jp2_family_src_CLS==NULL)
      Jp2_family_src_LOADER(__env);
    jp2_family_src *Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->get_ultimate_src();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_family_src_CLS);
        __env->SetLongField(_Result,Jp2_family_src_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Get_1movie_1dims(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims Result_copy;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result_copy = self->get_movie_dims();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Kdu_dims_CLS);
        kdu_dims *Result = new kdu_dims; *Result = Result_copy;
        Result = (kdu_dims *)
          _kdu_long_to_addr(((jlong) _addr_to_kdu_long(Result))+1); // Enable auto-destroy.
        __env->SetLongField(_Result,Kdu_dims_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1source_Get_1next_1track(JNIEnv *__env, jobject _self, jlong _prev_track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    kdu_uint32 prev_track_idx = (kdu_uint32) _prev_track_idx;
    kdu_uint32 Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->get_next_track(prev_track_idx);
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1source_Get_1track_1type(JNIEnv *__env, jobject _self, jlong _track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    int Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->get_track_type(track_idx);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1source_Access_1video_1track(JNIEnv *__env, jobject _self, jlong _track_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    mj2_video_source *Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->access_video_track(track_idx);
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Mj2_video_source_CLS);
        __env->SetLongField(_Result,Mj2_video_source_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Find_1stream(JNIEnv *__env, jobject _self, jint _stream_idx, jlongArray _track_idx, jintArray _frame_idx, jintArray _field_idx)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    int stream_idx = (int) _stream_idx;
    jlong track_idx_ELT; __env->GetLongArrayRegion(_track_idx,0,1,&track_idx_ELT);
    kdu_uint32 track_idx = (kdu_uint32) track_idx_ELT;
    jint frame_idx_ELT; __env->GetIntArrayRegion(_frame_idx,0,1,&frame_idx_ELT);
    int frame_idx = (int) frame_idx_ELT;
    jint field_idx_ELT; __env->GetIntArrayRegion(_field_idx,0,1,&field_idx_ELT);
    int field_idx = (int) field_idx_ELT;
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->find_stream(stream_idx,track_idx,frame_idx,field_idx);
    track_idx_ELT = (jlong) track_idx;
  __env->SetLongArrayRegion(_track_idx,0,1,&track_idx_ELT);
    frame_idx_ELT = (jint) frame_idx;
  __env->SetIntArrayRegion(_frame_idx,0,1,&frame_idx_ELT);
    field_idx_ELT = (jint) field_idx;
  __env->SetIntArrayRegion(_field_idx,0,1,&field_idx_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1source_Count_1codestreams(JNIEnv *__env, jobject _self, jintArray _count)
{
  try {
    if (Mj2_source_CLS==NULL)
      Mj2_source_LOADER(__env);
    jint count_ELT; __env->GetIntArrayRegion(_count,0,1,&count_ELT);
    int count = (int) count_ELT;
    bool Result;
    mj2_source *self = (mj2_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_source_PTR) & ~((jlong) 1));
    Result = self->count_codestreams(count);
    count_ELT = (jint) count;
  __env->SetIntArrayRegion(_count,0,1,&count_ELT);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                                Mj2_target                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_target_CLS != NULL) return;
  try {
    Mj2_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1target_Exists(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    bool Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    Result = self.exists();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Open(JNIEnv *__env, jobject _self, jobject _tgt)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    if (Jp2_family_tgt_CLS==NULL)
      Jp2_family_tgt_LOADER(__env);
    jp2_family_tgt *tgt = (jp2_family_tgt *)
      _kdu_long_to_addr((_tgt==NULL)?((jlong) 0):(__env->GetLongField(_tgt,Jp2_family_tgt_PTR) & ~((jlong) 1)));
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    self.open(tgt);
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1target_Close(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    self.close();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1target_Add_1video_1track(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_target_CLS==NULL)
      Mj2_target_LOADER(__env);
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    mj2_video_target *Result;
    void *self_S = _kdu_long_to_addr(__env->GetLongField(_self,Mj2_target_PTR));
    mj2_target self = *((mj2_target *)(&self_S));
    Result = self.add_video_track();
    self_S = *((void **)(&(self)));
      __env->SetLongField(_self,Mj2_target_PTR,(jlong) _addr_to_kdu_long(self_S));
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Mj2_video_target_CLS);
        __env->SetLongField(_Result,Mj2_video_target_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

/*****************************************************************************/
/*                             Mj2_video_source                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_video_source_CLS != NULL) return;
  try {
    Mj2_video_source_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_video_source_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_video_source_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_video_source *self = (mj2_video_source *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1track_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_uint32 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->get_track_idx();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1compositing_1order(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->get_compositing_order();
    return (jshort) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jshort) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode___3S_3S_3S(JNIEnv *__env, jobject _self, jshortArray _op_red, jshortArray _op_green, jshortArray _op_blue)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jshort op_red_ELT; __env->GetShortArrayRegion(_op_red,0,1,&op_red_ELT);
    kdu_int16 op_red = (kdu_int16) op_red_ELT;
    jshort op_green_ELT; __env->GetShortArrayRegion(_op_green,0,1,&op_green_ELT);
    kdu_int16 op_green = (kdu_int16) op_green_ELT;
    jshort op_blue_ELT; __env->GetShortArrayRegion(_op_blue,0,1,&op_blue_ELT);
    kdu_int16 op_blue = (kdu_int16) op_blue_ELT;
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->get_graphics_mode(op_red,op_green,op_blue);
    op_red_ELT = (jshort) op_red;
  __env->SetShortArrayRegion(_op_red,0,1,&op_red_ELT);
    op_green_ELT = (jshort) op_green;
  __env->SetShortArrayRegion(_op_green,0,1,&op_green_ELT);
    op_blue_ELT = (jshort) op_blue;
  __env->SetShortArrayRegion(_op_blue,0,1,&op_blue_ELT);
    return (jshort) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jshort) 0;
}

JNIEXPORT jshort JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1graphics_1mode__(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    kdu_int16 Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->get_graphics_mode();
    return (jshort) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jshort) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1geometry(JNIEnv *__env, jobject _self, jdoubleArray _presentation_width, jdoubleArray _presentation_height, jdoubleArray _matrix, jboolean _for_movie)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    jdouble presentation_width_ELT; __env->GetDoubleArrayRegion(_presentation_width,0,1,&presentation_width_ELT);
    double presentation_width = (double) presentation_width_ELT;
    jdouble presentation_height_ELT; __env->GetDoubleArrayRegion(_presentation_height,0,1,&presentation_height_ELT);
    double presentation_height = (double) presentation_height_ELT;
    double *matrix = NULL;
    jdouble *matrix_ELTS = NULL;
    if (_matrix != NULL)
      {
        matrix_ELTS = __env->GetDoubleArrayElements(_matrix,NULL);
        matrix = (double *) matrix_ELTS;
      }
    bool for_movie = (_for_movie)?true:false;
    try { // So we can clean up temporary arrays
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    self->get_geometry(presentation_width,presentation_height,matrix,for_movie);
    } catch (...) {
    if (_matrix != NULL)
      {
        __env->ReleaseDoubleArrayElements(_matrix,matrix_ELTS,0);
      }
    throw;
    }
    presentation_width_ELT = (jdouble) presentation_width;
  __env->SetDoubleArrayRegion(_presentation_width,0,1,&presentation_width_ELT);
    presentation_height_ELT = (jdouble) presentation_height;
  __env->SetDoubleArrayRegion(_presentation_height,0,1,&presentation_height_ELT);
    if (_matrix != NULL)
      {
        __env->ReleaseDoubleArrayElements(_matrix,matrix_ELTS,0);
      }
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1cardinal_1geometry(JNIEnv *__env, jobject _self, jobject _pre_dims, jbooleanArray _transpose, jbooleanArray _vflip, jbooleanArray _hflip, jboolean _for_movie)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Kdu_dims_CLS==NULL)
      Kdu_dims_LOADER(__env);
    kdu_dims *pre_dims = (kdu_dims *)
      _kdu_long_to_addr(__env->GetLongField(_pre_dims,Kdu_dims_PTR) & ~((jlong) 1));
    jboolean transpose_ELT; __env->GetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    bool transpose = (transpose_ELT)?true:false;
    jboolean vflip_ELT; __env->GetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    bool vflip = (vflip_ELT)?true:false;
    jboolean hflip_ELT; __env->GetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
    bool hflip = (hflip_ELT)?true:false;
    bool for_movie = (_for_movie)?true:false;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    self->get_cardinal_geometry(*pre_dims,transpose,vflip,hflip,for_movie);
    transpose_ELT = (jboolean) transpose;
  __env->SetBooleanArrayRegion(_transpose,0,1,&transpose_ELT);
    vflip_ELT = (jboolean) vflip;
  __env->SetBooleanArrayRegion(_vflip,0,1,&vflip_ELT);
    hflip_ELT = (jboolean) hflip;
  __env->SetBooleanArrayRegion(_hflip,0,1,&hflip_ELT);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1dimensions(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_dimensions_CLS==NULL)
      Jp2_dimensions_LOADER(__env);
    jp2_dimensions Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_dimensions();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_dimensions_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_dimensions_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1video_1source_Get_1stream_1idx(JNIEnv *__env, jobject _self, jint _field_idx)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int field_idx = (int) _field_idx;
    int Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->get_stream_idx(field_idx);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1source_Access_1image_1box(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    jp2_input_box *Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->access_image_box();
    jobject _Result = NULL;
    if (Result != NULL)
      {
        _Result = __env->AllocObject(Jp2_input_box_CLS);
        __env->SetLongField(_Result,Jp2_input_box_PTR,(jlong) _addr_to_kdu_long(Result));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jint JNICALL Java_kdu_1jni_Mj2_1video_1source_Open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jobject _input_box, jobject _env)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    if (Jp2_input_box_CLS==NULL)
      Jp2_input_box_LOADER(__env);
    if (Kdu_thread_env_CLS==NULL)
      Kdu_thread_env_LOADER(__env);
    int field_idx = (int) _field_idx;
    jp2_input_box *input_box = (jp2_input_box *)
      _kdu_long_to_addr((_input_box==NULL)?((jlong) 0):(__env->GetLongField(_input_box,Jp2_input_box_PTR) & ~((jlong) 1)));
    kdu_thread_env *env = (kdu_thread_env *)
      _kdu_long_to_addr((_env==NULL)?((jlong) 0):(__env->GetLongField(_env,Kdu_thread_env_PTR) & ~((jlong) 1)));
    int Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->open_stream(field_idx,input_box,env);
    return (jint) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jint) 0;
}

JNIEXPORT jboolean JNICALL Java_kdu_1jni_Mj2_1video_1source_Can_1open_1stream(JNIEnv *__env, jobject _self, jint _field_idx, jboolean _need_main_header)
{
  try {
    if (Mj2_video_source_CLS==NULL)
      Mj2_video_source_LOADER(__env);
    int field_idx = (int) _field_idx;
    bool need_main_header = (_need_main_header)?true:false;
    bool Result;
    mj2_video_source *self = (mj2_video_source *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_source_PTR) & ~((jlong) 1));
    Result = self->can_open_stream(field_idx,need_main_header);
    return (jboolean) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jboolean) 0;
}

/*****************************************************************************/
/*                             Mj2_video_target                              */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Mj2_video_target_CLS != NULL) return;
  try {
    Mj2_video_target_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Mj2_video_target_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Mj2_video_target_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        mj2_video_target *self = (mj2_video_target *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Mj2_1video_1target_Get_1track_1idx(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    Result = self->get_track_idx();
    return (jlong) Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return (jlong) 0;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1compositing_1order(JNIEnv *__env, jobject _self, jshort _layer_idx)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_int16 layer_idx = (kdu_int16) _layer_idx;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_compositing_order(layer_idx);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1graphics_1mode(JNIEnv *__env, jobject _self, jshort _graphics_mode, jshort _op_red, jshort _op_green, jshort _op_blue)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    kdu_int16 op_red = (kdu_int16) _op_red;
    kdu_int16 op_green = (kdu_int16) _op_green;
    kdu_int16 op_blue = (kdu_int16) _op_blue;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_graphics_mode(graphics_mode,op_red,op_green,op_blue);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1colour(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_colour_CLS==NULL)
      Jp2_colour_LOADER(__env);
    jp2_colour Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    Result = self->access_colour();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_colour_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_colour_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1palette(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_palette_CLS==NULL)
      Jp2_palette_LOADER(__env);
    jp2_palette Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    Result = self->access_palette();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_palette_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_palette_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1channels(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_channels_CLS==NULL)
      Jp2_channels_LOADER(__env);
    jp2_channels Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    Result = self->access_channels();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_channels_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_channels_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT jobject JNICALL Java_kdu_1jni_Mj2_1video_1target_Access_1resolution(JNIEnv *__env, jobject _self)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    if (Jp2_resolution_CLS==NULL)
      Jp2_resolution_LOADER(__env);
    jp2_resolution Result;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    Result = self->access_resolution();
    jobject _Result = NULL;
      {
        _Result = __env->AllocObject(Jp2_resolution_CLS);
        void *Result_S = *((void **)(&(Result)));
          __env->SetLongField(_Result,Jp2_resolution_PTR,(jlong) _addr_to_kdu_long(Result_S));
      }
    return _Result;
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
  return NULL;
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1timescale(JNIEnv *__env, jobject _self, jlong _ticks_per_second)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 ticks_per_second = (kdu_uint32) _ticks_per_second;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_timescale(ticks_per_second);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1field_1order(JNIEnv *__env, jobject _self, jint _order)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_field_order order = (kdu_field_order) _order;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_field_order(order);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1max_1frames_1per_1chunk(JNIEnv *__env, jobject _self, jlong _max_frames)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_uint32 max_frames = (kdu_uint32) _max_frames;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_max_frames_per_chunk(max_frames);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

JNIEXPORT void JNICALL Java_kdu_1jni_Mj2_1video_1target_Set_1frame_1period(JNIEnv *__env, jobject _self, jlong _num_ticks)
{
  try {
    if (Mj2_video_target_CLS==NULL)
      Mj2_video_target_LOADER(__env);
    kdu_long num_ticks = (kdu_long) _num_ticks;
    mj2_video_target *self = (mj2_video_target *)
      _kdu_long_to_addr(__env->GetLongField(_self,Mj2_video_target_PTR) & ~((jlong) 1));
    self->set_frame_period(num_ticks);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {checkForJavaException(__env,false);}
}

/*****************************************************************************/
/*                                Org_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Org_params_CLS != NULL) return;
  try {
    Org_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Org_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Org_params_CLS==NULL)
      Org_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Org_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Org_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        org_params *self = (org_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Org_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    org_params *self =
      new org_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Poc_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Poc_params_CLS != NULL) return;
  try {
    Poc_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Poc_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Poc_params_CLS==NULL)
      Poc_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Poc_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Poc_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        poc_params *self = (poc_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Poc_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    poc_params *self =
      new poc_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Qcd_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Qcd_params_CLS != NULL) return;
  try {
    Qcd_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Qcd_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Qcd_params_CLS==NULL)
      Qcd_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Qcd_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Qcd_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        qcd_params *self = (qcd_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Qcd_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    qcd_params *self =
      new qcd_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Rgn_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Rgn_params_CLS != NULL) return;
  try {
    Rgn_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Rgn_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Rgn_params_CLS==NULL)
      Rgn_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Rgn_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Rgn_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        rgn_params *self = (rgn_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Rgn_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    rgn_params *self =
      new rgn_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}

/*****************************************************************************/
/*                                Siz_params                                 */
/*****************************************************************************/

JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1init_1class(JNIEnv *__env, jclass this_class)
{
  if (Siz_params_CLS != NULL) return;
  try {
    Siz_params_LOADER(__env);
  } catch(...) {};
}

JNIEXPORT void JNICALL Java_kdu_1jni_Siz_1params_Native_1destroy(JNIEnv *__env, jobject _self)
{
    if (Siz_params_CLS==NULL)
      Siz_params_LOADER(__env);
    jlong self_ref = __env->GetLongField(_self,Siz_params_PTR);
    if (self_ref == 0) return;
    __env->SetLongField(_self,Siz_params_PTR,0);
    if ((self_ref & ((jlong) 1)) != 0)
      {
        siz_params *self = (siz_params *) _kdu_long_to_addr(self_ref - ((jlong) 1));
        delete self;
      }
}

JNIEXPORT jlong JNICALL Java_kdu_1jni_Siz_1params_Native_1create(JNIEnv *__env, jclass this_class)
{
  try {
    siz_params *self =
      new siz_params();
    return ((jlong) _addr_to_kdu_long(self)) | ((jlong) 1);
  } catch(std::bad_alloc) {checkForJavaException(__env,true);}
  catch(...) {};
  return (jlong) 0;
}
