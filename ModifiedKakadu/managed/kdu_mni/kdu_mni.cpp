// This file has been automatically generated by "kdu_hyperdoc"
// Do not edit manually.
// Copyright 2001, David Taubman, The University of New South Wales (UNSW)
#include "../kdu_aux/kdu_aux.h"
#include "kdu_mni.h"

#include <vcclr.h>

namespace kdu_mni {
  /* ===================================== */
  // Derived versions of unmanaged classes
  /* ===================================== */

  //---------------------------------------------------
  // Delegator for class: kdu_cache
  class _mni_delegator__kdu_cache : public _aux_delegator__kdu_cache {
  private:
    gcroot<Ckdu_cache ^> _owner_;
  public:
    _mni_delegator__kdu_cache(Ckdu_cache ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual void acquire_lock();
    virtual void release_lock();
  };

  void _mni_delegator__kdu_cache::acquire_lock()
  {
    try {
      _owner_->acquire_lock();
      return;
    } catch (...) { }
    throw (int) 0;
  }

  void _mni_delegator__kdu_cache::release_lock()
  {
    try {
      _owner_->release_lock();
      return;
    } catch (...) { }
    throw (int) 0;
  }

  //---------------------------------------------------
  // Delegator for class: kdu_client_notifier
  class _mni_delegator__kdu_client_notifier : public _aux_delegator__kdu_client_notifier {
  private:
    gcroot<Ckdu_client_notifier ^> _owner_;
  public:
    _mni_delegator__kdu_client_notifier(Ckdu_client_notifier ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual void notify();
  };

  void _mni_delegator__kdu_client_notifier::notify()
  {
    try {
      _owner_->notify();
      return;
    } catch (...) { }
    throw (int) 0;
  }

  //---------------------------------------------------
  // Delegator for class: kdu_compressed_source_nonnative
  class _mni_delegator__kdu_compressed_source_nonnative : public _aux_delegator__kdu_compressed_source_nonnative {
  private:
    gcroot<Ckdu_compressed_source_nonnative ^> _owner_;
  public:
    _mni_delegator__kdu_compressed_source_nonnative(Ckdu_compressed_source_nonnative ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual int get_capabilities();
    virtual bool seek(kdu_long offset);
    virtual kdu_long get_pos();
    virtual bool set_tileheader_scope(int tnum, int num_tiles);
    virtual bool set_precinct_scope(kdu_long unique_id);
    virtual int post_read(int num_bytes);
  };

  int _mni_delegator__kdu_compressed_source_nonnative::get_capabilities()
  {
    try {
      Int32 _Result;
      _Result = _owner_->get_capabilities();
      return (int) _Result;
    } catch (...) { }
    throw (int) 0;
    return (int) 0;
  }

  bool _mni_delegator__kdu_compressed_source_nonnative::seek(kdu_long offset)
  {
    try {
      Int64 _offset = (Int64) offset;
      Boolean _Result;
      _Result = _owner_->seek(_offset);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  kdu_long _mni_delegator__kdu_compressed_source_nonnative::get_pos()
  {
    try {
      Int64 _Result;
      _Result = _owner_->get_pos();
      return (kdu_long) _Result;
    } catch (...) { }
    throw (int) 0;
    return (kdu_long) 0;
  }

  bool _mni_delegator__kdu_compressed_source_nonnative::set_tileheader_scope(int tnum, int num_tiles)
  {
    try {
      Int32 _tnum = (Int32) tnum;
      Int32 _num_tiles = (Int32) num_tiles;
      Boolean _Result;
      _Result = _owner_->set_tileheader_scope(_tnum,_num_tiles);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  bool _mni_delegator__kdu_compressed_source_nonnative::set_precinct_scope(kdu_long unique_id)
  {
    try {
      Int64 _unique_id = (Int64) unique_id;
      Boolean _Result;
      _Result = _owner_->set_precinct_scope(_unique_id);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  int _mni_delegator__kdu_compressed_source_nonnative::post_read(int num_bytes)
  {
    try {
      Int32 _num_bytes = (Int32) num_bytes;
      Int32 _Result;
      _Result = _owner_->post_read(_num_bytes);
      return (int) _Result;
    } catch (...) { }
    throw (int) 0;
    return (int) 0;
  }

  //---------------------------------------------------
  // Delegator for class: kdu_compressed_target_nonnative
  class _mni_delegator__kdu_compressed_target_nonnative : public _aux_delegator__kdu_compressed_target_nonnative {
  private:
    gcroot<Ckdu_compressed_target_nonnative ^> _owner_;
  public:
    _mni_delegator__kdu_compressed_target_nonnative(Ckdu_compressed_target_nonnative ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual bool start_rewrite(kdu_long backtrack);
    virtual bool end_rewrite();
    virtual void set_target_size(kdu_long num_bytes);
    virtual bool post_write(int num_bytes);
  };

  bool _mni_delegator__kdu_compressed_target_nonnative::start_rewrite(kdu_long backtrack)
  {
    try {
      Int64 _backtrack = (Int64) backtrack;
      Boolean _Result;
      _Result = _owner_->start_rewrite(_backtrack);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  bool _mni_delegator__kdu_compressed_target_nonnative::end_rewrite()
  {
    try {
      Boolean _Result;
      _Result = _owner_->end_rewrite();
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  void _mni_delegator__kdu_compressed_target_nonnative::set_target_size(kdu_long num_bytes)
  {
    try {
      Int64 _num_bytes = (Int64) num_bytes;
      _owner_->set_target_size(_num_bytes);
      return;
    } catch (...) { }
    throw (int) 0;
  }

  bool _mni_delegator__kdu_compressed_target_nonnative::post_write(int num_bytes)
  {
    try {
      Int32 _num_bytes = (Int32) num_bytes;
      Boolean _Result;
      _Result = _owner_->post_write(_num_bytes);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  //---------------------------------------------------
  // Delegator for class: kdu_message
  class _mni_delegator__kdu_message : public _aux_delegator__kdu_message {
  private:
    gcroot<Ckdu_message ^> _owner_;
  public:
    _mni_delegator__kdu_message(Ckdu_message ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual void put_text(const char * string);
    virtual void flush(bool end_of_message);
    virtual void start_message();
  };

  void _mni_delegator__kdu_message::put_text(const char * string)
  {
    try {
      String ^_string = nullptr;
      if (string != NULL)
       _string = gcnew String((char *) string);
      _owner_->put_text(_string);
      return;
    } catch (...) { }
    throw (int) 0;
  }

  void _mni_delegator__kdu_message::flush(bool end_of_message)
  {
    try {
      Boolean _end_of_message = (Boolean) end_of_message;
      _owner_->flush(_end_of_message);
      return;
    } catch (...) { }
    throw (int) 0;
  }

  void _mni_delegator__kdu_message::start_message()
  {
    try {
      _owner_->start_message();
      return;
    } catch (...) { }
    throw (int) 0;
  }

  //---------------------------------------------------
  // Delegator for class: kdu_region_compositor
  class _mni_delegator__kdu_region_compositor : public _aux_delegator__kdu_region_compositor {
  private:
    gcroot<Ckdu_region_compositor ^> _owner_;
  public:
    _mni_delegator__kdu_region_compositor(Ckdu_region_compositor ^ _owner_)
      { this->_owner_ = _owner_; }
    virtual bool custom_paint_overlay(kdu_compositor_buf *buffer, kdu_dims buffer_region, kdu_dims bounding_region, int codestream_idx, jpx_metanode node, int painting_param, kdu_coords image_offset, kdu_coords subsampling, bool transpose, bool vflip, bool hflip, kdu_coords expansion_numerator, kdu_coords expansion_denominator, kdu_coords compositing_offset);
    virtual kdu_compositor_buf *allocate_buffer(kdu_coords min_size, kdu_coords &actual_size, bool read_access_required);
    virtual void delete_buffer(kdu_compositor_buf *buf);
  };

  bool _mni_delegator__kdu_region_compositor::custom_paint_overlay(kdu_compositor_buf *buffer, kdu_dims buffer_region, kdu_dims bounding_region, int codestream_idx, jpx_metanode node, int painting_param, kdu_coords image_offset, kdu_coords subsampling, bool transpose, bool vflip, bool hflip, kdu_coords expansion_numerator, kdu_coords expansion_denominator, kdu_coords compositing_offset)
  {
    try {
      Ckdu_compositor_buf ^_buffer = nullptr;
      if (buffer != NULL)
        _buffer = gcnew Ckdu_compositor_buf(buffer);
      kdu_dims *_BUF_buffer_region = new kdu_dims; *_BUF_buffer_region = buffer_region;
      Ckdu_dims ^_buffer_region = gcnew Ckdu_dims(_BUF_buffer_region);
      _buffer_region->_natively_owned = false;
      kdu_dims *_BUF_bounding_region = new kdu_dims; *_BUF_bounding_region = bounding_region;
      Ckdu_dims ^_bounding_region = gcnew Ckdu_dims(_BUF_bounding_region);
      _bounding_region->_natively_owned = false;
      Int32 _codestream_idx = (Int32) codestream_idx;
      Cjpx_metanode ^_node = gcnew Cjpx_metanode;
    _node->_kval = IntPtr(*((void **)(&node)));
      Int32 _painting_param = (Int32) painting_param;
      kdu_coords *_BUF_image_offset = new kdu_coords; *_BUF_image_offset = image_offset;
      Ckdu_coords ^_image_offset = gcnew Ckdu_coords(_BUF_image_offset);
      _image_offset->_natively_owned = false;
      kdu_coords *_BUF_subsampling = new kdu_coords; *_BUF_subsampling = subsampling;
      Ckdu_coords ^_subsampling = gcnew Ckdu_coords(_BUF_subsampling);
      _subsampling->_natively_owned = false;
      Boolean _transpose = (Boolean) transpose;
      Boolean _vflip = (Boolean) vflip;
      Boolean _hflip = (Boolean) hflip;
      kdu_coords *_BUF_expansion_numerator = new kdu_coords; *_BUF_expansion_numerator = expansion_numerator;
      Ckdu_coords ^_expansion_numerator = gcnew Ckdu_coords(_BUF_expansion_numerator);
      _expansion_numerator->_natively_owned = false;
      kdu_coords *_BUF_expansion_denominator = new kdu_coords; *_BUF_expansion_denominator = expansion_denominator;
      Ckdu_coords ^_expansion_denominator = gcnew Ckdu_coords(_BUF_expansion_denominator);
      _expansion_denominator->_natively_owned = false;
      kdu_coords *_BUF_compositing_offset = new kdu_coords; *_BUF_compositing_offset = compositing_offset;
      Ckdu_coords ^_compositing_offset = gcnew Ckdu_coords(_BUF_compositing_offset);
      _compositing_offset->_natively_owned = false;
      Boolean _Result;
      _Result = _owner_->custom_paint_overlay(_buffer,_buffer_region,_bounding_region,_codestream_idx,_node,_painting_param,_image_offset,_subsampling,_transpose,_vflip,_hflip,_expansion_numerator,_expansion_denominator,_compositing_offset);
      return (bool) _Result;
    } catch (...) { }
    throw (int) 0;
    return (bool) 0;
  }

  kdu_compositor_buf *_mni_delegator__kdu_region_compositor::allocate_buffer(kdu_coords min_size, kdu_coords &actual_size, bool read_access_required)
  {
    try {
      kdu_coords *_BUF_min_size = new kdu_coords; *_BUF_min_size = min_size;
      Ckdu_coords ^_min_size = gcnew Ckdu_coords(_BUF_min_size);
      _min_size->_natively_owned = false;
      Ckdu_coords ^_actual_size = gcnew Ckdu_coords(&actual_size);
      Boolean _read_access_required = (Boolean) read_access_required;
      Ckdu_compositor_buf ^_Result;
      _Result = _owner_->allocate_buffer(_min_size,_actual_size,_read_access_required);
      return ((_Result==nullptr)?NULL:(_Result->_get_kref()));
    } catch (...) { }
    throw (int) 0;
    return NULL;
  }

  void _mni_delegator__kdu_region_compositor::delete_buffer(kdu_compositor_buf *buf)
  {
    try {
      Ckdu_compositor_buf ^_buf = nullptr;
      if (buf != NULL)
        _buf = gcnew Ckdu_compositor_buf(buf);
      _owner_->delete_buffer(_buf);
      return;
    } catch (...) { }
    throw (int) 0;
  }

  /* ===================================== */
  // Managed Class Implementation
  /* ===================================== */

  //---------------------------------------------------
  // Managed Class: Ckdu_global_funcs
  Int32 Ckdu_global_funcs::ceil_ratio(Int32 _num, Int32 _den)
  {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = ::ceil_ratio(num,den);
    return Result;
  }
  Int32 Ckdu_global_funcs::floor_ratio(Int32 _num, Int32 _den)
  {
    int num = (int) _num;
    int den = (int) _den;
    int Result;
    Result = ::floor_ratio(num,den);
    return Result;
  }
  Int64 Ckdu_global_funcs::jp2_4cc_to_int(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    kdu_uint32 Result;
    try { // So we can clean up temporary arrays
    Result = ::jp2_4cc_to_int(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return Result;
  }
  Boolean Ckdu_global_funcs::jp2_is_superbox(Int64 _box_type)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    Result = ::jp2_is_superbox(box_type);
    return Result;
  }
  void Ckdu_global_funcs::kdu_convert_rgb_to_ycc(Ckdu_line_buf ^_c1, Ckdu_line_buf ^_c2, Ckdu_line_buf ^_c3)
  {
    kdu_line_buf &c1 = *(_c1->_get_kref());
    kdu_line_buf &c2 = *(_c2->_get_kref());
    kdu_line_buf &c3 = *(_c3->_get_kref());
    ::kdu_convert_rgb_to_ycc(c1,c2,c3);
  }
  void Ckdu_global_funcs::kdu_convert_ycc_to_rgb(Ckdu_line_buf ^_c1, Ckdu_line_buf ^_c2, Ckdu_line_buf ^_c3, Int32 _width)
  {
    kdu_line_buf &c1 = *(_c1->_get_kref());
    kdu_line_buf &c2 = *(_c2->_get_kref());
    kdu_line_buf &c3 = *(_c3->_get_kref());
    int width = (int) _width;
    ::kdu_convert_ycc_to_rgb(c1,c2,c3,width);
  }
  void Ckdu_global_funcs::kdu_convert_ycc_to_rgb(Ckdu_line_buf ^_c1, Ckdu_line_buf ^_c2, Ckdu_line_buf ^_c3)
  {
    kdu_line_buf &c1 = *(_c1->_get_kref());
    kdu_line_buf &c2 = *(_c2->_get_kref());
    kdu_line_buf &c3 = *(_c3->_get_kref());
    ::kdu_convert_ycc_to_rgb(c1,c2,c3);
  }
  void Ckdu_global_funcs::kdu_customize_errors(Ckdu_message ^_handler)
  {
    kdu_message *handler = ((_handler==nullptr)?NULL:(_handler->_get_kref()));
    ::kdu_customize_errors(handler);
  }
  void Ckdu_global_funcs::kdu_customize_text(String ^ _context, Int64 _id, String ^ _lead_in, String ^ _text)
  {
    char * context = NULL;
    if (_context != nullptr)
      {
        context = new char[(_context->Length+1)*2];
        cli::pin_ptr<const wchar_t> context_W = PtrToStringChars(_context);
        wcstombs(context,context_W,(_context->Length+1)*2);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    char * lead_in = NULL;
    if (_lead_in != nullptr)
      {
        lead_in = new char[(_lead_in->Length+1)*2];
        cli::pin_ptr<const wchar_t> lead_in_W = PtrToStringChars(_lead_in);
        wcstombs(lead_in,lead_in_W,(_lead_in->Length+1)*2);
      }
    char * text = NULL;
    if (_text != nullptr)
      {
        text = new char[(_text->Length+1)*2];
        cli::pin_ptr<const wchar_t> text_W = PtrToStringChars(_text);
        wcstombs(text,text_W,(_text->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    ::kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (context != NULL)
      delete[] context;
    if (lead_in != NULL)
      delete[] lead_in;
    if (text != NULL)
      delete[] text;
    throw;
    }
    if (context != NULL)
      delete[] context;
    if (lead_in != NULL)
      delete[] lead_in;
    if (text != NULL)
      delete[] text;
  }
  void Ckdu_global_funcs::kdu_customize_text(String ^ _context, Int64 _id, cli::array<Int32> ^_lead_in, cli::array<Int32> ^_text)
  {
    char * context = NULL;
    if (_context != nullptr)
      {
        context = new char[(_context->Length+1)*2];
        cli::pin_ptr<const wchar_t> context_W = PtrToStringChars(_context);
        wcstombs(context,context_W,(_context->Length+1)*2);
      }
    kdu_uint32 id = (kdu_uint32) _id;
    kdu_uint16 *lead_in = NULL;
    if (_lead_in != nullptr)
      {
        int _len_ = _lead_in->Length;
        lead_in = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          lead_in[_n_] = (kdu_uint16) _lead_in[_n_];
      }
    kdu_uint16 *text = NULL;
    if (_text != nullptr)
      {
        int _len_ = _text->Length;
        text = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          text[_n_] = (kdu_uint16) _text[_n_];
      }
    try { // So we can clean up temporary arrays
    ::kdu_customize_text(context,id,lead_in,text);
    } catch (...) {
    if (context != NULL)
      delete[] context;
    if (lead_in != NULL)
      delete[] lead_in;
    if (text != NULL)
      delete[] text;
    throw;
    }
    if (_lead_in != nullptr)
      {
        int _len_ = _lead_in->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _lead_in[_n_] = (Int32) lead_in[_n_];
      }
    if (_text != nullptr)
      {
        int _len_ = _text->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _text[_n_] = (Int32) text[_n_];
      }
    if (context != NULL)
      delete[] context;
    if (lead_in != NULL)
      delete[] lead_in;
    if (text != NULL)
      delete[] text;
  }
  void Ckdu_global_funcs::kdu_customize_warnings(Ckdu_message ^_handler)
  {
    kdu_message *handler = ((_handler==nullptr)?NULL:(_handler->_get_kref()));
    ::kdu_customize_warnings(handler);
  }
  Int32 Ckdu_global_funcs::kdu_fseek(IntPtr _fp, Int64 _offset)
  {
    FILE *fp = (FILE *) _fp.ToPointer();
    kdu_long offset = (kdu_long) _offset;
    int Result;
    Result = ::kdu_fseek(fp,offset);
    return Result;
  }
  Int32 Ckdu_global_funcs::kdu_fseek(IntPtr _fp, Int64 _offset, Int32 _origin)
  {
    FILE *fp = (FILE *) _fp.ToPointer();
    kdu_long offset = (kdu_long) _offset;
    int origin = (int) _origin;
    int Result;
    Result = ::kdu_fseek(fp,offset,origin);
    return Result;
  }
  Int64 Ckdu_global_funcs::kdu_ftell(IntPtr _fp)
  {
    FILE *fp = (FILE *) _fp.ToPointer();
    kdu_long Result;
    Result = ::kdu_ftell(fp);
    return Result;
  }
  String ^ Ckdu_global_funcs::kdu_get_core_version()
  {
    const char * Result;
    Result = ::kdu_get_core_version();
    return gcnew String((char *) Result);
  }
  Int32 Ckdu_global_funcs::kdu_get_num_processors()
  {
    int Result;
    Result = ::kdu_get_num_processors();
    return Result;
  }
  void Ckdu_global_funcs::kdu_print_error(String ^ _message)
  {
    char * message = NULL;
    if (_message != nullptr)
      {
        message = new char[(_message->Length+1)*2];
        cli::pin_ptr<const wchar_t> message_W = PtrToStringChars(_message);
        wcstombs(message,message_W,(_message->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    ::kdu_print_error(message);
    } catch (...) {
    if (message != NULL)
      delete[] message;
    throw;
    }
    if (message != NULL)
      delete[] message;
  }
  void Ckdu_global_funcs::kdu_print_warning(String ^ _message)
  {
    char * message = NULL;
    if (_message != nullptr)
      {
        message = new char[(_message->Length+1)*2];
        cli::pin_ptr<const wchar_t> message_W = PtrToStringChars(_message);
        wcstombs(message,message_W,(_message->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    ::kdu_print_warning(message);
    } catch (...) {
    if (message != NULL)
      delete[] message;
    throw;
    }
    if (message != NULL)
      delete[] message;
  }
  Int32 Ckdu_global_funcs::long_ceil_ratio(Int64 _num, Int64 _den)
  {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = ::long_ceil_ratio(num,den);
    return Result;
  }
  Int32 Ckdu_global_funcs::long_floor_ratio(Int64 _num, Int64 _den)
  {
    kdu_long num = (kdu_long) _num;
    kdu_long den = (kdu_long) _den;
    int Result;
    Result = ::long_floor_ratio(num,den);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cads_params
  Cads_params::Cads_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new ads_params();
  }
  void Cads_params::Do_dispose(bool in_dispose)
  {
    ads_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Catk_params
  Catk_params::Catk_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new atk_params();
  }
  void Catk_params::Do_dispose(bool in_dispose)
  {
    atk_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ccod_params
  Ccod_params::Ccod_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new cod_params();
  }
  Boolean Ccod_params::is_valid_decomp_terminator(Int32 _val)
  {
    int val = (int) _val;
    bool Result;
    Result = cod_params::is_valid_decomp_terminator(val);
    return Result;
  }
  Int32 Ccod_params::transpose_decomp(Int32 _val)
  {
    int val = (int) _val;
    int Result;
    Result = cod_params::transpose_decomp(val);
    return Result;
  }
  Int32 Ccod_params::expand_decomp_bands(Int32 _decomp_val, cli::array<Int16> ^_band_descriptors)
  {
    int decomp_val = (int) _decomp_val;
    cli::pin_ptr<Int16> band_descriptors = ((_band_descriptors==nullptr)?nullptr:(&_band_descriptors[0]));
    int Result;
    Result = cod_params::expand_decomp_bands(decomp_val,band_descriptors);
    return Result;
  }
  void Ccod_params::get_max_decomp_levels(Int32 _decomp_val, cli::interior_ptr<Int32> _max_horizontal_levels, cli::interior_ptr<Int32> _max_vertical_levels)
  {
    int decomp_val = (int) _decomp_val;
    int max_horizontal_levels = (int) *_max_horizontal_levels;
    int max_vertical_levels = (int) *_max_vertical_levels;
    cod_params::get_max_decomp_levels(decomp_val,max_horizontal_levels,max_vertical_levels);
    *_max_horizontal_levels = max_horizontal_levels;
    *_max_vertical_levels = max_vertical_levels;
  }
  void Ccod_params::Do_dispose(bool in_dispose)
  {
    cod_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ccrg_params
  Ccrg_params::Ccrg_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new crg_params();
  }
  void Ccrg_params::Do_dispose(bool in_dispose)
  {
    crg_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cdfs_params
  Cdfs_params::Cdfs_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new dfs_params();
  }
  void Cdfs_params::Do_dispose(bool in_dispose)
  {
    dfs_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_channels
  Boolean Cjp2_channels::exists()
  {
    bool Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_channels::copy(Cjp2_channels ^_src)
  {
    jp2_channels src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_channels *)(&src_S));
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::init(Int32 _num_colours)
  {
    int num_colours = (int) _num_colours;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.init(num_colours);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_colour_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx, Int32 _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_colour_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_colour_mapping(colour_idx,codestream_component,lut_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_colour_mapping(Int32 _colour_idx, Int32 _codestream_component)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_colour_mapping(colour_idx,codestream_component);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_opacity_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx, Int32 _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_opacity_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_opacity_mapping(colour_idx,codestream_component,lut_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_opacity_mapping(Int32 _colour_idx, Int32 _codestream_component)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_opacity_mapping(colour_idx,codestream_component);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_premult_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx, Int32 _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    int codestream_idx = (int) _codestream_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_premult_mapping(Int32 _colour_idx, Int32 _codestream_component, Int32 _lut_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    int lut_idx = (int) _lut_idx;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_premult_mapping(colour_idx,codestream_component,lut_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_premult_mapping(Int32 _colour_idx, Int32 _codestream_component)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) _codestream_component;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_premult_mapping(colour_idx,codestream_component);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_channels::set_chroma_key(Int32 _colour_idx, Int32 _key_val)
  {
    int colour_idx = (int) _colour_idx;
    kdu_int32 key_val = (kdu_int32) _key_val;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    _kval_cast.set_chroma_key(colour_idx,key_val);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Cjp2_channels::get_num_colours()
  {
    int Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.get_num_colours();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_channels::get_colour_mapping(Int32 _colour_idx, cli::interior_ptr<Int32> _codestream_component, cli::interior_ptr<Int32> _lut_idx, cli::interior_ptr<Int32> _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) *_codestream_component;
    int lut_idx = (int) *_lut_idx;
    int codestream_idx = (int) *_codestream_idx;
    bool Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.get_colour_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_codestream_component = codestream_component;
    *_lut_idx = lut_idx;
    *_codestream_idx = codestream_idx;
    return Result;
  }
  Boolean Cjp2_channels::get_opacity_mapping(Int32 _colour_idx, cli::interior_ptr<Int32> _codestream_component, cli::interior_ptr<Int32> _lut_idx, cli::interior_ptr<Int32> _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) *_codestream_component;
    int lut_idx = (int) *_lut_idx;
    int codestream_idx = (int) *_codestream_idx;
    bool Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.get_opacity_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_codestream_component = codestream_component;
    *_lut_idx = lut_idx;
    *_codestream_idx = codestream_idx;
    return Result;
  }
  Boolean Cjp2_channels::get_premult_mapping(Int32 _colour_idx, cli::interior_ptr<Int32> _codestream_component, cli::interior_ptr<Int32> _lut_idx, cli::interior_ptr<Int32> _codestream_idx)
  {
    int colour_idx = (int) _colour_idx;
    int codestream_component = (int) *_codestream_component;
    int lut_idx = (int) *_lut_idx;
    int codestream_idx = (int) *_codestream_idx;
    bool Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.get_premult_mapping(colour_idx,codestream_component,lut_idx,codestream_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_codestream_component = codestream_component;
    *_lut_idx = lut_idx;
    *_codestream_idx = codestream_idx;
    return Result;
  }
  Boolean Cjp2_channels::get_chroma_key(Int32 _colour_idx, cli::interior_ptr<Int32> _key_val)
  {
    int colour_idx = (int) _colour_idx;
    kdu_int32 key_val = (kdu_int32) *_key_val;
    bool Result;
    jp2_channels _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_channels *)(&_kval_cast_S));
    Result = _kval_cast.get_chroma_key(colour_idx,key_val);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_key_val = key_val;
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_colour
  Boolean Cjp2_colour::exists()
  {
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_colour::copy(Cjp2_colour ^_src)
  {
    jp2_colour src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_colour *)(&src_S));
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Int32 _space)
  {
    jp2_colour_space space = (jp2_colour_space) _space;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(space);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Int32 _space, Int32 _Lrange, Int32 _Loff, Int32 _Lbits, Int32 _Arange, Int32 _Aoff, Int32 _Abits, Int32 _Brange, Int32 _Boff, Int32 _Bbits, Int64 _illuminant, Int32 _temperature)
  {
    jp2_colour_space space = (jp2_colour_space) _space;
    int Lrange = (int) _Lrange;
    int Loff = (int) _Loff;
    int Lbits = (int) _Lbits;
    int Arange = (int) _Arange;
    int Aoff = (int) _Aoff;
    int Abits = (int) _Abits;
    int Brange = (int) _Brange;
    int Boff = (int) _Boff;
    int Bbits = (int) _Bbits;
    kdu_uint32 illuminant = (kdu_uint32) _illuminant;
    kdu_uint16 temperature = (kdu_uint16) _temperature;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(space,Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Int32 _space, Int32 _Lrange, Int32 _Loff, Int32 _Lbits, Int32 _Arange, Int32 _Aoff, Int32 _Abits, Int32 _Brange, Int32 _Boff, Int32 _Bbits, Int64 _illuminant)
  {
    jp2_colour_space space = (jp2_colour_space) _space;
    int Lrange = (int) _Lrange;
    int Loff = (int) _Loff;
    int Lbits = (int) _Lbits;
    int Arange = (int) _Arange;
    int Aoff = (int) _Aoff;
    int Abits = (int) _Abits;
    int Brange = (int) _Brange;
    int Boff = (int) _Boff;
    int Bbits = (int) _Bbits;
    kdu_uint32 illuminant = (kdu_uint32) _illuminant;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(space,Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Int32 _space, Int32 _Lrange, Int32 _Loff, Int32 _Lbits, Int32 _Arange, Int32 _Aoff, Int32 _Abits, Int32 _Brange, Int32 _Boff, Int32 _Bbits)
  {
    jp2_colour_space space = (jp2_colour_space) _space;
    int Lrange = (int) _Lrange;
    int Loff = (int) _Loff;
    int Lbits = (int) _Lbits;
    int Arange = (int) _Arange;
    int Aoff = (int) _Aoff;
    int Abits = (int) _Abits;
    int Brange = (int) _Brange;
    int Boff = (int) _Boff;
    int Bbits = (int) _Bbits;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(space,Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Byte> ^_icc_profile)
  {
    cli::pin_ptr<Byte> icc_profile = ((_icc_profile==nullptr)?nullptr:(&_icc_profile[0]));
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(icc_profile);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Byte> ^_uuid, Int32 _data_bytes, cli::array<Byte> ^_data)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    int data_bytes = (int) _data_bytes;
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(uuid,data_bytes,data);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Double _gamma, Double _beta, Int32 _num_points)
  {
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(gamma,beta,num_points);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Double _gamma, Double _beta)
  {
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(gamma,beta);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(Double _gamma)
  {
    double gamma = (double) _gamma;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(gamma);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Double> ^_xy_red, cli::array<Double> ^_xy_green, cli::array<Double> ^_xy_blue, Double _gamma, Double _beta, Int32 _num_points, Boolean _reference_is_D50)
  {
    cli::pin_ptr<Double> xy_red = ((_xy_red==nullptr)?nullptr:(&_xy_red[0]));
    cli::pin_ptr<Double> xy_green = ((_xy_green==nullptr)?nullptr:(&_xy_green[0]));
    cli::pin_ptr<Double> xy_blue = ((_xy_blue==nullptr)?nullptr:(&_xy_blue[0]));
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    bool reference_is_D50 = (bool) _reference_is_D50;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(xy_red,xy_green,xy_blue,gamma,beta,num_points,reference_is_D50);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Double> ^_xy_red, cli::array<Double> ^_xy_green, cli::array<Double> ^_xy_blue, Double _gamma, Double _beta, Int32 _num_points)
  {
    cli::pin_ptr<Double> xy_red = ((_xy_red==nullptr)?nullptr:(&_xy_red[0]));
    cli::pin_ptr<Double> xy_green = ((_xy_green==nullptr)?nullptr:(&_xy_green[0]));
    cli::pin_ptr<Double> xy_blue = ((_xy_blue==nullptr)?nullptr:(&_xy_blue[0]));
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    int num_points = (int) _num_points;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(xy_red,xy_green,xy_blue,gamma,beta,num_points);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Double> ^_xy_red, cli::array<Double> ^_xy_green, cli::array<Double> ^_xy_blue, Double _gamma, Double _beta)
  {
    cli::pin_ptr<Double> xy_red = ((_xy_red==nullptr)?nullptr:(&_xy_red[0]));
    cli::pin_ptr<Double> xy_green = ((_xy_green==nullptr)?nullptr:(&_xy_green[0]));
    cli::pin_ptr<Double> xy_blue = ((_xy_blue==nullptr)?nullptr:(&_xy_blue[0]));
    double gamma = (double) _gamma;
    double beta = (double) _beta;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(xy_red,xy_green,xy_blue,gamma,beta);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_colour::init(cli::array<Double> ^_xy_red, cli::array<Double> ^_xy_green, cli::array<Double> ^_xy_blue, Double _gamma)
  {
    cli::pin_ptr<Double> xy_red = ((_xy_red==nullptr)?nullptr:(&_xy_red[0]));
    cli::pin_ptr<Double> xy_green = ((_xy_green==nullptr)?nullptr:(&_xy_green[0]));
    cli::pin_ptr<Double> xy_blue = ((_xy_blue==nullptr)?nullptr:(&_xy_blue[0]));
    double gamma = (double) _gamma;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    _kval_cast.init(xy_red,xy_green,xy_blue,gamma);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Cjp2_colour::get_num_colours()
  {
    int Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_num_colours();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_colour::get_space()
  {
    jp2_colour_space Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_space();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_colour::is_opponent_space()
  {
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.is_opponent_space();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_colour::get_precedence()
  {
    int Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_precedence();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Byte Cjp2_colour::get_approximation_level()
  {
    kdu_byte Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_approximation_level();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  IntPtr Cjp2_colour::get_icc_profile(cli::array<Int32> ^_num_bytes)
  {
    cli::pin_ptr<Int32> num_bytes = ((_num_bytes==nullptr)?nullptr:(&_num_bytes[0]));
    kdu_byte *Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_icc_profile(num_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  IntPtr Cjp2_colour::get_icc_profile()
  {
    kdu_byte *Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_icc_profile();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  Boolean Cjp2_colour::get_lab_params(cli::interior_ptr<Int32> _Lrange, cli::interior_ptr<Int32> _Loff, cli::interior_ptr<Int32> _Lbits, cli::interior_ptr<Int32> _Arange, cli::interior_ptr<Int32> _Aoff, cli::interior_ptr<Int32> _Abits, cli::interior_ptr<Int32> _Brange, cli::interior_ptr<Int32> _Boff, cli::interior_ptr<Int32> _Bbits, cli::interior_ptr<Int64> _illuminant, cli::interior_ptr<Int32> _temperature)
  {
    int Lrange = (int) *_Lrange;
    int Loff = (int) *_Loff;
    int Lbits = (int) *_Lbits;
    int Arange = (int) *_Arange;
    int Aoff = (int) *_Aoff;
    int Abits = (int) *_Abits;
    int Brange = (int) *_Brange;
    int Boff = (int) *_Boff;
    int Bbits = (int) *_Bbits;
    kdu_uint32 illuminant = (kdu_uint32) *_illuminant;
    kdu_uint16 temperature = (kdu_uint16) *_temperature;
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_lab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits,illuminant,temperature);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_Lrange = Lrange;
    *_Loff = Loff;
    *_Lbits = Lbits;
    *_Arange = Arange;
    *_Aoff = Aoff;
    *_Abits = Abits;
    *_Brange = Brange;
    *_Boff = Boff;
    *_Bbits = Bbits;
    *_illuminant = illuminant;
    *_temperature = temperature;
    return Result;
  }
  Boolean Cjp2_colour::get_jab_params(cli::interior_ptr<Int32> _Lrange, cli::interior_ptr<Int32> _Loff, cli::interior_ptr<Int32> _Lbits, cli::interior_ptr<Int32> _Arange, cli::interior_ptr<Int32> _Aoff, cli::interior_ptr<Int32> _Abits, cli::interior_ptr<Int32> _Brange, cli::interior_ptr<Int32> _Boff, cli::interior_ptr<Int32> _Bbits)
  {
    int Lrange = (int) *_Lrange;
    int Loff = (int) *_Loff;
    int Lbits = (int) *_Lbits;
    int Arange = (int) *_Arange;
    int Aoff = (int) *_Aoff;
    int Abits = (int) *_Abits;
    int Brange = (int) *_Brange;
    int Boff = (int) *_Boff;
    int Bbits = (int) *_Bbits;
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_jab_params(Lrange,Loff,Lbits,Arange,Aoff,Abits,Brange,Boff,Bbits);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_Lrange = Lrange;
    *_Loff = Loff;
    *_Lbits = Lbits;
    *_Arange = Arange;
    *_Aoff = Aoff;
    *_Abits = Abits;
    *_Brange = Brange;
    *_Boff = Boff;
    *_Bbits = Bbits;
    return Result;
  }
  Boolean Cjp2_colour::check_cie_default()
  {
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.check_cie_default();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_colour::get_vendor_uuid(cli::array<Byte> ^_uuid)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_vendor_uuid(uuid);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  IntPtr Cjp2_colour::get_vendor_data(cli::array<Int32> ^_num_bytes)
  {
    cli::pin_ptr<Int32> num_bytes = ((_num_bytes==nullptr)?nullptr:(&_num_bytes[0]));
    kdu_byte *Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_vendor_data(num_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  IntPtr Cjp2_colour::get_vendor_data()
  {
    kdu_byte *Result;
    jp2_colour _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_colour *)(&_kval_cast_S));
    Result = _kval_cast.get_vendor_data();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_colour_converter
  Cjp2_colour_converter::Cjp2_colour_converter()
  {
    _natively_owned = false;
    _kref = new jp2_colour_converter();
  }
  void Cjp2_colour_converter::clear()
  {
    _get_kref()->clear();
  }
  Boolean Cjp2_colour_converter::init(Cjp2_colour ^_colour, Boolean _use_wide_gamut, Boolean _prefer_fast_approximations)
  {
    jp2_colour colour;
    void *colour_S = ((_colour==nullptr)?NULL:_colour->_kval.ToPointer());
    colour = *((jp2_colour *)(&colour_S));
    bool use_wide_gamut = (bool) _use_wide_gamut;
    bool prefer_fast_approximations = (bool) _prefer_fast_approximations;
    bool Result;
    Result = _get_kref()->init(colour,use_wide_gamut,prefer_fast_approximations);
    return Result;
  }
  Boolean Cjp2_colour_converter::init(Cjp2_colour ^_colour, Boolean _use_wide_gamut)
  {
    jp2_colour colour;
    void *colour_S = ((_colour==nullptr)?NULL:_colour->_kval.ToPointer());
    colour = *((jp2_colour *)(&colour_S));
    bool use_wide_gamut = (bool) _use_wide_gamut;
    bool Result;
    Result = _get_kref()->init(colour,use_wide_gamut);
    return Result;
  }
  Boolean Cjp2_colour_converter::init(Cjp2_colour ^_colour)
  {
    jp2_colour colour;
    void *colour_S = ((_colour==nullptr)?NULL:_colour->_kval.ToPointer());
    colour = *((jp2_colour *)(&colour_S));
    bool Result;
    Result = _get_kref()->init(colour);
    return Result;
  }
  Boolean Cjp2_colour_converter::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Cjp2_colour_converter::get_wide_gamut()
  {
    bool Result;
    Result = _get_kref()->get_wide_gamut();
    return Result;
  }
  Boolean Cjp2_colour_converter::is_approximate()
  {
    bool Result;
    Result = _get_kref()->is_approximate();
    return Result;
  }
  Boolean Cjp2_colour_converter::is_non_trivial()
  {
    bool Result;
    Result = _get_kref()->is_non_trivial();
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_lum(Ckdu_line_buf ^_line, Int32 _width)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    int width = (int) _width;
    bool Result;
    Result = _get_kref()->convert_lum(line,width);
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_lum(Ckdu_line_buf ^_line)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    bool Result;
    Result = _get_kref()->convert_lum(line);
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_rgb(Ckdu_line_buf ^_red, Ckdu_line_buf ^_green, Ckdu_line_buf ^_blue, Int32 _width)
  {
    kdu_line_buf &red = *(_red->_get_kref());
    kdu_line_buf &green = *(_green->_get_kref());
    kdu_line_buf &blue = *(_blue->_get_kref());
    int width = (int) _width;
    bool Result;
    Result = _get_kref()->convert_rgb(red,green,blue,width);
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_rgb(Ckdu_line_buf ^_red, Ckdu_line_buf ^_green, Ckdu_line_buf ^_blue)
  {
    kdu_line_buf &red = *(_red->_get_kref());
    kdu_line_buf &green = *(_green->_get_kref());
    kdu_line_buf &blue = *(_blue->_get_kref());
    bool Result;
    Result = _get_kref()->convert_rgb(red,green,blue);
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_rgb4(Ckdu_line_buf ^_red, Ckdu_line_buf ^_green, Ckdu_line_buf ^_blue, Ckdu_line_buf ^_extra, Int32 _width)
  {
    kdu_line_buf &red = *(_red->_get_kref());
    kdu_line_buf &green = *(_green->_get_kref());
    kdu_line_buf &blue = *(_blue->_get_kref());
    kdu_line_buf &extra = *(_extra->_get_kref());
    int width = (int) _width;
    bool Result;
    Result = _get_kref()->convert_rgb4(red,green,blue,extra,width);
    return Result;
  }
  Boolean Cjp2_colour_converter::convert_rgb4(Ckdu_line_buf ^_red, Ckdu_line_buf ^_green, Ckdu_line_buf ^_blue, Ckdu_line_buf ^_extra)
  {
    kdu_line_buf &red = *(_red->_get_kref());
    kdu_line_buf &green = *(_green->_get_kref());
    kdu_line_buf &blue = *(_blue->_get_kref());
    kdu_line_buf &extra = *(_extra->_get_kref());
    bool Result;
    Result = _get_kref()->convert_rgb4(red,green,blue,extra);
    return Result;
  }
  void Cjp2_colour_converter::Do_dispose(bool in_dispose)
  {
    jp2_colour_converter *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_data_references
  Boolean Cjp2_data_references::exists()
  {
    bool Result;
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_data_references::add_url(String ^ _url, Int32 _url_idx)
  {
    char * url = NULL;
    if (_url != nullptr)
      {
        url = new char[(_url->Length+1)*2];
        cli::pin_ptr<const wchar_t> url_W = PtrToStringChars(_url);
        wcstombs(url,url_W,(_url->Length+1)*2);
      }
    int url_idx = (int) _url_idx;
    int Result;
    try { // So we can clean up temporary arrays
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.add_url(url,url_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (url != NULL)
      delete[] url;
    throw;
    }
    if (url != NULL)
      delete[] url;
    return Result;
  }
  Int32 Cjp2_data_references::add_url(String ^ _url)
  {
    char * url = NULL;
    if (_url != nullptr)
      {
        url = new char[(_url->Length+1)*2];
        cli::pin_ptr<const wchar_t> url_W = PtrToStringChars(_url);
        wcstombs(url,url_W,(_url->Length+1)*2);
      }
    int Result;
    try { // So we can clean up temporary arrays
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.add_url(url);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (url != NULL)
      delete[] url;
    throw;
    }
    if (url != NULL)
      delete[] url;
    return Result;
  }
  Int32 Cjp2_data_references::get_num_urls()
  {
    int Result;
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.get_num_urls();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_data_references::find_url(String ^ _url)
  {
    char * url = NULL;
    if (_url != nullptr)
      {
        url = new char[(_url->Length+1)*2];
        cli::pin_ptr<const wchar_t> url_W = PtrToStringChars(_url);
        wcstombs(url,url_W,(_url->Length+1)*2);
      }
    int Result;
    try { // So we can clean up temporary arrays
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.find_url(url);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (url != NULL)
      delete[] url;
    throw;
    }
    if (url != NULL)
      delete[] url;
    return Result;
  }
  String ^ Cjp2_data_references::get_url(Int32 _idx)
  {
    int idx = (int) _idx;
    const char * Result;
    jp2_data_references _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_data_references *)(&_kval_cast_S));
    Result = _kval_cast.get_url(idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return gcnew String((char *) Result);
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_dimensions
  Boolean Cjp2_dimensions::exists()
  {
    bool Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_dimensions::copy(Cjp2_dimensions ^_src)
  {
    jp2_dimensions src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_dimensions *)(&src_S));
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::init(Ckdu_coords ^_size, Int32 _num_components, Boolean _unknown_space, Int32 _compression_type)
  {
    kdu_coords size = *(_size->_get_kref());
    int num_components = (int) _num_components;
    bool unknown_space = (bool) _unknown_space;
    int compression_type = (int) _compression_type;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.init(size,num_components,unknown_space,compression_type);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::init(Ckdu_coords ^_size, Int32 _num_components, Boolean _unknown_space)
  {
    kdu_coords size = *(_size->_get_kref());
    int num_components = (int) _num_components;
    bool unknown_space = (bool) _unknown_space;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.init(size,num_components,unknown_space);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::init(Ckdu_coords ^_size, Int32 _num_components)
  {
    kdu_coords size = *(_size->_get_kref());
    int num_components = (int) _num_components;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.init(size,num_components);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::init(Csiz_params ^_siz, Boolean _unknown_space)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    bool unknown_space = (bool) _unknown_space;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.init(siz,unknown_space);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::init(Csiz_params ^_siz)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.init(siz);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::finalize_compatibility(Ckdu_params ^_root)
  {
    kdu_params *root = ((_root==nullptr)?NULL:(_root->_get_kref()));
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.finalize_compatibility(root);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::finalize_compatibility(Cjp2_dimensions ^_src)
  {
    jp2_dimensions src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_dimensions *)(&src_S));
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.finalize_compatibility(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::set_precision(Int32 _component_idx, Int32 _bit_depth, Boolean _is_signed)
  {
    int component_idx = (int) _component_idx;
    int bit_depth = (int) _bit_depth;
    bool is_signed = (bool) _is_signed;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.set_precision(component_idx,bit_depth,is_signed);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::set_precision(Int32 _component_idx, Int32 _bit_depth)
  {
    int component_idx = (int) _component_idx;
    int bit_depth = (int) _bit_depth;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.set_precision(component_idx,bit_depth);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_dimensions::set_ipr_box_available()
  {
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    _kval_cast.set_ipr_box_available();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_coords ^Cjp2_dimensions::get_size()
  {
    kdu_coords Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.get_size();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Int32 Cjp2_dimensions::get_num_components()
  {
    int Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.get_num_components();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_dimensions::colour_space_known()
  {
    bool Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.colour_space_known();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_dimensions::get_bit_depth(Int32 _component_idx)
  {
    int component_idx = (int) _component_idx;
    int Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth(component_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_dimensions::get_signed(Int32 _component_idx)
  {
    int component_idx = (int) _component_idx;
    bool Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.get_signed(component_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_dimensions::get_compression_type()
  {
    int Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.get_compression_type();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_dimensions::is_ipr_box_available()
  {
    bool Result;
    jp2_dimensions _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_dimensions *)(&_kval_cast_S));
    Result = _kval_cast.is_ipr_box_available();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_family_src
  Cjp2_family_src::Cjp2_family_src()
  {
    _natively_owned = false;
    _kref = new jp2_family_src();
  }
  Boolean Cjp2_family_src::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Cjp2_family_src::open(String ^ _fname, Boolean _allow_seeks)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool allow_seeks = (bool) _allow_seeks;
    try { // So we can clean up temporary arrays
    _get_kref()->open(fname,allow_seeks);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  void Cjp2_family_src::open(String ^ _fname)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->open(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  void Cjp2_family_src::open(Ckdu_compressed_source ^_indirect)
  {
    kdu_compressed_source *indirect = ((_indirect==nullptr)?NULL:(_indirect->_get_kref()));
    _get_kref()->open(indirect);
  }
  void Cjp2_family_src::open(Ckdu_cache ^_cache)
  {
    kdu_cache *cache = ((_cache==nullptr)?NULL:(_cache->_get_kref()));
    _get_kref()->open(cache);
  }
  void Cjp2_family_src::close()
  {
    _get_kref()->close();
  }
  Boolean Cjp2_family_src::uses_cache()
  {
    bool Result;
    Result = _get_kref()->uses_cache();
    return Result;
  }
  Boolean Cjp2_family_src::is_top_level_complete()
  {
    bool Result;
    Result = _get_kref()->is_top_level_complete();
    return Result;
  }
  Int32 Cjp2_family_src::get_id()
  {
    int Result;
    Result = _get_kref()->get_id();
    return Result;
  }
  String ^ Cjp2_family_src::get_filename()
  {
    const char * Result;
    Result = _get_kref()->get_filename();
    return gcnew String((char *) Result);
  }
  void Cjp2_family_src::acquire_lock()
  {
    _get_kref()->acquire_lock();
  }
  void Cjp2_family_src::release_lock()
  {
    _get_kref()->release_lock();
  }
  void Cjp2_family_src::Do_dispose(bool in_dispose)
  {
    jp2_family_src *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_family_tgt
  Cjp2_family_tgt::Cjp2_family_tgt()
  {
    _natively_owned = false;
    _kref = new jp2_family_tgt();
  }
  Boolean Cjp2_family_tgt::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Cjp2_family_tgt::open(String ^ _fname)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->open(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  void Cjp2_family_tgt::open(Ckdu_compressed_target ^_indirect)
  {
    kdu_compressed_target *indirect = ((_indirect==nullptr)?NULL:(_indirect->_get_kref()));
    _get_kref()->open(indirect);
  }
  Int64 Cjp2_family_tgt::get_bytes_written()
  {
    kdu_long Result;
    Result = _get_kref()->get_bytes_written();
    return Result;
  }
  void Cjp2_family_tgt::close()
  {
    _get_kref()->close();
  }
  void Cjp2_family_tgt::Do_dispose(bool in_dispose)
  {
    jp2_family_tgt *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_input_box
  Cjp2_input_box::Cjp2_input_box()
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    _natively_owned = false;
    _kref = new jp2_input_box();
  }
  Boolean Cjp2_input_box::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Cjp2_input_box::open(Cjp2_family_src ^_src, Cjp2_locator ^_locator)
  {
    jp2_family_src *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    jp2_locator locator = *(_locator->_get_kref());
    bool Result;
    Result = _get_kref()->open(src,locator);
    return Result;
  }
  Boolean Cjp2_input_box::open(Cjp2_family_src ^_src)
  {
    Cjp2_locator ^_locator = gcnew Cjp2_locator();
    return open(_src,_locator);
  }
  Boolean Cjp2_input_box::open(Cjp2_input_box ^_super_box)
  {
    jp2_input_box *super_box = ((_super_box==nullptr)?NULL:(_super_box->_get_kref()));
    bool Result;
    Result = _get_kref()->open(super_box);
    return Result;
  }
  Boolean Cjp2_input_box::open_next()
  {
    bool Result;
    Result = _get_kref()->open_next();
    return Result;
  }
  Boolean Cjp2_input_box::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Cjp2_input_box::transplant(Cjp2_input_box ^_src)
  {
    jp2_input_box &src = *(_src->_get_kref());
    _get_kref()->transplant(src);
  }
  Boolean Cjp2_input_box::has_caching_source()
  {
    bool Result;
    Result = _get_kref()->has_caching_source();
    return Result;
  }
  Int64 Cjp2_input_box::get_box_type()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_box_type();
    return Result;
  }
  Cjp2_locator ^Cjp2_input_box::get_locator()
  {
    jp2_locator Result;
    Result = _get_kref()->get_locator();
    Cjp2_locator ^_Result = gcnew Cjp2_locator;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Int32 Cjp2_input_box::get_box_header_length()
  {
    int Result;
    Result = _get_kref()->get_box_header_length();
    return Result;
  }
  Int32 Cjp2_input_box::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Int64 Cjp2_input_box::get_remaining_bytes()
  {
    kdu_long Result;
    Result = _get_kref()->get_remaining_bytes();
    return Result;
  }
  Int64 Cjp2_input_box::get_box_bytes()
  {
    kdu_long Result;
    Result = _get_kref()->get_box_bytes();
    return Result;
  }
  Boolean Cjp2_input_box::is_complete()
  {
    bool Result;
    Result = _get_kref()->is_complete();
    return Result;
  }
  Boolean Cjp2_input_box::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Cjp2_input_box::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  Boolean Cjp2_input_box::load_in_memory(Int32 _max_bytes)
  {
    int max_bytes = (int) _max_bytes;
    bool Result;
    Result = _get_kref()->load_in_memory(max_bytes);
    return Result;
  }
  Int32 Cjp2_input_box::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  Boolean Cjp2_input_box::read(cli::interior_ptr<Int64> _dword)
  {
    kdu_uint32 dword = (kdu_uint32) *_dword;
    bool Result;
    Result = _get_kref()->read(dword);
    *_dword = dword;
    return Result;
  }
  Boolean Cjp2_input_box::read(cli::interior_ptr<Int32> _dword)
  {
    kdu_int32 dword = (kdu_int32) *_dword;
    bool Result;
    Result = _get_kref()->read(dword);
    *_dword = dword;
    return Result;
  }
  Boolean Cjp2_input_box::read(cli::interior_ptr<Int16> _word)
  {
    kdu_int16 word = (kdu_int16) *_word;
    bool Result;
    Result = _get_kref()->read(word);
    *_word = word;
    return Result;
  }
  Boolean Cjp2_input_box::read(cli::interior_ptr<Byte> _byte)
  {
    kdu_byte byte = (kdu_byte) *_byte;
    bool Result;
    Result = _get_kref()->read(byte);
    *_byte = byte;
    return Result;
  }
  Boolean Cjp2_input_box::set_tileheader_scope(Int32 _tnum, Int32 _num_tiles)
  {
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    bool Result;
    Result = _get_kref()->set_tileheader_scope(tnum,num_tiles);
    return Result;
  }
  Boolean Cjp2_input_box::set_precinct_scope(Int64 _unique_id)
  {
    kdu_long unique_id = (kdu_long) _unique_id;
    bool Result;
    Result = _get_kref()->set_precinct_scope(unique_id);
    return Result;
  }
  Boolean Cjp2_input_box::set_codestream_scope(Int64 _codestream_id, Boolean _need_main_header)
  {
    kdu_long codestream_id = (kdu_long) _codestream_id;
    bool need_main_header = (bool) _need_main_header;
    bool Result;
    Result = _get_kref()->set_codestream_scope(codestream_id,need_main_header);
    return Result;
  }
  Boolean Cjp2_input_box::set_codestream_scope(Int64 _codestream_id)
  {
    Boolean _need_main_header = (Boolean)(true);
    return set_codestream_scope(_codestream_id,_need_main_header);
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_locator
  Cjp2_locator::Cjp2_locator()
  {
    _natively_owned = false;
    _kref = new jp2_locator();
  }
  Boolean Cjp2_locator::is_null()
  {
    bool Result;
    Result = _get_kref()->is_null();
    return Result;
  }
  Int64 Cjp2_locator::get_file_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_file_pos();
    return Result;
  }
  void Cjp2_locator::set_file_pos(Int64 _pos)
  {
    kdu_long pos = (kdu_long) _pos;
    _get_kref()->set_file_pos(pos);
  }
  void Cjp2_locator::Do_dispose(bool in_dispose)
  {
    jp2_locator *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_output_box
  Cjp2_output_box::Cjp2_output_box()
      : Ckdu_compressed_target((kdu_compressed_target *) NULL)
  {
    _natively_owned = false;
    _kref = new jp2_output_box();
  }
  Boolean Cjp2_output_box::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Cjp2_output_box::open(Cjp2_family_tgt ^_tgt, Int64 _box_type, Boolean _rubber_length)
  {
    jp2_family_tgt *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open(tgt,box_type,rubber_length);
  }
  void Cjp2_output_box::open(Cjp2_family_tgt ^_tgt, Int64 _box_type)
  {
    Boolean _rubber_length = (Boolean)(false);
    open(_tgt,_box_type,_rubber_length);
  }
  void Cjp2_output_box::open(Cjp2_output_box ^_super_box, Int64 _box_type, Boolean _rubber_length)
  {
    jp2_output_box *super_box = ((_super_box==nullptr)?NULL:(_super_box->_get_kref()));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open(super_box,box_type,rubber_length);
  }
  void Cjp2_output_box::open(Cjp2_output_box ^_super_box, Int64 _box_type)
  {
    Boolean _rubber_length = (Boolean)(false);
    open(_super_box,_box_type,_rubber_length);
  }
  void Cjp2_output_box::open(Int64 _box_type)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    _get_kref()->open(box_type);
  }
  void Cjp2_output_box::open_next(Int64 _box_type, Boolean _rubber_length)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open_next(box_type,rubber_length);
  }
  void Cjp2_output_box::open_next(Int64 _box_type)
  {
    Boolean _rubber_length = (Boolean)(false);
    open_next(_box_type,_rubber_length);
  }
  Int64 Cjp2_output_box::get_box_type()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_box_type();
    return Result;
  }
  IntPtr Cjp2_output_box::get_contents(cli::interior_ptr<Int64> _length)
  {
    kdu_long length = (kdu_long) *_length;
    const kdu_byte *Result;
    Result = _get_kref()->get_contents(length);
    *_length = length;
    return IntPtr((void *) Result);
  }
  void Cjp2_output_box::set_rubber_length()
  {
    _get_kref()->set_rubber_length();
  }
  void Cjp2_output_box::set_target_size(Int64 _num_bytes)
  {
    kdu_long num_bytes = (kdu_long) _num_bytes;
    _get_kref()->set_target_size(num_bytes);
  }
  void Cjp2_output_box::write_header_last()
  {
    _get_kref()->write_header_last();
  }
  Boolean Cjp2_output_box::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Boolean Cjp2_output_box::start_rewrite(Int64 _backtrack)
  {
    kdu_long backtrack = (kdu_long) _backtrack;
    bool Result;
    Result = _get_kref()->start_rewrite(backtrack);
    return Result;
  }
  Boolean Cjp2_output_box::end_rewrite()
  {
    bool Result;
    Result = _get_kref()->end_rewrite();
    return Result;
  }
  Boolean Cjp2_output_box::write(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->write(buf,num_bytes);
    return Result;
  }
  Boolean Cjp2_output_box::write(Int64 _dword)
  {
    kdu_uint32 dword = (kdu_uint32) _dword;
    bool Result;
    Result = _get_kref()->write(dword);
    return Result;
  }
  Boolean Cjp2_output_box::write(Int32 _dword)
  {
    kdu_int32 dword = (kdu_int32) _dword;
    bool Result;
    Result = _get_kref()->write(dword);
    return Result;
  }
  Boolean Cjp2_output_box::write(Int16 _word)
  {
    kdu_int16 word = (kdu_int16) _word;
    bool Result;
    Result = _get_kref()->write(word);
    return Result;
  }
  Boolean Cjp2_output_box::write(Byte _byte)
  {
    kdu_byte byte = (kdu_byte) _byte;
    bool Result;
    Result = _get_kref()->write(byte);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_palette
  Boolean Cjp2_palette::exists()
  {
    bool Result;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_palette::copy(Cjp2_palette ^_src)
  {
    jp2_palette src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_palette *)(&src_S));
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_palette::init(Int32 _num_luts, Int32 _num_entries)
  {
    int num_luts = (int) _num_luts;
    int num_entries = (int) _num_entries;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    _kval_cast.init(num_luts,num_entries);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_palette::set_lut(Int32 _lut_idx, cli::array<Int32> ^_lut, Int32 _bit_depth, Boolean _is_signed)
  {
    int lut_idx = (int) _lut_idx;
    cli::pin_ptr<Int32> lut = ((_lut==nullptr)?nullptr:(&_lut[0]));
    int bit_depth = (int) _bit_depth;
    bool is_signed = (bool) _is_signed;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    _kval_cast.set_lut(lut_idx,lut,bit_depth,is_signed);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_palette::set_lut(Int32 _lut_idx, cli::array<Int32> ^_lut, Int32 _bit_depth)
  {
    int lut_idx = (int) _lut_idx;
    cli::pin_ptr<Int32> lut = ((_lut==nullptr)?nullptr:(&_lut[0]));
    int bit_depth = (int) _bit_depth;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    _kval_cast.set_lut(lut_idx,lut,bit_depth);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Cjp2_palette::get_num_entries()
  {
    int Result;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    Result = _kval_cast.get_num_entries();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_palette::get_num_luts()
  {
    int Result;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    Result = _kval_cast.get_num_luts();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjp2_palette::get_bit_depth(Int32 _lut_idx)
  {
    int lut_idx = (int) _lut_idx;
    int Result;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth(lut_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjp2_palette::get_signed(Int32 _lut_idx)
  {
    int lut_idx = (int) _lut_idx;
    bool Result;
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    Result = _kval_cast.get_signed(lut_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_palette::get_lut(Int32 _lut_idx, cli::array<Single> ^_lut)
  {
    int lut_idx = (int) _lut_idx;
    cli::pin_ptr<Single> lut = ((_lut==nullptr)?nullptr:(&_lut[0]));
    jp2_palette _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_palette *)(&_kval_cast_S));
    _kval_cast.get_lut(lut_idx,lut);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_resolution
  Boolean Cjp2_resolution::exists()
  {
    bool Result;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjp2_resolution::copy(Cjp2_resolution ^_src)
  {
    jp2_resolution src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jp2_resolution *)(&src_S));
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_resolution::init(Single _aspect_ratio)
  {
    float aspect_ratio = (float) _aspect_ratio;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    _kval_cast.init(aspect_ratio);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_resolution::set_different_capture_aspect_ratio(Single _aspect_ratio)
  {
    float aspect_ratio = (float) _aspect_ratio;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    _kval_cast.set_different_capture_aspect_ratio(aspect_ratio);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_resolution::set_resolution(Single _resolution, Boolean _for_display)
  {
    float resolution = (float) _resolution;
    bool for_display = (bool) _for_display;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    _kval_cast.set_resolution(resolution,for_display);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjp2_resolution::set_resolution(Single _resolution)
  {
    float resolution = (float) _resolution;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    _kval_cast.set_resolution(resolution);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Single Cjp2_resolution::get_aspect_ratio(Boolean _for_display)
  {
    bool for_display = (bool) _for_display;
    float Result;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_aspect_ratio(for_display);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Single Cjp2_resolution::get_aspect_ratio()
  {
    float Result;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_aspect_ratio();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Single Cjp2_resolution::get_resolution(Boolean _for_display)
  {
    bool for_display = (bool) _for_display;
    float Result;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_resolution(for_display);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Single Cjp2_resolution::get_resolution()
  {
    float Result;
    jp2_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jp2_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_source
  Cjp2_source::Cjp2_source()
      : Cjp2_input_box((jp2_input_box *) NULL)
  {
    _natively_owned = false;
    _kref = new jp2_source();
  }
  Boolean Cjp2_source::open(Cjp2_family_src ^_src, Cjp2_locator ^_loc)
  {
    jp2_family_src *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    jp2_locator loc = *(_loc->_get_kref());
    bool Result;
    Result = _get_kref()->open(src,loc);
    return Result;
  }
  Boolean Cjp2_source::open(Cjp2_family_src ^_src)
  {
    Cjp2_locator ^_loc = gcnew Cjp2_locator();
    return open(_src,_loc);
  }
  Boolean Cjp2_source::open(Cjp2_input_box ^_super_box)
  {
    jp2_input_box *super_box = ((_super_box==nullptr)?NULL:(_super_box->_get_kref()));
    bool Result;
    Result = _get_kref()->open(super_box);
    return Result;
  }
  Boolean Cjp2_source::read_header()
  {
    bool Result;
    Result = _get_kref()->read_header();
    return Result;
  }
  Int64 Cjp2_source::get_header_bytes()
  {
    kdu_long Result;
    Result = _get_kref()->get_header_bytes();
    return Result;
  }
  Cjp2_dimensions ^Cjp2_source::access_dimensions()
  {
    jp2_dimensions Result;
    Result = _get_kref()->access_dimensions();
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cjp2_source::access_palette()
  {
    jp2_palette Result;
    Result = _get_kref()->access_palette();
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_channels ^Cjp2_source::access_channels()
  {
    jp2_channels Result;
    Result = _get_kref()->access_channels();
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjp2_source::access_colour()
  {
    jp2_colour Result;
    Result = _get_kref()->access_colour();
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cjp2_source::access_resolution()
  {
    jp2_resolution Result;
    Result = _get_kref()->access_resolution();
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjp2_target
  Cjp2_target::Cjp2_target()
      : Cjp2_output_box((jp2_output_box *) NULL)
  {
    _natively_owned = false;
    _kref = new jp2_target();
  }
  void Cjp2_target::open(Cjp2_family_tgt ^_tgt)
  {
    jp2_family_tgt *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    _get_kref()->open(tgt);
  }
  void Cjp2_target::open(Cjp2_family_tgt ^_tgt, Int64 _box_type, Boolean _rubber_length)
  {
    jp2_family_tgt *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open(tgt,box_type,rubber_length);
  }
  void Cjp2_target::open(Cjp2_family_tgt ^_tgt, Int64 _box_type)
  {
    Boolean _rubber_length = (Boolean)(false);
    open(_tgt,_box_type,_rubber_length);
  }
  void Cjp2_target::open(Cjp2_output_box ^_super_box, Int64 _box_type, Boolean _rubber_length)
  {
    jp2_output_box *super_box = ((_super_box==nullptr)?NULL:(_super_box->_get_kref()));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open(super_box,box_type,rubber_length);
  }
  void Cjp2_target::open(Cjp2_output_box ^_super_box, Int64 _box_type)
  {
    Boolean _rubber_length = (Boolean)(false);
    open(_super_box,_box_type,_rubber_length);
  }
  void Cjp2_target::open(Int64 _box_type)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    _get_kref()->open(box_type);
  }
  void Cjp2_target::write_header()
  {
    _get_kref()->write_header();
  }
  void Cjp2_target::open_codestream(Boolean _rubber_length)
  {
    bool rubber_length = (bool) _rubber_length;
    _get_kref()->open_codestream(rubber_length);
  }
  void Cjp2_target::open_codestream()
  {
    _get_kref()->open_codestream();
  }
  Cjp2_dimensions ^Cjp2_target::access_dimensions()
  {
    jp2_dimensions Result;
    Result = _get_kref()->access_dimensions();
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjp2_target::access_colour()
  {
    jp2_colour Result;
    Result = _get_kref()->access_colour();
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cjp2_target::access_palette()
  {
    jp2_palette Result;
    Result = _get_kref()->access_palette();
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_channels ^Cjp2_target::access_channels()
  {
    jp2_channels Result;
    Result = _get_kref()->access_channels();
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cjp2_target::access_resolution()
  {
    jp2_resolution Result;
    Result = _get_kref()->access_resolution();
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_codestream_source
  Boolean Cjpx_codestream_source::exists()
  {
    bool Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_codestream_source::get_codestream_id()
  {
    int Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.get_codestream_id();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjp2_locator ^Cjpx_codestream_source::get_header_loc()
  {
    jp2_locator Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.get_header_loc();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_locator ^_Result = gcnew Cjp2_locator;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Cjp2_dimensions ^Cjpx_codestream_source::access_dimensions(Boolean _finalize_compatibility)
  {
    bool finalize_compatibility = (bool) _finalize_compatibility;
    jp2_dimensions Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.access_dimensions(finalize_compatibility);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_dimensions ^Cjpx_codestream_source::access_dimensions()
  {
    jp2_dimensions Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.access_dimensions();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cjpx_codestream_source::access_palette()
  {
    jp2_palette Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.access_palette();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_locator ^Cjpx_codestream_source::get_stream_loc()
  {
    jp2_locator Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.get_stream_loc();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_locator ^_Result = gcnew Cjp2_locator;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Cjpx_codestream_source::stream_ready()
  {
    bool Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.stream_ready();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjpx_fragment_list ^Cjpx_codestream_source::access_fragment_list()
  {
    jpx_fragment_list Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.access_fragment_list();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_fragment_list ^_Result = gcnew Cjpx_fragment_list;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_input_box ^Cjpx_codestream_source::open_stream(Cjpx_input_box ^_my_resource)
  {
    jpx_input_box *my_resource = ((_my_resource==nullptr)?NULL:(_my_resource->_get_kref()));
    jpx_input_box *Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.open_stream(my_resource);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjpx_input_box(Result);
  }
  Cjpx_input_box ^Cjpx_codestream_source::open_stream()
  {
    jpx_input_box *Result;
    jpx_codestream_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_source *)(&_kval_cast_S));
    Result = _kval_cast.open_stream();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjpx_input_box(Result);
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_codestream_target
  Boolean Cjpx_codestream_target::exists()
  {
    bool Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_codestream_target::get_codestream_id()
  {
    int Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.get_codestream_id();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjp2_dimensions ^Cjpx_codestream_target::access_dimensions()
  {
    jp2_dimensions Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.access_dimensions();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cjpx_codestream_target::access_palette()
  {
    jp2_palette Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.access_palette();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_fragment_list ^Cjpx_codestream_target::access_fragment_list()
  {
    jpx_fragment_list Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.access_fragment_list();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_fragment_list ^_Result = gcnew Cjpx_fragment_list;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cjpx_codestream_target::add_fragment(String ^ _url, Int64 _offset, Int64 _length)
  {
    char * url = NULL;
    if (_url != nullptr)
      {
        url = new char[(_url->Length+1)*2];
        cli::pin_ptr<const wchar_t> url_W = PtrToStringChars(_url);
        wcstombs(url,url_W,(_url->Length+1)*2);
      }
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    try { // So we can clean up temporary arrays
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    _kval_cast.add_fragment(url,offset,length);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (url != NULL)
      delete[] url;
    throw;
    }
    if (url != NULL)
      delete[] url;
  }
  void Cjpx_codestream_target::write_fragment_table()
  {
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    _kval_cast.write_fragment_table();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Cjp2_output_box ^Cjpx_codestream_target::open_stream()
  {
    jp2_output_box *Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.open_stream();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_output_box(Result);
  }
  Ckdu_compressed_target ^Cjpx_codestream_target::access_stream()
  {
    kdu_compressed_target *Result;
    jpx_codestream_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_codestream_target *)(&_kval_cast_S));
    Result = _kval_cast.access_stream();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_compressed_target(Result);
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_compatibility
  Boolean Cjpx_compatibility::exists()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::is_jp2()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.is_jp2();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::is_jp2_compatible()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.is_jp2_compatible();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::is_jpxb_compatible()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.is_jpxb_compatible();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::has_reader_requirements_box()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.has_reader_requirements_box();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::check_standard_feature(Int32 _feature_id)
  {
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.check_standard_feature(feature_id);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::check_vendor_feature(cli::array<Byte> ^_uuid)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.check_vendor_feature(uuid);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::get_standard_feature(Int32 _which, cli::interior_ptr<Int32> _feature_id)
  {
    int which = (int) _which;
    kdu_uint16 feature_id = (kdu_uint16) *_feature_id;
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.get_standard_feature(which,feature_id);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_feature_id = feature_id;
    return Result;
  }
  Boolean Cjpx_compatibility::get_standard_feature(Int32 _which, cli::interior_ptr<Int32> _feature_id, cli::interior_ptr<Boolean> _is_supported)
  {
    int which = (int) _which;
    kdu_uint16 feature_id = (kdu_uint16) *_feature_id;
    bool is_supported = (bool) *_is_supported;
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.get_standard_feature(which,feature_id,is_supported);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_feature_id = feature_id;
    *_is_supported = is_supported;
    return Result;
  }
  Boolean Cjpx_compatibility::get_vendor_feature(Int32 _which, cli::array<Byte> ^_uuid)
  {
    int which = (int) _which;
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.get_vendor_feature(which,uuid);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::get_vendor_feature(Int32 _which, cli::array<Byte> ^_uuid, cli::interior_ptr<Boolean> _is_supported)
  {
    int which = (int) _which;
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool is_supported = (bool) *_is_supported;
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.get_vendor_feature(which,uuid,is_supported);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_supported = is_supported;
    return Result;
  }
  void Cjpx_compatibility::set_standard_feature_support(Int32 _feature_id, Boolean _is_supported)
  {
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    bool is_supported = (bool) _is_supported;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_standard_feature_support(feature_id,is_supported);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_vendor_feature_support(cli::array<Byte> ^_uuid, Boolean _is_supported)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool is_supported = (bool) _is_supported;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_vendor_feature_support(uuid,is_supported);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Cjpx_compatibility::test_fully_understand()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.test_fully_understand();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_compatibility::test_decode_completely()
  {
    bool Result;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    Result = _kval_cast.test_decode_completely();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_compatibility::copy(Cjpx_compatibility ^_src)
  {
    jpx_compatibility src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jpx_compatibility *)(&src_S));
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_standard_feature(Int32 _feature_id, Byte _fully_understand_sub_expression, Byte _decode_completely_sub_expression)
  {
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_standard_feature(feature_id,fully_understand_sub_expression,decode_completely_sub_expression);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_standard_feature(Int32 _feature_id, Byte _fully_understand_sub_expression)
  {
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_standard_feature(feature_id,fully_understand_sub_expression);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_standard_feature(Int32 _feature_id)
  {
    kdu_uint16 feature_id = (kdu_uint16) _feature_id;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_standard_feature(feature_id);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_vendor_feature(cli::array<Byte> ^_uuid, Byte _fully_understand_sub_expression, Byte _decode_completely_sub_expression)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    kdu_byte decode_completely_sub_expression = (kdu_byte) _decode_completely_sub_expression;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_vendor_feature(uuid,fully_understand_sub_expression,decode_completely_sub_expression);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_vendor_feature(cli::array<Byte> ^_uuid, Byte _fully_understand_sub_expression)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    kdu_byte fully_understand_sub_expression = (kdu_byte) _fully_understand_sub_expression;
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_vendor_feature(uuid,fully_understand_sub_expression);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cjpx_compatibility::set_used_vendor_feature(cli::array<Byte> ^_uuid)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    jpx_compatibility _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_compatibility *)(&_kval_cast_S));
    _kval_cast.set_used_vendor_feature(uuid);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_composition
  Boolean Cjpx_composition::exists()
  {
    bool Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_composition::copy(Cjpx_composition ^_src)
  {
    jpx_composition src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jpx_composition *)(&src_S));
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Cjpx_composition::get_global_info(Ckdu_coords ^_size)
  {
    kdu_coords &size = *(_size->_get_kref());
    int Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_global_info(size);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  IntPtr Cjpx_composition::get_next_frame(IntPtr _last_frame)
  {
    jx_frame *last_frame = (jx_frame *) _last_frame.ToPointer();
    jx_frame *Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_next_frame(last_frame);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  IntPtr Cjpx_composition::get_prev_frame(IntPtr _last_frame)
  {
    jx_frame *last_frame = (jx_frame *) _last_frame.ToPointer();
    jx_frame *Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_prev_frame(last_frame);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  void Cjpx_composition::get_frame_info(IntPtr _frame_ref, cli::interior_ptr<Int32> _num_instructions, cli::interior_ptr<Int32> _duration, cli::interior_ptr<Int32> _repeat_count, cli::interior_ptr<Boolean> _is_persistent)
  {
    jx_frame *frame_ref = (jx_frame *) _frame_ref.ToPointer();
    int num_instructions = (int) *_num_instructions;
    int duration = (int) *_duration;
    int repeat_count = (int) *_repeat_count;
    bool is_persistent = (bool) *_is_persistent;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    _kval_cast.get_frame_info(frame_ref,num_instructions,duration,repeat_count,is_persistent);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_instructions = num_instructions;
    *_duration = duration;
    *_repeat_count = repeat_count;
    *_is_persistent = is_persistent;
  }
  IntPtr Cjpx_composition::get_last_persistent_frame(IntPtr _frame_ref)
  {
    jx_frame *frame_ref = (jx_frame *) _frame_ref.ToPointer();
    jx_frame *Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_last_persistent_frame(frame_ref);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  Boolean Cjpx_composition::get_instruction(IntPtr _frame_ref, Int32 _instruction_idx, cli::interior_ptr<Int32> _layer_idx, cli::interior_ptr<Int32> _increment, cli::interior_ptr<Boolean> _is_reused, Ckdu_dims ^_source_dims, Ckdu_dims ^_target_dims)
  {
    jx_frame *frame_ref = (jx_frame *) _frame_ref.ToPointer();
    int instruction_idx = (int) _instruction_idx;
    int layer_idx = (int) *_layer_idx;
    int increment = (int) *_increment;
    bool is_reused = (bool) *_is_reused;
    kdu_dims &source_dims = *(_source_dims->_get_kref());
    kdu_dims &target_dims = *(_target_dims->_get_kref());
    bool Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_instruction(frame_ref,instruction_idx,layer_idx,increment,is_reused,source_dims,target_dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_layer_idx = layer_idx;
    *_increment = increment;
    *_is_reused = is_reused;
    return Result;
  }
  Boolean Cjpx_composition::get_original_iset(IntPtr _frame_ref, Int32 _instruction_idx, cli::interior_ptr<Int32> _iset_idx, cli::interior_ptr<Int32> _inum_idx)
  {
    jx_frame *frame_ref = (jx_frame *) _frame_ref.ToPointer();
    int instruction_idx = (int) _instruction_idx;
    int iset_idx = (int) *_iset_idx;
    int inum_idx = (int) *_inum_idx;
    bool Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.get_original_iset(frame_ref,instruction_idx,iset_idx,inum_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_iset_idx = iset_idx;
    *_inum_idx = inum_idx;
    return Result;
  }
  IntPtr Cjpx_composition::add_frame(Int32 _duration, Int32 _repeat_count, Boolean _is_persistent)
  {
    int duration = (int) _duration;
    int repeat_count = (int) _repeat_count;
    bool is_persistent = (bool) _is_persistent;
    jx_frame *Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.add_frame(duration,repeat_count,is_persistent);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  Int32 Cjpx_composition::add_instruction(IntPtr _frame_ref, Int32 _layer_idx, Int32 _increment, Ckdu_dims ^_source_dims, Ckdu_dims ^_target_dims)
  {
    jx_frame *frame_ref = (jx_frame *) _frame_ref.ToPointer();
    int layer_idx = (int) _layer_idx;
    int increment = (int) _increment;
    kdu_dims source_dims = *(_source_dims->_get_kref());
    kdu_dims target_dims = *(_target_dims->_get_kref());
    int Result;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    Result = _kval_cast.add_instruction(frame_ref,layer_idx,increment,source_dims,target_dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_composition::set_loop_count(Int32 _count)
  {
    int count = (int) _count;
    jpx_composition _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_composition *)(&_kval_cast_S));
    _kval_cast.set_loop_count(count);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_fragment_list
  Boolean Cjpx_fragment_list::exists()
  {
    bool Result;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_fragment_list::add_fragment(Int32 _url_idx, Int64 _offset, Int64 _length)
  {
    int url_idx = (int) _url_idx;
    kdu_long offset = (kdu_long) _offset;
    kdu_long length = (kdu_long) _length;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    _kval_cast.add_fragment(url_idx,offset,length);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int64 Cjpx_fragment_list::get_total_length()
  {
    kdu_long Result;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    Result = _kval_cast.get_total_length();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_fragment_list::get_num_fragments()
  {
    int Result;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    Result = _kval_cast.get_num_fragments();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_fragment_list::get_fragment(Int32 _frag_idx, cli::interior_ptr<Int32> _url_idx, cli::interior_ptr<Int64> _offset, cli::interior_ptr<Int64> _length)
  {
    int frag_idx = (int) _frag_idx;
    int url_idx = (int) *_url_idx;
    kdu_long offset = (kdu_long) *_offset;
    kdu_long length = (kdu_long) *_length;
    bool Result;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    Result = _kval_cast.get_fragment(frag_idx,url_idx,offset,length);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_url_idx = url_idx;
    *_offset = offset;
    *_length = length;
    return Result;
  }
  Int32 Cjpx_fragment_list::locate_fragment(Int64 _pos, cli::interior_ptr<Int64> _bytes_into_fragment)
  {
    kdu_long pos = (kdu_long) _pos;
    kdu_long bytes_into_fragment = (kdu_long) *_bytes_into_fragment;
    int Result;
    jpx_fragment_list _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_fragment_list *)(&_kval_cast_S));
    Result = _kval_cast.locate_fragment(pos,bytes_into_fragment);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_bytes_into_fragment = bytes_into_fragment;
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_frame_expander
  Cjpx_frame_expander::Cjpx_frame_expander()
  {
    _natively_owned = false;
    _kref = new jpx_frame_expander();
  }
  void Cjpx_frame_expander::reset()
  {
    _get_kref()->reset();
  }
  Int32 Cjpx_frame_expander::test_codestream_visibility(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence, Int32 _codestream_idx, Ckdu_dims ^_composition_region, Ckdu_dims ^_codestream_roi, Boolean _ignore_use_in_alpha, Int32 _initial_matches_to_skip)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    int codestream_idx = (int) _codestream_idx;
    kdu_dims &composition_region = *(_composition_region->_get_kref());
    kdu_dims codestream_roi = *(_codestream_roi->_get_kref());
    bool ignore_use_in_alpha = (bool) _ignore_use_in_alpha;
    int initial_matches_to_skip = (int) _initial_matches_to_skip;
    int Result;
    Result = _get_kref()->test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,composition_region,codestream_roi,ignore_use_in_alpha,initial_matches_to_skip);
    return Result;
  }
  Int32 Cjpx_frame_expander::test_codestream_visibility(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence, Int32 _codestream_idx, Ckdu_dims ^_composition_region, Ckdu_dims ^_codestream_roi, Boolean _ignore_use_in_alpha)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    int codestream_idx = (int) _codestream_idx;
    kdu_dims &composition_region = *(_composition_region->_get_kref());
    kdu_dims codestream_roi = *(_codestream_roi->_get_kref());
    bool ignore_use_in_alpha = (bool) _ignore_use_in_alpha;
    int Result;
    Result = _get_kref()->test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,composition_region,codestream_roi,ignore_use_in_alpha);
    return Result;
  }
  Int32 Cjpx_frame_expander::test_codestream_visibility(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence, Int32 _codestream_idx, Ckdu_dims ^_composition_region, Ckdu_dims ^_codestream_roi)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    int codestream_idx = (int) _codestream_idx;
    kdu_dims &composition_region = *(_composition_region->_get_kref());
    kdu_dims codestream_roi = *(_codestream_roi->_get_kref());
    int Result;
    Result = _get_kref()->test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,composition_region,codestream_roi);
    return Result;
  }
  Int32 Cjpx_frame_expander::test_codestream_visibility(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence, Int32 _codestream_idx, Ckdu_dims ^_composition_region)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    int codestream_idx = (int) _codestream_idx;
    kdu_dims &composition_region = *(_composition_region->_get_kref());
    int Result;
    Result = _get_kref()->test_codestream_visibility(source,frame,iteration_idx,follow_persistence,codestream_idx,composition_region);
    return Result;
  }
  Boolean Cjpx_frame_expander::construct(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence, Ckdu_dims ^_region_of_interest)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    kdu_dims region_of_interest = *(_region_of_interest->_get_kref());
    bool Result;
    Result = _get_kref()->construct(source,frame,iteration_idx,follow_persistence,region_of_interest);
    return Result;
  }
  Boolean Cjpx_frame_expander::construct(Cjpx_source ^_source, IntPtr _frame, Int32 _iteration_idx, Boolean _follow_persistence)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    jx_frame *frame = (jx_frame *) _frame.ToPointer();
    int iteration_idx = (int) _iteration_idx;
    bool follow_persistence = (bool) _follow_persistence;
    bool Result;
    Result = _get_kref()->construct(source,frame,iteration_idx,follow_persistence);
    return Result;
  }
  Boolean Cjpx_frame_expander::has_non_covering_members()
  {
    bool Result;
    Result = _get_kref()->has_non_covering_members();
    return Result;
  }
  Int32 Cjpx_frame_expander::get_num_members()
  {
    int Result;
    Result = _get_kref()->get_num_members();
    return Result;
  }
  IntPtr Cjpx_frame_expander::get_member(Int32 _which, cli::interior_ptr<Int32> _instruction_idx, cli::interior_ptr<Int32> _layer_idx, cli::interior_ptr<Boolean> _covers_composition, Ckdu_dims ^_source_dims, Ckdu_dims ^_target_dims)
  {
    int which = (int) _which;
    int instruction_idx = (int) *_instruction_idx;
    int layer_idx = (int) *_layer_idx;
    bool covers_composition = (bool) *_covers_composition;
    kdu_dims &source_dims = *(_source_dims->_get_kref());
    kdu_dims &target_dims = *(_target_dims->_get_kref());
    jx_frame *Result;
    Result = _get_kref()->get_member(which,instruction_idx,layer_idx,covers_composition,source_dims,target_dims);
    *_instruction_idx = instruction_idx;
    *_layer_idx = layer_idx;
    *_covers_composition = covers_composition;
    return IntPtr((void *) Result);
  }
  void Cjpx_frame_expander::Do_dispose(bool in_dispose)
  {
    jpx_frame_expander *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_input_box
  Cjpx_input_box::Cjpx_input_box()
      : Cjp2_input_box((jp2_input_box *) NULL)
  {
    _natively_owned = false;
    _kref = new jpx_input_box();
  }
  Boolean Cjpx_input_box::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Cjpx_input_box::open_as(Cjpx_fragment_list ^_frag_list, Cjp2_data_references ^_data_refs, Cjp2_family_src ^_ultimate_src, Int64 _box_type)
  {
    jpx_fragment_list frag_list;
    void *frag_list_S = ((_frag_list==nullptr)?NULL:_frag_list->_kval.ToPointer());
    frag_list = *((jpx_fragment_list *)(&frag_list_S));
    jp2_data_references data_refs;
    void *data_refs_S = ((_data_refs==nullptr)?NULL:_data_refs->_kval.ToPointer());
    data_refs = *((jp2_data_references *)(&data_refs_S));
    jp2_family_src *ultimate_src = ((_ultimate_src==nullptr)?NULL:(_ultimate_src->_get_kref()));
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    bool Result;
    Result = _get_kref()->open_as(frag_list,data_refs,ultimate_src,box_type);
    return Result;
  }
  Boolean Cjpx_input_box::open_next()
  {
    bool Result;
    Result = _get_kref()->open_next();
    return Result;
  }
  Boolean Cjpx_input_box::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Boolean Cjpx_input_box::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int32 Cjpx_input_box::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_layer_source
  Boolean Cjpx_layer_source::exists()
  {
    bool Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_layer_source::get_layer_id()
  {
    int Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_layer_id();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjp2_locator ^Cjpx_layer_source::get_header_loc()
  {
    jp2_locator Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_header_loc();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_locator ^_Result = gcnew Cjp2_locator;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Cjp2_channels ^Cjpx_layer_source::access_channels()
  {
    jp2_channels Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.access_channels();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cjpx_layer_source::access_resolution()
  {
    jp2_resolution Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjpx_layer_source::access_colour(Int32 _which)
  {
    int which = (int) _which;
    jp2_colour Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.access_colour(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Cjpx_layer_source::get_num_codestreams()
  {
    int Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_num_codestreams();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_layer_source::get_codestream_id(Int32 _which)
  {
    int which = (int) _which;
    int Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_codestream_id(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_coords ^Cjpx_layer_source::get_layer_size()
  {
    kdu_coords Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_layer_size();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Cjpx_layer_source::have_stream_headers()
  {
    bool Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.have_stream_headers();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_layer_source::get_codestream_registration(Int32 _which, Ckdu_coords ^_alignment, Ckdu_coords ^_sampling, Ckdu_coords ^_denominator)
  {
    int which = (int) _which;
    kdu_coords &alignment = *(_alignment->_get_kref());
    kdu_coords &sampling = *(_sampling->_get_kref());
    kdu_coords &denominator = *(_denominator->_get_kref());
    int Result;
    jpx_layer_source _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_source *)(&_kval_cast_S));
    Result = _kval_cast.get_codestream_registration(which,alignment,sampling,denominator);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_layer_target
  Boolean Cjpx_layer_target::exists()
  {
    bool Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjp2_channels ^Cjpx_layer_target::access_channels()
  {
    jp2_channels Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.access_channels();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cjpx_layer_target::access_resolution()
  {
    jp2_resolution Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjpx_layer_target::add_colour(Int32 _prec, Byte _approx)
  {
    int prec = (int) _prec;
    kdu_byte approx = (kdu_byte) _approx;
    jp2_colour Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.add_colour(prec,approx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjpx_layer_target::add_colour(Int32 _prec)
  {
    int prec = (int) _prec;
    jp2_colour Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.add_colour(prec);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjpx_layer_target::add_colour()
  {
    jp2_colour Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.add_colour();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cjpx_layer_target::access_colour(Int32 _which)
  {
    int which = (int) _which;
    jp2_colour Result;
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    Result = _kval_cast.access_colour(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cjpx_layer_target::set_codestream_registration(Int32 _codestream_id, Ckdu_coords ^_alignment, Ckdu_coords ^_sampling, Ckdu_coords ^_denominator)
  {
    int codestream_id = (int) _codestream_id;
    kdu_coords alignment = *(_alignment->_get_kref());
    kdu_coords sampling = *(_sampling->_get_kref());
    kdu_coords denominator = *(_denominator->_get_kref());
    jpx_layer_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_layer_target *)(&_kval_cast_S));
    _kval_cast.set_codestream_registration(codestream_id,alignment,sampling,denominator);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_meta_manager
  Boolean Cjpx_meta_manager::exists()
  {
    bool Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_meta_manager::set_box_filter(Int32 _num_box_types, cli::array<Int64> ^_box_types)
  {
    int num_box_types = (int) _num_box_types;
    kdu_uint32 *box_types = NULL;
    if (_box_types != nullptr)
      {
        int _len_ = _box_types->Length;
        box_types = new kdu_uint32[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          box_types[_n_] = (kdu_uint32) _box_types[_n_];
      }
    try { // So we can clean up temporary arrays
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    _kval_cast.set_box_filter(num_box_types,box_types);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (box_types != NULL)
      delete[] box_types;
    throw;
    }
    if (_box_types != nullptr)
      {
        int _len_ = _box_types->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _box_types[_n_] = (Int64) box_types[_n_];
      }
    if (box_types != NULL)
      delete[] box_types;
  }
  Cjpx_metanode ^Cjpx_meta_manager::access_root()
  {
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.access_root();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::locate_node(Int64 _file_pos)
  {
    kdu_long file_pos = (kdu_long) _file_pos;
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.locate_node(file_pos);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::get_touched_nodes()
  {
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.get_touched_nodes();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::peek_touched_nodes(Int64 _box_type, Cjpx_metanode ^_last_peeked)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    jpx_metanode last_peeked;
    void *last_peeked_S = ((_last_peeked==nullptr)?NULL:_last_peeked->_kval.ToPointer());
    last_peeked = *((jpx_metanode *)(&last_peeked_S));
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.peek_touched_nodes(box_type,last_peeked);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::peek_touched_nodes(Int64 _box_type)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.peek_touched_nodes(box_type);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cjpx_meta_manager::copy(Cjpx_meta_manager ^_src)
  {
    jpx_meta_manager src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jpx_meta_manager *)(&src_S));
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    _kval_cast.copy(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Cjpx_meta_manager::load_matches(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, Int32 _num_compositing_layers, cli::array<Int32> ^_layer_indices)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    int num_compositing_layers = (int) _num_compositing_layers;
    cli::pin_ptr<Int32> layer_indices = ((_layer_indices==nullptr)?nullptr:(&_layer_indices[0]));
    bool Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.load_matches(num_codestreams,codestream_indices,num_compositing_layers,layer_indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::enumerate_matches(Cjpx_metanode ^_last_node, Int32 _codestream_idx, Int32 _compositing_layer_idx, Boolean _applies_to_rendered_result, Ckdu_dims ^_region, Int32 _min_size, Boolean _exclude_region_numlists)
  {
    jpx_metanode last_node;
    void *last_node_S = ((_last_node==nullptr)?NULL:_last_node->_kval.ToPointer());
    last_node = *((jpx_metanode *)(&last_node_S));
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (bool) _applies_to_rendered_result;
    kdu_dims region = *(_region->_get_kref());
    int min_size = (int) _min_size;
    bool exclude_region_numlists = (bool) _exclude_region_numlists;
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.enumerate_matches(last_node,codestream_idx,compositing_layer_idx,applies_to_rendered_result,region,min_size,exclude_region_numlists);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::enumerate_matches(Cjpx_metanode ^_last_node, Int32 _codestream_idx, Int32 _compositing_layer_idx, Boolean _applies_to_rendered_result, Ckdu_dims ^_region, Int32 _min_size)
  {
    jpx_metanode last_node;
    void *last_node_S = ((_last_node==nullptr)?NULL:_last_node->_kval.ToPointer());
    last_node = *((jpx_metanode *)(&last_node_S));
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (bool) _applies_to_rendered_result;
    kdu_dims region = *(_region->_get_kref());
    int min_size = (int) _min_size;
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.enumerate_matches(last_node,codestream_idx,compositing_layer_idx,applies_to_rendered_result,region,min_size);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_meta_manager::insert_node(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, Int32 _num_compositing_layers, cli::array<Int32> ^_layer_indices, Boolean _applies_to_rendered_result, Int32 _num_regions, Cjpx_roi ^_regions)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    int num_compositing_layers = (int) _num_compositing_layers;
    cli::pin_ptr<Int32> layer_indices = ((_layer_indices==nullptr)?nullptr:(&_layer_indices[0]));
    bool applies_to_rendered_result = (bool) _applies_to_rendered_result;
    int num_regions = (int) _num_regions;
    jpx_roi *regions = ((_regions==nullptr)?NULL:(_regions->_get_kref()));
    jpx_metanode Result;
    jpx_meta_manager _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_meta_manager *)(&_kval_cast_S));
    Result = _kval_cast.insert_node(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result,num_regions,regions);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_metanode
  Boolean Cjpx_metanode::exists()
  {
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::get_numlist_info(cli::interior_ptr<Int32> _num_codestreams, cli::interior_ptr<Int32> _num_layers, cli::interior_ptr<Boolean> _applies_to_rendered_result)
  {
    int num_codestreams = (int) *_num_codestreams;
    int num_layers = (int) *_num_layers;
    bool applies_to_rendered_result = (bool) *_applies_to_rendered_result;
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_numlist_info(num_codestreams,num_layers,applies_to_rendered_result);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_codestreams = num_codestreams;
    *_num_layers = num_layers;
    *_applies_to_rendered_result = applies_to_rendered_result;
    return Result;
  }
  IntPtr Cjpx_metanode::get_numlist_codestreams()
  {
    const int *Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_numlist_codestreams();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  IntPtr Cjpx_metanode::get_numlist_layers()
  {
    const int *Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_numlist_layers();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  Int32 Cjpx_metanode::get_numlist_codestream(Int32 _which)
  {
    int which = (int) _which;
    int Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_numlist_codestream(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_metanode::get_numlist_layer(Int32 _which)
  {
    int which = (int) _which;
    int Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_numlist_layer(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::test_numlist(Int32 _codestream_idx, Int32 _compositing_layer_idx, Boolean _applies_to_rendered_result)
  {
    int codestream_idx = (int) _codestream_idx;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    bool applies_to_rendered_result = (bool) _applies_to_rendered_result;
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.test_numlist(codestream_idx,compositing_layer_idx,applies_to_rendered_result);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Cjpx_metanode::get_num_regions()
  {
    int Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_num_regions();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjpx_roi ^Cjpx_metanode::get_region(Int32 _which)
  {
    int which = (int) _which;
    jpx_roi Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_region(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_roi ^_Result = gcnew Cjpx_roi;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Cjpx_metanode::get_bounding_box()
  {
    kdu_dims Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_bounding_box();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Cjpx_metanode::test_region(Ckdu_dims ^_region)
  {
    kdu_dims region = *(_region->_get_kref());
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.test_region(region);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Cjpx_metanode::get_box_type()
  {
    kdu_uint32 Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_box_type();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  String ^ Cjpx_metanode::get_label()
  {
    const char * Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_label();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return gcnew String((char *) Result);
  }
  Boolean Cjpx_metanode::get_uuid(cli::array<Byte> ^_uuid)
  {
    cli::pin_ptr<Byte> uuid = ((_uuid==nullptr)?nullptr:(&_uuid[0]));
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_uuid(uuid);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::open_existing(Cjp2_input_box ^_box)
  {
    jp2_input_box &box = *(_box->_get_kref());
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.open_existing(box);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::count_descendants(cli::interior_ptr<Int32> _count)
  {
    int count = (int) *_count;
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.count_descendants(count);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_count = count;
    return Result;
  }
  Cjpx_metanode ^Cjpx_metanode::get_descendant(Int32 _which)
  {
    int which = (int) _which;
    jpx_metanode Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_descendant(which);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_metanode::get_parent()
  {
    jpx_metanode Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_parent();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Cjpx_metanode::change_parent(Cjpx_metanode ^_new_parent)
  {
    jpx_metanode new_parent;
    void *new_parent_S = ((_new_parent==nullptr)?NULL:_new_parent->_kval.ToPointer());
    new_parent = *((jpx_metanode *)(&new_parent_S));
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.change_parent(new_parent);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Cjpx_metanode ^Cjpx_metanode::add_numlist(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, Int32 _num_compositing_layers, cli::array<Int32> ^_layer_indices, Boolean _applies_to_rendered_result)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    int num_compositing_layers = (int) _num_compositing_layers;
    cli::pin_ptr<Int32> layer_indices = ((_layer_indices==nullptr)?nullptr:(&_layer_indices[0]));
    bool applies_to_rendered_result = (bool) _applies_to_rendered_result;
    jpx_metanode Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.add_numlist(num_codestreams,codestream_indices,num_compositing_layers,layer_indices,applies_to_rendered_result);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_metanode::add_regions(Int32 _num_regions, Cjpx_roi ^_regions)
  {
    int num_regions = (int) _num_regions;
    jpx_roi *regions = ((_regions==nullptr)?NULL:(_regions->_get_kref()));
    jpx_metanode Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.add_regions(num_regions,regions);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_metanode ^Cjpx_metanode::add_label(String ^ _text)
  {
    char * text = NULL;
    if (_text != nullptr)
      {
        text = new char[(_text->Length+1)*2];
        cli::pin_ptr<const wchar_t> text_W = PtrToStringChars(_text);
        wcstombs(text,text_W,(_text->Length+1)*2);
      }
    jpx_metanode Result;
    try { // So we can clean up temporary arrays
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.add_label(text);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (text != NULL)
      delete[] text;
    throw;
    }
    if (text != NULL)
      delete[] text;
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cjpx_metanode::change_to_label(String ^ _text)
  {
    char * text = NULL;
    if (_text != nullptr)
      {
        text = new char[(_text->Length+1)*2];
        cli::pin_ptr<const wchar_t> text_W = PtrToStringChars(_text);
        wcstombs(text,text_W,(_text->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    _kval_cast.change_to_label(text);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (text != NULL)
      delete[] text;
    throw;
    }
    if (text != NULL)
      delete[] text;
  }
  Cjpx_metanode ^Cjpx_metanode::add_copy(Cjpx_metanode ^_src, Boolean _recursive)
  {
    jpx_metanode src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((jpx_metanode *)(&src_S));
    bool recursive = (bool) _recursive;
    jpx_metanode Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.add_copy(src,recursive);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cjpx_metanode::delete_node()
  {
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    _kval_cast.delete_node();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Cjpx_metanode::is_changed()
  {
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.is_changed();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::ancestor_changed()
  {
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.ancestor_changed();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Cjpx_metanode::is_deleted()
  {
    bool Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.is_deleted();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cjpx_metanode::touch()
  {
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    _kval_cast.touch();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  IntPtr Cjpx_metanode::get_state_ref()
  {
    void *Result;
    jpx_metanode _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((jpx_metanode *)(&_kval_cast_S));
    Result = _kval_cast.get_state_ref();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_roi
  Cjpx_roi::Cjpx_roi()
  {
    _natively_owned = false;
    _kref = new jpx_roi();
  }
  void Cjpx_roi::Do_dispose(bool in_dispose)
  {
    jpx_roi *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_source
  Cjpx_source::Cjpx_source()
  {
    _natively_owned = false;
    _kref = new jpx_source();
  }
  Boolean Cjpx_source::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Int32 Cjpx_source::open(Cjp2_family_src ^_src, Boolean _return_if_incompatible)
  {
    jp2_family_src *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    bool return_if_incompatible = (bool) _return_if_incompatible;
    int Result;
    Result = _get_kref()->open(src,return_if_incompatible);
    return Result;
  }
  Cjp2_family_src ^Cjpx_source::get_ultimate_src()
  {
    jp2_family_src *Result;
    Result = _get_kref()->get_ultimate_src();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_family_src(Result);
  }
  Cjpx_compatibility ^Cjpx_source::access_compatibility()
  {
    jpx_compatibility Result;
    Result = _get_kref()->access_compatibility();
    Cjpx_compatibility ^_Result = gcnew Cjpx_compatibility;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_data_references ^Cjpx_source::access_data_references()
  {
    jp2_data_references Result;
    Result = _get_kref()->access_data_references();
    Cjp2_data_references ^_Result = gcnew Cjp2_data_references;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Cjpx_source::count_codestreams(cli::interior_ptr<Int32> _count)
  {
    int count = (int) *_count;
    bool Result;
    Result = _get_kref()->count_codestreams(count);
    *_count = count;
    return Result;
  }
  Boolean Cjpx_source::count_compositing_layers(cli::interior_ptr<Int32> _count)
  {
    int count = (int) *_count;
    bool Result;
    Result = _get_kref()->count_compositing_layers(count);
    *_count = count;
    return Result;
  }
  Cjpx_codestream_source ^Cjpx_source::access_codestream(Int32 _which, Boolean _need_main_header)
  {
    int which = (int) _which;
    bool need_main_header = (bool) _need_main_header;
    jpx_codestream_source Result;
    Result = _get_kref()->access_codestream(which,need_main_header);
    Cjpx_codestream_source ^_Result = gcnew Cjpx_codestream_source;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_codestream_source ^Cjpx_source::access_codestream(Int32 _which)
  {
    int which = (int) _which;
    jpx_codestream_source Result;
    Result = _get_kref()->access_codestream(which);
    Cjpx_codestream_source ^_Result = gcnew Cjpx_codestream_source;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_layer_source ^Cjpx_source::access_layer(Int32 _which, Boolean _need_stream_headers)
  {
    int which = (int) _which;
    bool need_stream_headers = (bool) _need_stream_headers;
    jpx_layer_source Result;
    Result = _get_kref()->access_layer(which,need_stream_headers);
    Cjpx_layer_source ^_Result = gcnew Cjpx_layer_source;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_layer_source ^Cjpx_source::access_layer(Int32 _which)
  {
    int which = (int) _which;
    jpx_layer_source Result;
    Result = _get_kref()->access_layer(which);
    Cjpx_layer_source ^_Result = gcnew Cjpx_layer_source;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Cjpx_source::get_num_layer_codestreams(Int32 _which_layer)
  {
    int which_layer = (int) _which_layer;
    int Result;
    Result = _get_kref()->get_num_layer_codestreams(which_layer);
    return Result;
  }
  Int32 Cjpx_source::get_layer_codestream_id(Int32 _which_layer, Int32 _which_stream)
  {
    int which_layer = (int) _which_layer;
    int which_stream = (int) _which_stream;
    int Result;
    Result = _get_kref()->get_layer_codestream_id(which_layer,which_stream);
    return Result;
  }
  Cjpx_composition ^Cjpx_source::access_composition()
  {
    jpx_composition Result;
    Result = _get_kref()->access_composition();
    Cjpx_composition ^_Result = gcnew Cjpx_composition;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_meta_manager ^Cjpx_source::access_meta_manager()
  {
    jpx_meta_manager Result;
    Result = _get_kref()->access_meta_manager();
    Cjpx_meta_manager ^_Result = gcnew Cjpx_meta_manager;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Cjpx_source::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Cjpx_source::Do_dispose(bool in_dispose)
  {
    jpx_source *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cjpx_target
  Cjpx_target::Cjpx_target()
  {
    _natively_owned = false;
    _kref = new jpx_target();
  }
  Boolean Cjpx_target::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Cjpx_target::open(Cjp2_family_tgt ^_tgt)
  {
    jp2_family_tgt *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    _get_kref()->open(tgt);
  }
  Cjpx_compatibility ^Cjpx_target::access_compatibility()
  {
    jpx_compatibility Result;
    Result = _get_kref()->access_compatibility();
    Cjpx_compatibility ^_Result = gcnew Cjpx_compatibility;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_data_references ^Cjpx_target::access_data_references()
  {
    jp2_data_references Result;
    Result = _get_kref()->access_data_references();
    Cjp2_data_references ^_Result = gcnew Cjp2_data_references;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_codestream_target ^Cjpx_target::add_codestream()
  {
    jpx_codestream_target Result;
    Result = _get_kref()->add_codestream();
    Cjpx_codestream_target ^_Result = gcnew Cjpx_codestream_target;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_layer_target ^Cjpx_target::add_layer()
  {
    jpx_layer_target Result;
    Result = _get_kref()->add_layer();
    Cjpx_layer_target ^_Result = gcnew Cjpx_layer_target;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_composition ^Cjpx_target::access_composition()
  {
    jpx_composition Result;
    Result = _get_kref()->access_composition();
    Cjpx_composition ^_Result = gcnew Cjpx_composition;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjpx_meta_manager ^Cjpx_target::access_meta_manager()
  {
    jpx_meta_manager Result;
    Result = _get_kref()->access_meta_manager();
    Cjpx_meta_manager ^_Result = gcnew Cjpx_meta_manager;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_output_box ^Cjpx_target::write_headers(cli::array<Int32> ^_i_param)
  {
    cli::pin_ptr<Int32> i_param = ((_i_param==nullptr)?nullptr:(&_i_param[0]));
    jp2_output_box *Result;
    Result = _get_kref()->write_headers(i_param);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_output_box(Result);
  }
  Cjp2_output_box ^Cjpx_target::write_headers()
  {
    jp2_output_box *Result;
    Result = _get_kref()->write_headers();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_output_box(Result);
  }
  Cjp2_output_box ^Cjpx_target::write_metadata(cli::array<Int32> ^_i_param)
  {
    cli::pin_ptr<Int32> i_param = ((_i_param==nullptr)?nullptr:(&_i_param[0]));
    jp2_output_box *Result;
    Result = _get_kref()->write_metadata(i_param);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_output_box(Result);
  }
  Cjp2_output_box ^Cjpx_target::write_metadata()
  {
    jp2_output_box *Result;
    Result = _get_kref()->write_metadata();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_output_box(Result);
  }
  Boolean Cjpx_target::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Cjpx_target::Do_dispose(bool in_dispose)
  {
    jpx_target *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_analysis
  Ckdu_analysis::Ckdu_analysis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_analysis(node,allocator,use_shorts,normalization,roi,env,env_queue);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_analysis(node,allocator,use_shorts,normalization,roi,env);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_analysis(node,allocator,use_shorts,normalization,roi);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_analysis(node,allocator,use_shorts,normalization);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_analysis(node,allocator,use_shorts);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_analysis(resolution,allocator,use_shorts,normalization,roi,env,env_queue);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_analysis(resolution,allocator,use_shorts,normalization,roi,env);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_analysis(resolution,allocator,use_shorts,normalization,roi);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_analysis(resolution,allocator,use_shorts,normalization);
  }
  Ckdu_analysis::Ckdu_analysis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_analysis(resolution,allocator,use_shorts);
  }
  void Ckdu_analysis::Do_dispose(bool in_dispose)
  {
    kdu_analysis *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_block
  Int32 Ckdu_block::get_max_passes()
  {
    int Result;
    Result = _get_kref()->get_max_passes();
    return Result;
  }
  void Ckdu_block::set_max_passes(Int32 _new_passes, Boolean _copy_existing)
  {
    int new_passes = (int) _new_passes;
    bool copy_existing = (bool) _copy_existing;
    _get_kref()->set_max_passes(new_passes,copy_existing);
  }
  void Ckdu_block::set_max_passes(Int32 _new_passes)
  {
    int new_passes = (int) _new_passes;
    _get_kref()->set_max_passes(new_passes);
  }
  Int32 Ckdu_block::get_max_bytes()
  {
    int Result;
    Result = _get_kref()->get_max_bytes();
    return Result;
  }
  void Ckdu_block::set_max_bytes(Int32 _new_bytes, Boolean _copy_existing)
  {
    int new_bytes = (int) _new_bytes;
    bool copy_existing = (bool) _copy_existing;
    _get_kref()->set_max_bytes(new_bytes,copy_existing);
  }
  void Ckdu_block::set_max_bytes(Int32 _new_bytes)
  {
    int new_bytes = (int) _new_bytes;
    _get_kref()->set_max_bytes(new_bytes);
  }
  void Ckdu_block::__property_set_max_samples(Int32 _new_samples)
  {
    int new_samples = (int) _new_samples;
    _get_kref()->set_max_samples(new_samples);
  }
  void Ckdu_block::__property_set_max_contexts(Int32 _new_contexts)
  {
    int new_contexts = (int) _new_contexts;
    _get_kref()->set_max_contexts(new_contexts);
  }
  Ckdu_coords ^Ckdu_block::__property_get_size()
  {
    kdu_coords Result;
    Result = _get_kref()->get_size();
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  void Ckdu_block::__property_set_size(Ckdu_coords ^_new_size)
  {
    kdu_coords new_size = *(_new_size->_get_kref());
    _get_kref()->set_size(new_size);
  }
  Ckdu_dims ^Ckdu_block::__property_get_region()
  {
    kdu_dims Result;
    Result = _get_kref()->get_region();
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  void Ckdu_block::__property_set_region(Ckdu_dims ^_new_region)
  {
    kdu_dims new_region = *(_new_region->_get_kref());
    _get_kref()->set_region(new_region);
  }
  Boolean Ckdu_block::__property_get_transpose()
  {
    bool Result;
    Result = _get_kref()->get_transpose();
    return Result;
  }
  void Ckdu_block::__property_set_transpose(Boolean _new_transpose)
  {
    bool new_transpose = (bool) _new_transpose;
    _get_kref()->set_transpose(new_transpose);
  }
  Boolean Ckdu_block::__property_get_vflip()
  {
    bool Result;
    Result = _get_kref()->get_vflip();
    return Result;
  }
  void Ckdu_block::__property_set_vflip(Boolean _new_vflip)
  {
    bool new_vflip = (bool) _new_vflip;
    _get_kref()->set_vflip(new_vflip);
  }
  Boolean Ckdu_block::__property_get_hflip()
  {
    bool Result;
    Result = _get_kref()->get_hflip();
    return Result;
  }
  void Ckdu_block::__property_set_hflip(Boolean _new_hflip)
  {
    bool new_hflip = (bool) _new_hflip;
    _get_kref()->set_hflip(new_hflip);
  }
  Int32 Ckdu_block::__property_get_modes()
  {
    int Result;
    Result = _get_kref()->get_modes();
    return Result;
  }
  void Ckdu_block::__property_set_modes(Int32 _new_modes)
  {
    int new_modes = (int) _new_modes;
    _get_kref()->set_modes(new_modes);
  }
  Int32 Ckdu_block::__property_get_orientation()
  {
    int Result;
    Result = _get_kref()->get_orientation();
    return Result;
  }
  void Ckdu_block::__property_set_orientation(Int32 _new_orientation)
  {
    int new_orientation = (int) _new_orientation;
    _get_kref()->set_orientation(new_orientation);
  }
  Int32 Ckdu_block::__property_get_missing_msbs()
  {
    int Result;
    Result = _get_kref()->get_missing_msbs();
    return Result;
  }
  void Ckdu_block::__property_set_missing_msbs(Int32 _new_msbs)
  {
    int new_msbs = (int) _new_msbs;
    _get_kref()->set_missing_msbs(new_msbs);
  }
  Int32 Ckdu_block::__property_get_num_passes()
  {
    int Result;
    Result = _get_kref()->get_num_passes();
    return Result;
  }
  void Ckdu_block::__property_set_num_passes(Int32 _new_passes)
  {
    int new_passes = (int) _new_passes;
    _get_kref()->set_num_passes(new_passes);
  }
  void Ckdu_block::get_pass_lengths(cli::array<Int32> ^_buffer)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    _get_kref()->get_pass_lengths(buffer);
  }
  void Ckdu_block::set_pass_lengths(cli::array<Int32> ^_buffer)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    _get_kref()->set_pass_lengths(buffer);
  }
  void Ckdu_block::get_pass_slopes(cli::array<Int32> ^_buffer)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    _get_kref()->get_pass_slopes(buffer);
  }
  void Ckdu_block::set_pass_slopes(cli::array<Int32> ^_buffer)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    _get_kref()->set_pass_slopes(buffer);
  }
  void Ckdu_block::get_buffered_bytes(cli::array<Byte> ^_buffer, Int32 _first_idx, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    _get_kref()->get_buffered_bytes(buffer,first_idx,num_bytes);
  }
  void Ckdu_block::set_buffered_bytes(cli::array<Byte> ^_buffer, Int32 _first_idx, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_bytes = (int) _num_bytes;
    _get_kref()->set_buffered_bytes(buffer,first_idx,num_bytes);
  }
  Int32 Ckdu_block::start_timing()
  {
    int Result;
    Result = _get_kref()->start_timing();
    return Result;
  }
  void Ckdu_block::finish_timing()
  {
    _get_kref()->finish_timing();
  }
  void Ckdu_block::initialize_timing(Int32 _iterations)
  {
    int iterations = (int) _iterations;
    _get_kref()->initialize_timing(iterations);
  }
  Double Ckdu_block::get_timing_stats(cli::interior_ptr<Int64> _unique_samples, cli::interior_ptr<Double> _time_wasted)
  {
    kdu_long unique_samples = (kdu_long) *_unique_samples;
    double time_wasted = (double) *_time_wasted;
    double Result;
    Result = _get_kref()->get_timing_stats(unique_samples,time_wasted);
    *_unique_samples = unique_samples;
    *_time_wasted = time_wasted;
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_block_decoder
  Ckdu_block_decoder::Ckdu_block_decoder()
  {
    _natively_owned = false;
    _kref = new kdu_block_decoder();
  }
  void Ckdu_block_decoder::decode(Ckdu_block ^_block)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    _get_kref()->decode(block);
  }
  void Ckdu_block_decoder::Do_dispose(bool in_dispose)
  {
    kdu_block_decoder *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_block_encoder
  Ckdu_block_encoder::Ckdu_block_encoder()
  {
    _natively_owned = false;
    _kref = new kdu_block_encoder();
  }
  void Ckdu_block_encoder::encode(Ckdu_block ^_block, Boolean _reversible, Double _msb_wmse, Int32 _estimated_slope_threshold)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    bool reversible = (bool) _reversible;
    double msb_wmse = (double) _msb_wmse;
    kdu_uint16 estimated_slope_threshold = (kdu_uint16) _estimated_slope_threshold;
    _get_kref()->encode(block,reversible,msb_wmse,estimated_slope_threshold);
  }
  void Ckdu_block_encoder::encode(Ckdu_block ^_block, Boolean _reversible, Double _msb_wmse)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    bool reversible = (bool) _reversible;
    double msb_wmse = (double) _msb_wmse;
    _get_kref()->encode(block,reversible,msb_wmse);
  }
  void Ckdu_block_encoder::encode(Ckdu_block ^_block, Boolean _reversible)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    bool reversible = (bool) _reversible;
    _get_kref()->encode(block,reversible);
  }
  void Ckdu_block_encoder::encode(Ckdu_block ^_block)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    _get_kref()->encode(block);
  }
  void Ckdu_block_encoder::Do_dispose(bool in_dispose)
  {
    kdu_block_encoder *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_cache
  Ckdu_cache::Ckdu_cache()
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    _natively_owned = false;
    _aux_extended__kdu_cache *_true_kref = new _aux_extended__kdu_cache();
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_cache(this);
  }
  void Ckdu_cache::attach_to(Ckdu_cache ^_existing)
  {
    kdu_cache *existing = ((_existing==nullptr)?NULL:(_existing->_get_kref()));
    _get_kref()->attach_to(existing);
  }
  Boolean Ckdu_cache::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Ckdu_cache::add_to_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, cli::array<Byte> ^_data, Int32 _offset, Int32 _num_bytes, Boolean _is_final, Boolean _add_as_most_recent, Boolean _mark_if_augmented)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int offset = (int) _offset;
    int num_bytes = (int) _num_bytes;
    bool is_final = (bool) _is_final;
    bool add_as_most_recent = (bool) _add_as_most_recent;
    bool mark_if_augmented = (bool) _mark_if_augmented;
    _get_kref()->add_to_databin(databin_class,codestream_id,databin_id,data,offset,num_bytes,is_final,add_as_most_recent,mark_if_augmented);
  }
  void Ckdu_cache::add_to_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, cli::array<Byte> ^_data, Int32 _offset, Int32 _num_bytes, Boolean _is_final, Boolean _add_as_most_recent)
  {
    Boolean _mark_if_augmented = (Boolean)(false);
    add_to_databin(_databin_class,_codestream_id,_databin_id,_data,_offset,_num_bytes,_is_final,_add_as_most_recent,_mark_if_augmented);
  }
  void Ckdu_cache::add_to_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, cli::array<Byte> ^_data, Int32 _offset, Int32 _num_bytes, Boolean _is_final)
  {
    Boolean _add_as_most_recent = (Boolean)(true);
    Boolean _mark_if_augmented = (Boolean)(false);
    add_to_databin(_databin_class,_codestream_id,_databin_id,_data,_offset,_num_bytes,_is_final,_add_as_most_recent,_mark_if_augmented);
  }
  Int32 Ckdu_cache::get_databin_length(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, cli::array<Boolean> ^_is_complete)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool *is_complete = NULL;
    if (_is_complete != nullptr)
      {
        int _len_ = _is_complete->Length;
        is_complete = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_complete[_n_] = (bool) _is_complete[_n_];
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get_databin_length(databin_class,codestream_id,databin_id,is_complete);
    } catch (...) {
    if (is_complete != NULL)
      delete[] is_complete;
    throw;
    }
    if (_is_complete != nullptr)
      {
        int _len_ = _is_complete->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_complete[_n_] = (Boolean) is_complete[_n_];
      }
    if (is_complete != NULL)
      delete[] is_complete;
    return Result;
  }
  Int32 Ckdu_cache::get_databin_length(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    cli::array<Boolean> ^_is_complete = nullptr;
    return get_databin_length(_databin_class,_codestream_id,_databin_id,_is_complete);
  }
  void Ckdu_cache::promote_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    _get_kref()->promote_databin(databin_class,codestream_id,databin_id);
  }
  void Ckdu_cache::demote_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    _get_kref()->demote_databin(databin_class,codestream_id,databin_id);
  }
  Int64 Ckdu_cache::get_next_codestream(Int64 _stream_id)
  {
    kdu_long stream_id = (kdu_long) _stream_id;
    kdu_long Result;
    Result = _get_kref()->get_next_codestream(stream_id);
    return Result;
  }
  Int64 Ckdu_cache::get_next_lru_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, Boolean _only_if_marked)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (bool) _only_if_marked;
    kdu_long Result;
    Result = _get_kref()->get_next_lru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    return Result;
  }
  Int64 Ckdu_cache::get_next_lru_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    Boolean _only_if_marked = (Boolean)(false);
    return get_next_lru_databin(_databin_class,_codestream_id,_databin_id,_only_if_marked);
  }
  Int64 Ckdu_cache::get_next_mru_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, Boolean _only_if_marked)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool only_if_marked = (bool) _only_if_marked;
    kdu_long Result;
    Result = _get_kref()->get_next_mru_databin(databin_class,codestream_id,databin_id,only_if_marked);
    return Result;
  }
  Int64 Ckdu_cache::get_next_mru_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    Boolean _only_if_marked = (Boolean)(false);
    return get_next_mru_databin(_databin_class,_codestream_id,_databin_id,_only_if_marked);
  }
  Boolean Ckdu_cache::mark_databin(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, Boolean _mark_state)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    bool mark_state = (bool) _mark_state;
    bool Result;
    Result = _get_kref()->mark_databin(databin_class,codestream_id,databin_id,mark_state);
    return Result;
  }
  void Ckdu_cache::clear_all_marks()
  {
    _get_kref()->clear_all_marks();
  }
  void Ckdu_cache::set_all_marks()
  {
    _get_kref()->set_all_marks();
  }
  Int32 Ckdu_cache::get_databin_prefix(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id, cli::array<Byte> ^_buf, Int32 _max_bytes)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int max_bytes = (int) _max_bytes;
    int Result;
    Result = _get_kref()->get_databin_prefix(databin_class,codestream_id,databin_id,buf,max_bytes);
    return Result;
  }
  void Ckdu_cache::set_read_scope(Int32 _databin_class, Int64 _codestream_id, Int64 _databin_id)
  {
    int databin_class = (int) _databin_class;
    kdu_long codestream_id = (kdu_long) _codestream_id;
    kdu_long databin_id = (kdu_long) _databin_id;
    _get_kref()->set_read_scope(databin_class,codestream_id,databin_id);
  }
  Boolean Ckdu_cache::set_tileheader_scope(Int32 _tnum, Int32 _num_tiles)
  {
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    bool Result;
    Result = _get_kref()->set_tileheader_scope(tnum,num_tiles);
    return Result;
  }
  Boolean Ckdu_cache::set_precinct_scope(Int64 _unique_id)
  {
    kdu_long unique_id = (kdu_long) _unique_id;
    bool Result;
    Result = _get_kref()->set_precinct_scope(unique_id);
    return Result;
  }
  Int32 Ckdu_cache::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  Int32 Ckdu_cache::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Boolean Ckdu_cache::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Ckdu_cache::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  void Ckdu_cache::acquire_lock()
  {
  }
  void Ckdu_cache::release_lock()
  {
  }
  Int64 Ckdu_cache::get_peak_cache_memory()
  {
    kdu_long Result;
    Result = _get_kref()->get_peak_cache_memory();
    return Result;
  }
  Int64 Ckdu_cache::get_transferred_bytes(Int32 _databin_class)
  {
    int databin_class = (int) _databin_class;
    kdu_long Result;
    Result = _get_kref()->get_transferred_bytes(databin_class);
    return Result;
  }
  void Ckdu_cache::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_cache *_kref_tmp = (_aux_extended__kdu_cache *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_cache *_delegator = (_mni_delegator__kdu_cache *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_channel_mapping
  Ckdu_channel_mapping::Ckdu_channel_mapping()
  {
    _natively_owned = false;
    _kref = new kdu_channel_mapping();
  }
  void Ckdu_channel_mapping::clear()
  {
    _get_kref()->clear();
  }
  Boolean Ckdu_channel_mapping::configure(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool Result;
    Result = _get_kref()->configure(codestream);
    return Result;
  }
  Boolean Ckdu_channel_mapping::configure(Cjp2_colour ^_colour, Cjp2_channels ^_channels, Int32 _codestream_idx, Cjp2_palette ^_palette, Cjp2_dimensions ^_codestream_dimensions)
  {
    jp2_colour colour;
    void *colour_S = ((_colour==nullptr)?NULL:_colour->_kval.ToPointer());
    colour = *((jp2_colour *)(&colour_S));
    jp2_channels channels;
    void *channels_S = ((_channels==nullptr)?NULL:_channels->_kval.ToPointer());
    channels = *((jp2_channels *)(&channels_S));
    int codestream_idx = (int) _codestream_idx;
    jp2_palette palette;
    void *palette_S = ((_palette==nullptr)?NULL:_palette->_kval.ToPointer());
    palette = *((jp2_palette *)(&palette_S));
    jp2_dimensions codestream_dimensions;
    void *codestream_dimensions_S = ((_codestream_dimensions==nullptr)?NULL:_codestream_dimensions->_kval.ToPointer());
    codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool Result;
    Result = _get_kref()->configure(colour,channels,codestream_idx,palette,codestream_dimensions);
    return Result;
  }
  Boolean Ckdu_channel_mapping::configure(Cjp2_source ^_jp2_in, Boolean _ignore_alpha)
  {
    jp2_source *jp2_in = ((_jp2_in==nullptr)?NULL:(_jp2_in->_get_kref()));
    bool ignore_alpha = (bool) _ignore_alpha;
    bool Result;
    Result = _get_kref()->configure(jp2_in,ignore_alpha);
    return Result;
  }
  Boolean Ckdu_channel_mapping::add_alpha_to_configuration(Cjp2_channels ^_channels, Int32 _codestream_idx, Cjp2_palette ^_palette, Cjp2_dimensions ^_codestream_dimensions, Boolean _ignore_premultiplied_alpha)
  {
    jp2_channels channels;
    void *channels_S = ((_channels==nullptr)?NULL:_channels->_kval.ToPointer());
    channels = *((jp2_channels *)(&channels_S));
    int codestream_idx = (int) _codestream_idx;
    jp2_palette palette;
    void *palette_S = ((_palette==nullptr)?NULL:_palette->_kval.ToPointer());
    palette = *((jp2_palette *)(&palette_S));
    jp2_dimensions codestream_dimensions;
    void *codestream_dimensions_S = ((_codestream_dimensions==nullptr)?NULL:_codestream_dimensions->_kval.ToPointer());
    codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool ignore_premultiplied_alpha = (bool) _ignore_premultiplied_alpha;
    bool Result;
    Result = _get_kref()->add_alpha_to_configuration(channels,codestream_idx,palette,codestream_dimensions,ignore_premultiplied_alpha);
    return Result;
  }
  Boolean Ckdu_channel_mapping::add_alpha_to_configuration(Cjp2_channels ^_channels, Int32 _codestream_idx, Cjp2_palette ^_palette, Cjp2_dimensions ^_codestream_dimensions)
  {
    jp2_channels channels;
    void *channels_S = ((_channels==nullptr)?NULL:_channels->_kval.ToPointer());
    channels = *((jp2_channels *)(&channels_S));
    int codestream_idx = (int) _codestream_idx;
    jp2_palette palette;
    void *palette_S = ((_palette==nullptr)?NULL:_palette->_kval.ToPointer());
    palette = *((jp2_palette *)(&palette_S));
    jp2_dimensions codestream_dimensions;
    void *codestream_dimensions_S = ((_codestream_dimensions==nullptr)?NULL:_codestream_dimensions->_kval.ToPointer());
    codestream_dimensions = *((jp2_dimensions *)(&codestream_dimensions_S));
    bool Result;
    Result = _get_kref()->add_alpha_to_configuration(channels,codestream_idx,palette,codestream_dimensions);
    return Result;
  }
  Int32 Ckdu_channel_mapping::__property_get_num_channels()
  {
    int Result;
    Result = _get_kref()->get_num_channels();
    return Result;
  }
  void Ckdu_channel_mapping::__property_set_num_channels(Int32 _num)
  {
    int num = (int) _num;
    _get_kref()->set_num_channels(num);
  }
  Int32 Ckdu_channel_mapping::__property_get_num_colour_channels()
  {
    int Result;
    Result = _get_kref()->get_num_colour_channels();
    return Result;
  }
  Int32 Ckdu_channel_mapping::get_source_component(Int32 _n)
  {
    int n = (int) _n;
    int Result;
    Result = _get_kref()->get_source_component(n);
    return Result;
  }
  Int32 Ckdu_channel_mapping::get_default_rendering_precision(Int32 _n)
  {
    int n = (int) _n;
    int Result;
    Result = _get_kref()->get_default_rendering_precision(n);
    return Result;
  }
  Boolean Ckdu_channel_mapping::get_default_rendering_signed(Int32 _n)
  {
    int n = (int) _n;
    bool Result;
    Result = _get_kref()->get_default_rendering_signed(n);
    return Result;
  }
  Cjp2_colour_converter ^Ckdu_channel_mapping::get_colour_converter()
  {
    jp2_colour_converter *Result;
    Result = _get_kref()->get_colour_converter();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_colour_converter(Result);
  }
  void Ckdu_channel_mapping::Do_dispose(bool in_dispose)
  {
    kdu_channel_mapping *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_client
  Ckdu_client::Ckdu_client()
      : Ckdu_cache((kdu_cache *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_client();
  }
  void Ckdu_client::install_context_translator(Ckdu_client_translator ^_translator)
  {
    kdu_client_translator *translator = ((_translator==nullptr)?NULL:(_translator->_get_kref()));
    _get_kref()->install_context_translator(translator);
  }
  void Ckdu_client::connect(String ^ _server, String ^ _proxy, String ^ _request, String ^ _channel_transport, String ^ _cache_dir)
  {
    char * server = NULL;
    if (_server != nullptr)
      {
        server = new char[(_server->Length+1)*2];
        cli::pin_ptr<const wchar_t> server_W = PtrToStringChars(_server);
        wcstombs(server,server_W,(_server->Length+1)*2);
      }
    char * proxy = NULL;
    if (_proxy != nullptr)
      {
        proxy = new char[(_proxy->Length+1)*2];
        cli::pin_ptr<const wchar_t> proxy_W = PtrToStringChars(_proxy);
        wcstombs(proxy,proxy_W,(_proxy->Length+1)*2);
      }
    char * request = NULL;
    if (_request != nullptr)
      {
        request = new char[(_request->Length+1)*2];
        cli::pin_ptr<const wchar_t> request_W = PtrToStringChars(_request);
        wcstombs(request,request_W,(_request->Length+1)*2);
      }
    char * channel_transport = NULL;
    if (_channel_transport != nullptr)
      {
        channel_transport = new char[(_channel_transport->Length+1)*2];
        cli::pin_ptr<const wchar_t> channel_transport_W = PtrToStringChars(_channel_transport);
        wcstombs(channel_transport,channel_transport_W,(_channel_transport->Length+1)*2);
      }
    char * cache_dir = NULL;
    if (_cache_dir != nullptr)
      {
        cache_dir = new char[(_cache_dir->Length+1)*2];
        cli::pin_ptr<const wchar_t> cache_dir_W = PtrToStringChars(_cache_dir);
        wcstombs(cache_dir,cache_dir_W,(_cache_dir->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->connect(server,proxy,request,channel_transport,cache_dir);
    } catch (...) {
    if (server != NULL)
      delete[] server;
    if (proxy != NULL)
      delete[] proxy;
    if (request != NULL)
      delete[] request;
    if (channel_transport != NULL)
      delete[] channel_transport;
    if (cache_dir != NULL)
      delete[] cache_dir;
    throw;
    }
    if (server != NULL)
      delete[] server;
    if (proxy != NULL)
      delete[] proxy;
    if (request != NULL)
      delete[] request;
    if (channel_transport != NULL)
      delete[] channel_transport;
    if (cache_dir != NULL)
      delete[] cache_dir;
  }
  Boolean Ckdu_client::is_active()
  {
    bool Result;
    Result = _get_kref()->is_active();
    return Result;
  }
  Boolean Ckdu_client::is_one_time_request()
  {
    bool Result;
    Result = _get_kref()->is_one_time_request();
    return Result;
  }
  Boolean Ckdu_client::is_alive()
  {
    bool Result;
    Result = _get_kref()->is_alive();
    return Result;
  }
  Boolean Ckdu_client::is_idle()
  {
    bool Result;
    Result = _get_kref()->is_idle();
    return Result;
  }
  void Ckdu_client::disconnect(Boolean _keep_transport_open, Int32 _timeout_milliseconds)
  {
    bool keep_transport_open = (bool) _keep_transport_open;
    int timeout_milliseconds = (int) _timeout_milliseconds;
    _get_kref()->disconnect(keep_transport_open,timeout_milliseconds);
  }
  void Ckdu_client::disconnect(Boolean _keep_transport_open)
  {
    Int32 _timeout_milliseconds = (Int32)(2000);
    disconnect(_keep_transport_open,_timeout_milliseconds);
  }
  void Ckdu_client::disconnect()
  {
    Boolean _keep_transport_open = (Boolean)(false);
    Int32 _timeout_milliseconds = (Int32)(2000);
    disconnect(_keep_transport_open,_timeout_milliseconds);
  }
  Boolean Ckdu_client::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Ckdu_client::install_notifier(Ckdu_client_notifier ^_notifier)
  {
    kdu_client_notifier *notifier = ((_notifier==nullptr)?NULL:(_notifier->_get_kref()));
    _get_kref()->install_notifier(notifier);
  }
  String ^ Ckdu_client::get_status()
  {
    const char * Result;
    Result = _get_kref()->get_status();
    return gcnew String((char *) Result);
  }
  Boolean Ckdu_client::post_window(Ckdu_window ^_window)
  {
    kdu_window *window = ((_window==nullptr)?NULL:(_window->_get_kref()));
    bool Result;
    Result = _get_kref()->post_window(window);
    return Result;
  }
  Boolean Ckdu_client::get_window_in_progress(Ckdu_window ^_window)
  {
    kdu_window *window = ((_window==nullptr)?NULL:(_window->_get_kref()));
    bool Result;
    Result = _get_kref()->get_window_in_progress(window);
    return Result;
  }
  Int32 Ckdu_client::get_received_bytes()
  {
    int Result;
    Result = _get_kref()->get_received_bytes();
    return Result;
  }
  void Ckdu_client::Do_dispose(bool in_dispose)
  {
    kdu_client *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_client_notifier
  Ckdu_client_notifier::Ckdu_client_notifier()
  {
    _natively_owned = false;
    _aux_extended__kdu_client_notifier *_true_kref = new _aux_extended__kdu_client_notifier();
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_client_notifier(this);
  }
  void Ckdu_client_notifier::notify()
  {
  }
  void Ckdu_client_notifier::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_client_notifier *_kref_tmp = (_aux_extended__kdu_client_notifier *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_client_notifier *_delegator = (_mni_delegator__kdu_client_notifier *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_client_translator
  Ckdu_client_translator::Ckdu_client_translator()
  {
    _natively_owned = false;
    _kref = new kdu_client_translator();
  }
  void Ckdu_client_translator::init(Ckdu_cache ^_main_cache)
  {
    kdu_cache *main_cache = ((_main_cache==nullptr)?NULL:(_main_cache->_get_kref()));
    _get_kref()->init(main_cache);
  }
  void Ckdu_client_translator::close()
  {
    _get_kref()->close();
  }
  Boolean Ckdu_client_translator::update()
  {
    bool Result;
    Result = _get_kref()->update();
    return Result;
  }
  Int32 Ckdu_client_translator::get_num_context_members(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int Result;
    Result = _get_kref()->get_num_context_members(context_type,context_idx,remapping_ids);
    return Result;
  }
  Int32 Ckdu_client_translator::get_context_codestream(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int Result;
    Result = _get_kref()->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    return Result;
  }
  IntPtr Ckdu_client_translator::get_context_components(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, cli::interior_ptr<Int32> _num_components)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int num_components = (int) *_num_components;
    const int *Result;
    Result = _get_kref()->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    *_num_components = num_components;
    return IntPtr((void *) Result);
  }
  Boolean Ckdu_client_translator::perform_context_remapping(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, Ckdu_coords ^_resolution, Ckdu_dims ^_region)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    kdu_coords &resolution = *(_resolution->_get_kref());
    kdu_dims &region = *(_region->_get_kref());
    bool Result;
    Result = _get_kref()->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,resolution,region);
    return Result;
  }
  void Ckdu_client_translator::Do_dispose(bool in_dispose)
  {
    kdu_client_translator *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_clientx
  Ckdu_clientx::Ckdu_clientx()
      : Ckdu_client_translator((kdu_client_translator *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_clientx();
  }
  void Ckdu_clientx::close()
  {
    _get_kref()->close();
  }
  Boolean Ckdu_clientx::update()
  {
    bool Result;
    Result = _get_kref()->update();
    return Result;
  }
  Int32 Ckdu_clientx::get_num_context_members(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int Result;
    Result = _get_kref()->get_num_context_members(context_type,context_idx,remapping_ids);
    return Result;
  }
  Int32 Ckdu_clientx::get_context_codestream(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int Result;
    Result = _get_kref()->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    return Result;
  }
  IntPtr Ckdu_clientx::get_context_components(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, cli::interior_ptr<Int32> _num_components)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int num_components = (int) *_num_components;
    const int *Result;
    Result = _get_kref()->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    *_num_components = num_components;
    return IntPtr((void *) Result);
  }
  Boolean Ckdu_clientx::perform_context_remapping(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, Ckdu_coords ^_resolution, Ckdu_dims ^_region)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    kdu_coords &resolution = *(_resolution->_get_kref());
    kdu_dims &region = *(_region->_get_kref());
    bool Result;
    Result = _get_kref()->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,resolution,region);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_codestream
  Boolean Ckdu_codestream::exists()
  {
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_codestream::create(Csiz_params ^_siz, Ckdu_compressed_target ^_target, Ckdu_dims ^_fragment_region, Int32 _fragment_tiles_generated, Int64 _fragment_tile_bytes_generated)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    kdu_compressed_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    kdu_dims *fragment_region = ((_fragment_region==nullptr)?NULL:(_fragment_region->_get_kref()));
    int fragment_tiles_generated = (int) _fragment_tiles_generated;
    kdu_long fragment_tile_bytes_generated = (kdu_long) _fragment_tile_bytes_generated;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(siz,target,fragment_region,fragment_tiles_generated,fragment_tile_bytes_generated);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Csiz_params ^_siz, Ckdu_compressed_target ^_target, Ckdu_dims ^_fragment_region, Int32 _fragment_tiles_generated)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    kdu_compressed_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    kdu_dims *fragment_region = ((_fragment_region==nullptr)?NULL:(_fragment_region->_get_kref()));
    int fragment_tiles_generated = (int) _fragment_tiles_generated;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(siz,target,fragment_region,fragment_tiles_generated);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Csiz_params ^_siz, Ckdu_compressed_target ^_target, Ckdu_dims ^_fragment_region)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    kdu_compressed_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    kdu_dims *fragment_region = ((_fragment_region==nullptr)?NULL:(_fragment_region->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(siz,target,fragment_region);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Csiz_params ^_siz, Ckdu_compressed_target ^_target)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    kdu_compressed_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(siz,target);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Ckdu_compressed_source ^_source, Ckdu_thread_env ^_env)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(source,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Ckdu_compressed_source ^_source)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(source);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::create(Csiz_params ^_siz)
  {
    siz_params *siz = ((_siz==nullptr)?NULL:(_siz->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.create(siz);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::restart(Ckdu_compressed_target ^_target)
  {
    kdu_compressed_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.restart(target);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::restart(Ckdu_compressed_source ^_source, Ckdu_thread_env ^_env)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.restart(source,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::restart(Ckdu_compressed_source ^_source)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.restart(source);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::share_buffering(Ckdu_codestream ^_existing)
  {
    kdu_codestream existing;
    void *existing_S = ((_existing==nullptr)?NULL:_existing->_kval.ToPointer());
    existing = *((kdu_codestream *)(&existing_S));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.share_buffering(existing);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::destroy()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.destroy();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::enable_restart()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.enable_restart();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_persistent()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_persistent();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int64 Ckdu_codestream::augment_cache_threshold(Int32 _extra_bytes)
  {
    int extra_bytes = (int) _extra_bytes;
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.augment_cache_threshold(extra_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::set_tile_unloading_threshold(Int32 _max_tiles_on_list)
  {
    int max_tiles_on_list = (int) _max_tiles_on_list;
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.set_tile_unloading_threshold(max_tiles_on_list);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::is_last_fragment()
  {
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.is_last_fragment();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Csiz_params ^Ckdu_codestream::access_siz()
  {
    siz_params *Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.access_siz();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Csiz_params(Result);
  }
  Int32 Ckdu_codestream::get_num_components(Boolean _want_output_comps)
  {
    bool want_output_comps = (bool) _want_output_comps;
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_num_components(want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::get_num_components()
  {
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_num_components();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::get_bit_depth(Int32 _comp_idx, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (bool) _want_output_comps;
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth(comp_idx,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::get_bit_depth(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::get_signed(Int32 _comp_idx, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    bool want_output_comps = (bool) _want_output_comps;
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_signed(comp_idx,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::get_signed(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_signed(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_codestream::get_subsampling(Int32 _comp_idx, Ckdu_coords ^_subs, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords &subs = *(_subs->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_subsampling(comp_idx,subs,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_subsampling(Int32 _comp_idx, Ckdu_coords ^_subs)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords &subs = *(_subs->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_subsampling(comp_idx,subs);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_registration(Int32 _comp_idx, Ckdu_coords ^_scale, Ckdu_coords ^_crg, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords scale = *(_scale->_get_kref());
    kdu_coords &crg = *(_crg->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_registration(comp_idx,scale,crg,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_registration(Int32 _comp_idx, Ckdu_coords ^_scale, Ckdu_coords ^_crg)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords scale = *(_scale->_get_kref());
    kdu_coords &crg = *(_crg->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_registration(comp_idx,scale,crg);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_dims(Int32 _comp_idx, Ckdu_dims ^_dims, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    kdu_dims &dims = *(_dims->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_dims(comp_idx,dims,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_dims(Int32 _comp_idx, Ckdu_dims ^_dims)
  {
    int comp_idx = (int) _comp_idx;
    kdu_dims &dims = *(_dims->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_dims(comp_idx,dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_tile_partition(Ckdu_dims ^_partition)
  {
    kdu_dims &partition = *(_partition->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_tile_partition(partition);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_valid_tiles(Ckdu_dims ^_indices)
  {
    kdu_dims &indices = *(_indices->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_valid_tiles(indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Ckdu_codestream::find_tile(Int32 _comp_idx, Ckdu_coords ^_loc, Ckdu_coords ^_tile_idx, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords loc = *(_loc->_get_kref());
    kdu_coords &tile_idx = *(_tile_idx->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.find_tile(comp_idx,loc,tile_idx,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::find_tile(Int32 _comp_idx, Ckdu_coords ^_loc, Ckdu_coords ^_tile_idx)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords loc = *(_loc->_get_kref());
    kdu_coords &tile_idx = *(_tile_idx->_get_kref());
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.find_tile(comp_idx,loc,tile_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_codestream::get_tile_dims(Ckdu_coords ^_tile_idx, Int32 _comp_idx, Ckdu_dims ^_dims, Boolean _want_output_comps)
  {
    kdu_coords tile_idx = *(_tile_idx->_get_kref());
    int comp_idx = (int) _comp_idx;
    kdu_dims &dims = *(_dims->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_tile_dims(tile_idx,comp_idx,dims,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::get_tile_dims(Ckdu_coords ^_tile_idx, Int32 _comp_idx, Ckdu_dims ^_dims)
  {
    kdu_coords tile_idx = *(_tile_idx->_get_kref());
    int comp_idx = (int) _comp_idx;
    kdu_dims &dims = *(_dims->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.get_tile_dims(tile_idx,comp_idx,dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Ckdu_codestream::get_max_tile_layers()
  {
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_max_tile_layers();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::get_min_dwt_levels()
  {
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_min_dwt_levels();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::can_flip(Boolean _check_current_appearance_only)
  {
    bool check_current_appearance_only = (bool) _check_current_appearance_only;
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.can_flip(check_current_appearance_only);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_codestream::map_region(Int32 _comp_idx, Ckdu_dims ^_comp_region, Ckdu_dims ^_hires_region, Boolean _want_output_comps)
  {
    int comp_idx = (int) _comp_idx;
    kdu_dims comp_region = *(_comp_region->_get_kref());
    kdu_dims &hires_region = *(_hires_region->_get_kref());
    bool want_output_comps = (bool) _want_output_comps;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.map_region(comp_idx,comp_region,hires_region,want_output_comps);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::map_region(Int32 _comp_idx, Ckdu_dims ^_comp_region, Ckdu_dims ^_hires_region)
  {
    int comp_idx = (int) _comp_idx;
    kdu_dims comp_region = *(_comp_region->_get_kref());
    kdu_dims &hires_region = *(_hires_region->_get_kref());
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.map_region(comp_idx,comp_region,hires_region);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_textualization(Ckdu_message ^_output)
  {
    kdu_message *output = ((_output==nullptr)?NULL:(_output->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_textualization(output);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_max_bytes(Int64 _max_bytes, Boolean _simulate_parsing, Boolean _allow_periodic_trimming)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    bool simulate_parsing = (bool) _simulate_parsing;
    bool allow_periodic_trimming = (bool) _allow_periodic_trimming;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_max_bytes(max_bytes,simulate_parsing,allow_periodic_trimming);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_max_bytes(Int64 _max_bytes, Boolean _simulate_parsing)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    bool simulate_parsing = (bool) _simulate_parsing;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_max_bytes(max_bytes,simulate_parsing);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_max_bytes(Int64 _max_bytes)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_max_bytes(max_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_min_slope_threshold(Int32 _min_slope)
  {
    kdu_uint16 min_slope = (kdu_uint16) _min_slope;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_min_slope_threshold(min_slope);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_resilient(Boolean _expect_ubiquitous_sops)
  {
    bool expect_ubiquitous_sops = (bool) _expect_ubiquitous_sops;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_resilient(expect_ubiquitous_sops);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_resilient()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_resilient();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_fussy()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_fussy();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_fast()
  {
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_fast();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::apply_input_restrictions(Int32 _first_component, Int32 _max_components, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region_of_interest, Int32 _access_mode)
  {
    int first_component = (int) _first_component;
    int max_components = (int) _max_components;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = ((_region_of_interest==nullptr)?NULL:(_region_of_interest->_get_kref()));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.apply_input_restrictions(first_component,max_components,discard_levels,max_layers,region_of_interest,access_mode);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::apply_input_restrictions(Int32 _first_component, Int32 _max_components, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region_of_interest)
  {
    int first_component = (int) _first_component;
    int max_components = (int) _max_components;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = ((_region_of_interest==nullptr)?NULL:(_region_of_interest->_get_kref()));
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.apply_input_restrictions(first_component,max_components,discard_levels,max_layers,region_of_interest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::apply_input_restrictions(Int32 _num_indices, cli::array<Int32> ^_component_indices, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region_of_interest, Int32 _access_mode)
  {
    int num_indices = (int) _num_indices;
    cli::pin_ptr<Int32> component_indices = ((_component_indices==nullptr)?nullptr:(&_component_indices[0]));
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims *region_of_interest = ((_region_of_interest==nullptr)?NULL:(_region_of_interest->_get_kref()));
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.apply_input_restrictions(num_indices,component_indices,discard_levels,max_layers,region_of_interest,access_mode);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::change_appearance(Boolean _transpose, Boolean _vflip, Boolean _hflip)
  {
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.change_appearance(transpose,vflip,hflip);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_codestream::set_block_truncation(Int32 _factor)
  {
    kdu_int32 factor = (kdu_int32) _factor;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.set_block_truncation(factor);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_tile ^Ckdu_codestream::open_tile(Ckdu_coords ^_tile_idx, Ckdu_thread_env ^_env)
  {
    kdu_coords tile_idx = *(_tile_idx->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_tile Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.open_tile(tile_idx,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_tile ^_Result = gcnew Ckdu_tile;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_tile ^Ckdu_codestream::open_tile(Ckdu_coords ^_tile_idx)
  {
    kdu_coords tile_idx = *(_tile_idx->_get_kref());
    kdu_tile Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.open_tile(tile_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_tile ^_Result = gcnew Ckdu_tile;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_codestream_comment ^Ckdu_codestream::get_comment(Ckdu_codestream_comment ^_prev)
  {
    kdu_codestream_comment prev;
    void *prev_S = ((_prev==nullptr)?NULL:_prev->_kval.ToPointer());
    prev = *((kdu_codestream_comment *)(&prev_S));
    kdu_codestream_comment Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_comment(prev);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_codestream_comment ^_Result = gcnew Ckdu_codestream_comment;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_codestream_comment ^Ckdu_codestream::get_comment()
  {
    kdu_codestream_comment Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_comment();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_codestream_comment ^_Result = gcnew Ckdu_codestream_comment;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_codestream_comment ^Ckdu_codestream::add_comment()
  {
    kdu_codestream_comment Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.add_comment();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_codestream_comment ^_Result = gcnew Ckdu_codestream_comment;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs, cli::array<Int32> ^_layer_thresholds, Boolean _trim_to_rate, Boolean _record_in_comseg, Double _tolerance, Ckdu_thread_env ^_env)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        layer_thresholds = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_thresholds[_n_] = (kdu_uint16) _layer_thresholds[_n_];
      }
    bool trim_to_rate = (bool) _trim_to_rate;
    bool record_in_comseg = (bool) _record_in_comseg;
    double tolerance = (double) _tolerance;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg,tolerance,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_thresholds[_n_] = (Int32) layer_thresholds[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs, cli::array<Int32> ^_layer_thresholds, Boolean _trim_to_rate, Boolean _record_in_comseg, Double _tolerance)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        layer_thresholds = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_thresholds[_n_] = (kdu_uint16) _layer_thresholds[_n_];
      }
    bool trim_to_rate = (bool) _trim_to_rate;
    bool record_in_comseg = (bool) _record_in_comseg;
    double tolerance = (double) _tolerance;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg,tolerance);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_thresholds[_n_] = (Int32) layer_thresholds[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs, cli::array<Int32> ^_layer_thresholds, Boolean _trim_to_rate, Boolean _record_in_comseg)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        layer_thresholds = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_thresholds[_n_] = (kdu_uint16) _layer_thresholds[_n_];
      }
    bool trim_to_rate = (bool) _trim_to_rate;
    bool record_in_comseg = (bool) _record_in_comseg;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate,record_in_comseg);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_thresholds[_n_] = (Int32) layer_thresholds[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs, cli::array<Int32> ^_layer_thresholds, Boolean _trim_to_rate)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        layer_thresholds = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_thresholds[_n_] = (kdu_uint16) _layer_thresholds[_n_];
      }
    bool trim_to_rate = (bool) _trim_to_rate;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs,layer_thresholds,trim_to_rate);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_thresholds[_n_] = (Int32) layer_thresholds[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs, cli::array<Int32> ^_layer_thresholds)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    kdu_uint16 *layer_thresholds = NULL;
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        layer_thresholds = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_thresholds[_n_] = (kdu_uint16) _layer_thresholds[_n_];
      }
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs,layer_thresholds);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_thresholds != nullptr)
      {
        int _len_ = _layer_thresholds->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_thresholds[_n_] = (Int32) layer_thresholds[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_thresholds != NULL)
      delete[] layer_thresholds;
  }
  void Ckdu_codestream::flush(cli::array<Int64> ^_layer_bytes, Int32 _num_layer_specs)
  {
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int num_layer_specs = (int) _num_layer_specs;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.flush(layer_bytes,num_layer_specs);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
  }
  Int32 Ckdu_codestream::trans_out(Int64 _max_bytes, cli::array<Int64> ^_layer_bytes, Int32 _layer_bytes_entries, Boolean _record_in_comseg, Ckdu_thread_env ^_env)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int layer_bytes_entries = (int) _layer_bytes_entries;
    bool record_in_comseg = (bool) _record_in_comseg;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    int Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out(max_bytes,layer_bytes,layer_bytes_entries,record_in_comseg,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    return Result;
  }
  Int32 Ckdu_codestream::trans_out(Int64 _max_bytes, cli::array<Int64> ^_layer_bytes, Int32 _layer_bytes_entries, Boolean _record_in_comseg)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int layer_bytes_entries = (int) _layer_bytes_entries;
    bool record_in_comseg = (bool) _record_in_comseg;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out(max_bytes,layer_bytes,layer_bytes_entries,record_in_comseg);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    return Result;
  }
  Int32 Ckdu_codestream::trans_out(Int64 _max_bytes, cli::array<Int64> ^_layer_bytes, Int32 _layer_bytes_entries)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int layer_bytes_entries = (int) _layer_bytes_entries;
    int Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out(max_bytes,layer_bytes,layer_bytes_entries);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    return Result;
  }
  Int32 Ckdu_codestream::trans_out(Int64 _max_bytes, cli::array<Int64> ^_layer_bytes)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    int Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out(max_bytes,layer_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    return Result;
  }
  Int32 Ckdu_codestream::trans_out(Int64 _max_bytes)
  {
    kdu_long max_bytes = (kdu_long) _max_bytes;
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out(max_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::trans_out()
  {
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.trans_out();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::ready_for_flush(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.ready_for_flush(env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream::ready_for_flush()
  {
    bool Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.ready_for_flush();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_codestream::get_total_bytes(Boolean _exclude_main_header)
  {
    bool exclude_main_header = (bool) _exclude_main_header;
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_total_bytes(exclude_main_header);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_codestream::get_total_bytes()
  {
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_total_bytes();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_codestream::get_num_tparts()
  {
    int Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_num_tparts();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_codestream::collect_timing_stats(Int32 _num_coder_iterations)
  {
    int num_coder_iterations = (int) _num_coder_iterations;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    _kval_cast.collect_timing_stats(num_coder_iterations);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Double Ckdu_codestream::get_timing_stats(cli::array<Int64> ^_num_samples, Boolean _coder_only)
  {
    kdu_long *num_samples = NULL;
    if (_num_samples != nullptr)
      {
        int _len_ = _num_samples->Length;
        num_samples = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          num_samples[_n_] = (kdu_long) _num_samples[_n_];
      }
    bool coder_only = (bool) _coder_only;
    double Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_timing_stats(num_samples,coder_only);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (num_samples != NULL)
      delete[] num_samples;
    throw;
    }
    if (_num_samples != nullptr)
      {
        int _len_ = _num_samples->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _num_samples[_n_] = (Int64) num_samples[_n_];
      }
    if (num_samples != NULL)
      delete[] num_samples;
    return Result;
  }
  Double Ckdu_codestream::get_timing_stats(cli::array<Int64> ^_num_samples)
  {
    kdu_long *num_samples = NULL;
    if (_num_samples != nullptr)
      {
        int _len_ = _num_samples->Length;
        num_samples = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          num_samples[_n_] = (kdu_long) _num_samples[_n_];
      }
    double Result;
    try { // So we can clean up temporary arrays
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_timing_stats(num_samples);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (num_samples != NULL)
      delete[] num_samples;
    throw;
    }
    if (_num_samples != nullptr)
      {
        int _len_ = _num_samples->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _num_samples[_n_] = (Int64) num_samples[_n_];
      }
    if (num_samples != NULL)
      delete[] num_samples;
    return Result;
  }
  Int64 Ckdu_codestream::get_compressed_data_memory(Boolean _get_peak_allocation)
  {
    bool get_peak_allocation = (bool) _get_peak_allocation;
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_compressed_data_memory(get_peak_allocation);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_codestream::get_compressed_data_memory()
  {
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_compressed_data_memory();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_codestream::get_compressed_state_memory(Boolean _get_peak_allocation)
  {
    bool get_peak_allocation = (bool) _get_peak_allocation;
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_compressed_state_memory(get_peak_allocation);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_codestream::get_compressed_state_memory()
  {
    kdu_long Result;
    kdu_codestream _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream *)(&_kval_cast_S));
    Result = _kval_cast.get_compressed_state_memory();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_codestream_comment
  String ^ Ckdu_codestream_comment::get_text()
  {
    const char * Result;
    kdu_codestream_comment _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream_comment *)(&_kval_cast_S));
    Result = _kval_cast.get_text();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return gcnew String((char *) Result);
  }
  Boolean Ckdu_codestream_comment::check_readonly()
  {
    bool Result;
    kdu_codestream_comment _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream_comment *)(&_kval_cast_S));
    Result = _kval_cast.check_readonly();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_codestream_comment::put_text(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    kdu_codestream_comment _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_codestream_comment *)(&_kval_cast_S));
    Result = _kval_cast.put_text(string);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compositor_buf
  Ckdu_compositor_buf::Ckdu_compositor_buf()
  {
    _natively_owned = false;
    _kref = new kdu_compositor_buf();
  }
  void Ckdu_compositor_buf::init(IntPtr _buf, Int32 _row_gap)
  {
    kdu_uint32 *buf = (kdu_uint32 *)(_buf.ToPointer());
    int row_gap = (int) _row_gap;
    _get_kref()->init(buf,row_gap);
  }
  Boolean Ckdu_compositor_buf::is_read_access_allowed()
  {
    bool Result;
    Result = _get_kref()->is_read_access_allowed();
    return Result;
  }
  Boolean Ckdu_compositor_buf::set_read_accessibility(Boolean _read_access_required)
  {
    bool read_access_required = (bool) _read_access_required;
    bool Result;
    Result = _get_kref()->set_read_accessibility(read_access_required);
    return Result;
  }
  IntPtr Ckdu_compositor_buf::get_buf(cli::interior_ptr<Int32> _row_gap, Boolean _read_write)
  {
    int row_gap = (int) *_row_gap;
    bool read_write = (bool) _read_write;
    kdu_uint32 *Result;
    Result = _get_kref()->get_buf(row_gap,read_write);
    *_row_gap = row_gap;
    return IntPtr((void *) Result);
  }
  void Ckdu_compositor_buf::get_region(Ckdu_dims ^_src_region, cli::array<Int32> ^_tgt_buf, Int32 _tgt_offset, Int32 _tgt_row_gap)
  {
    kdu_dims src_region = *(_src_region->_get_kref());
    cli::pin_ptr<Int32> tgt_buf = ((_tgt_buf==nullptr)?nullptr:(&_tgt_buf[0]));
    int tgt_offset = (int) _tgt_offset;
    int tgt_row_gap = (int) _tgt_row_gap;
    _get_kref()->get_region(src_region,tgt_buf,tgt_offset,tgt_row_gap);
  }
  void Ckdu_compositor_buf::get_region(Ckdu_dims ^_src_region, cli::array<Int32> ^_tgt_buf, Int32 _tgt_offset)
  {
    kdu_dims src_region = *(_src_region->_get_kref());
    cli::pin_ptr<Int32> tgt_buf = ((_tgt_buf==nullptr)?nullptr:(&_tgt_buf[0]));
    int tgt_offset = (int) _tgt_offset;
    _get_kref()->get_region(src_region,tgt_buf,tgt_offset);
  }
  void Ckdu_compositor_buf::get_region(Ckdu_dims ^_src_region, cli::array<Int32> ^_tgt_buf)
  {
    kdu_dims src_region = *(_src_region->_get_kref());
    cli::pin_ptr<Int32> tgt_buf = ((_tgt_buf==nullptr)?nullptr:(&_tgt_buf[0]));
    _get_kref()->get_region(src_region,tgt_buf);
  }
  void Ckdu_compositor_buf::Do_dispose(bool in_dispose)
  {
    kdu_compositor_buf *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_source
  Boolean Ckdu_compressed_source::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Int32 Ckdu_compressed_source::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Int32 Ckdu_compressed_source::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  Boolean Ckdu_compressed_source::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Ckdu_compressed_source::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  Boolean Ckdu_compressed_source::set_tileheader_scope(Int32 _tnum, Int32 _num_tiles)
  {
    int tnum = (int) _tnum;
    int num_tiles = (int) _num_tiles;
    bool Result;
    Result = _get_kref()->set_tileheader_scope(tnum,num_tiles);
    return Result;
  }
  Boolean Ckdu_compressed_source::set_precinct_scope(Int64 _unique_id)
  {
    kdu_long unique_id = (kdu_long) _unique_id;
    bool Result;
    Result = _get_kref()->set_precinct_scope(unique_id);
    return Result;
  }
  void Ckdu_compressed_source::Do_dispose(bool in_dispose)
  {
    kdu_compressed_source *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_source_nonnative
  Ckdu_compressed_source_nonnative::Ckdu_compressed_source_nonnative()
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    _natively_owned = false;
    _aux_extended__kdu_compressed_source_nonnative *_true_kref = new _aux_extended__kdu_compressed_source_nonnative();
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_compressed_source_nonnative(this);
  }
  Int32 Ckdu_compressed_source_nonnative::get_capabilities()
  {
    return (Int32) 0;
  }
  Boolean Ckdu_compressed_source_nonnative::seek(Int64 _offset)
  {
    return (Boolean) 0;
  }
  Int64 Ckdu_compressed_source_nonnative::get_pos()
  {
    return (Int64) 0;
  }
  Boolean Ckdu_compressed_source_nonnative::set_tileheader_scope(Int32 _tnum, Int32 _num_tiles)
  {
    return (Boolean) 0;
  }
  Boolean Ckdu_compressed_source_nonnative::set_precinct_scope(Int64 _unique_id)
  {
    return (Boolean) 0;
  }
  Int32 Ckdu_compressed_source_nonnative::post_read(Int32 _num_bytes)
  {
    return (Int32) 0;
  }
  void Ckdu_compressed_source_nonnative::push_data(cli::array<Byte> ^_data, Int32 _first_byte_pos, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    _get_kref()->push_data(data,first_byte_pos,num_bytes);
  }
  void Ckdu_compressed_source_nonnative::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_compressed_source_nonnative *_kref_tmp = (_aux_extended__kdu_compressed_source_nonnative *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_compressed_source_nonnative *_delegator = (_mni_delegator__kdu_compressed_source_nonnative *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_target
  Boolean Ckdu_compressed_target::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Boolean Ckdu_compressed_target::start_rewrite(Int64 _backtrack)
  {
    kdu_long backtrack = (kdu_long) _backtrack;
    bool Result;
    Result = _get_kref()->start_rewrite(backtrack);
    return Result;
  }
  Boolean Ckdu_compressed_target::end_rewrite()
  {
    bool Result;
    Result = _get_kref()->end_rewrite();
    return Result;
  }
  Boolean Ckdu_compressed_target::write(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->write(buf,num_bytes);
    return Result;
  }
  void Ckdu_compressed_target::set_target_size(Int64 _num_bytes)
  {
    kdu_long num_bytes = (kdu_long) _num_bytes;
    _get_kref()->set_target_size(num_bytes);
  }
  void Ckdu_compressed_target::Do_dispose(bool in_dispose)
  {
    kdu_compressed_target *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_target_nonnative
  Ckdu_compressed_target_nonnative::Ckdu_compressed_target_nonnative()
      : Ckdu_compressed_target((kdu_compressed_target *) NULL)
  {
    _natively_owned = false;
    _aux_extended__kdu_compressed_target_nonnative *_true_kref = new _aux_extended__kdu_compressed_target_nonnative();
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_compressed_target_nonnative(this);
  }
  Boolean Ckdu_compressed_target_nonnative::start_rewrite(Int64 _backtrack)
  {
    return (Boolean) 0;
  }
  Boolean Ckdu_compressed_target_nonnative::end_rewrite()
  {
    return (Boolean) 0;
  }
  void Ckdu_compressed_target_nonnative::set_target_size(Int64 _num_bytes)
  {
  }
  Boolean Ckdu_compressed_target_nonnative::post_write(Int32 _num_bytes)
  {
    return (Boolean) 0;
  }
  Int32 Ckdu_compressed_target_nonnative::pull_data(cli::array<Byte> ^_data, Int32 _first_byte_pos, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int first_byte_pos = (int) _first_byte_pos;
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->pull_data(data,first_byte_pos,num_bytes);
    return Result;
  }
  void Ckdu_compressed_target_nonnative::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_compressed_target_nonnative *_kref_tmp = (_aux_extended__kdu_compressed_target_nonnative *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_compressed_target_nonnative *_delegator = (_mni_delegator__kdu_compressed_target_nonnative *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_video_source
  Int64 Ckdu_compressed_video_source::get_timescale()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_timescale();
    return Result;
  }
  Int32 Ckdu_compressed_video_source::get_field_order()
  {
    kdu_field_order Result;
    Result = _get_kref()->get_field_order();
    return Result;
  }
  void Ckdu_compressed_video_source::set_field_mode(Int32 _which)
  {
    int which = (int) _which;
    _get_kref()->set_field_mode(which);
  }
  Int32 Ckdu_compressed_video_source::get_num_frames()
  {
    int Result;
    Result = _get_kref()->get_num_frames();
    return Result;
  }
  Boolean Ckdu_compressed_video_source::seek_to_frame(Int32 _frame_idx)
  {
    int frame_idx = (int) _frame_idx;
    bool Result;
    Result = _get_kref()->seek_to_frame(frame_idx);
    return Result;
  }
  Int64 Ckdu_compressed_video_source::get_duration()
  {
    kdu_long Result;
    Result = _get_kref()->get_duration();
    return Result;
  }
  Int32 Ckdu_compressed_video_source::time_to_frame(Int64 _time_instant)
  {
    kdu_long time_instant = (kdu_long) _time_instant;
    int Result;
    Result = _get_kref()->time_to_frame(time_instant);
    return Result;
  }
  Int64 Ckdu_compressed_video_source::get_frame_instant()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_instant();
    return Result;
  }
  Int64 Ckdu_compressed_video_source::get_frame_period()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_period();
    return Result;
  }
  Int32 Ckdu_compressed_video_source::open_image()
  {
    int Result;
    Result = _get_kref()->open_image();
    return Result;
  }
  void Ckdu_compressed_video_source::close_image()
  {
    _get_kref()->close_image();
  }
  void Ckdu_compressed_video_source::Do_dispose(bool in_dispose)
  {
    kdu_compressed_video_source *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_compressed_video_target
  void Ckdu_compressed_video_target::open_image()
  {
    _get_kref()->open_image();
  }
  void Ckdu_compressed_video_target::close_image(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    _get_kref()->close_image(codestream);
  }
  void Ckdu_compressed_video_target::Do_dispose(bool in_dispose)
  {
    kdu_compressed_video_target *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_coords
  Ckdu_coords::Ckdu_coords()
  {
    _natively_owned = false;
    _kref = new kdu_coords();
  }
  Ckdu_coords::Ckdu_coords(Int32 _x, Int32 _y)
  {
    int x = (int) _x;
    int y = (int) _y;
    _natively_owned = false;
    _kref = new kdu_coords(x,y);
  }
  void Ckdu_coords::assign(Ckdu_coords ^_src)
  {
    kdu_coords &src = *(_src->_get_kref());
    _get_kref()->assign(src);
  }
  Int32 Ckdu_coords::__property_get_x()
  {
    int Result;
    Result = _get_kref()->get_x();
    return Result;
  }
  Int32 Ckdu_coords::__property_get_y()
  {
    int Result;
    Result = _get_kref()->get_y();
    return Result;
  }
  void Ckdu_coords::__property_set_x(Int32 _x)
  {
    int x = (int) _x;
    _get_kref()->set_x(x);
  }
  void Ckdu_coords::__property_set_y(Int32 _y)
  {
    int y = (int) _y;
    _get_kref()->set_y(y);
  }
  void Ckdu_coords::transpose()
  {
    _get_kref()->transpose();
  }
  Ckdu_coords ^Ckdu_coords::plus(Ckdu_coords ^_rhs)
  {
    kdu_coords &rhs = *(_rhs->_get_kref());
    kdu_coords Result;
    Result = _get_kref()->plus(rhs);
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_coords ^Ckdu_coords::minus(Ckdu_coords ^_rhs)
  {
    kdu_coords &rhs = *(_rhs->_get_kref());
    kdu_coords Result;
    Result = _get_kref()->minus(rhs);
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_coords ^Ckdu_coords::add(Ckdu_coords ^_rhs)
  {
    kdu_coords &rhs = *(_rhs->_get_kref());
    kdu_coords Result;
    Result = _get_kref()->add(rhs);
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_coords ^Ckdu_coords::subtract(Ckdu_coords ^_rhs)
  {
    kdu_coords &rhs = *(_rhs->_get_kref());
    kdu_coords Result;
    Result = _get_kref()->subtract(rhs);
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Ckdu_coords::equals(Ckdu_coords ^_rhs)
  {
    kdu_coords &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->equals(rhs);
    return Result;
  }
  void Ckdu_coords::from_apparent(Boolean _transp, Boolean _vflip, Boolean _hflip)
  {
    bool transp = (bool) _transp;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->from_apparent(transp,vflip,hflip);
  }
  void Ckdu_coords::to_apparent(Boolean _transp, Boolean _vflip, Boolean _hflip)
  {
    bool transp = (bool) _transp;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->to_apparent(transp,vflip,hflip);
  }
  void Ckdu_coords::Do_dispose(bool in_dispose)
  {
    kdu_coords *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_decoder
  Ckdu_decoder::Ckdu_decoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_decoder(subband,allocator,use_shorts,normalization,pull_offset,env,env_queue);
  }
  Ckdu_decoder::Ckdu_decoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset, Ckdu_thread_env ^_env)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_decoder(subband,allocator,use_shorts,normalization,pull_offset,env);
  }
  Ckdu_decoder::Ckdu_decoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    _natively_owned = false;
    _kref = new kdu_decoder(subband,allocator,use_shorts,normalization,pull_offset);
  }
  Ckdu_decoder::Ckdu_decoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_decoder(subband,allocator,use_shorts,normalization);
  }
  Ckdu_decoder::Ckdu_decoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_decoder(subband,allocator,use_shorts);
  }
  void Ckdu_decoder::Do_dispose(bool in_dispose)
  {
    kdu_decoder *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_dims
  Ckdu_dims::Ckdu_dims()
  {
    _natively_owned = false;
    _kref = new kdu_dims();
  }
  void Ckdu_dims::assign(Ckdu_dims ^_src)
  {
    kdu_dims &src = *(_src->_get_kref());
    _get_kref()->assign(src);
  }
  Ckdu_coords ^Ckdu_dims::access_pos()
  {
    kdu_coords *Result;
    Result = _get_kref()->access_pos();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_coords(Result);
  }
  Ckdu_coords ^Ckdu_dims::access_size()
  {
    kdu_coords *Result;
    Result = _get_kref()->access_size();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_coords(Result);
  }
  Int64 Ckdu_dims::area()
  {
    kdu_long Result;
    Result = _get_kref()->area();
    return Result;
  }
  void Ckdu_dims::transpose()
  {
    _get_kref()->transpose();
  }
  Ckdu_dims ^Ckdu_dims::intersection(Ckdu_dims ^_rhs)
  {
    kdu_dims &rhs = *(_rhs->_get_kref());
    kdu_dims Result;
    Result = _get_kref()->intersection(rhs);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Ckdu_dims::intersects(Ckdu_dims ^_rhs)
  {
    kdu_dims &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->intersects(rhs);
    return Result;
  }
  Boolean Ckdu_dims::is_empty()
  {
    bool Result;
    Result = _get_kref()->is_empty();
    return Result;
  }
  Boolean Ckdu_dims::equals(Ckdu_dims ^_rhs)
  {
    kdu_dims &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->equals(rhs);
    return Result;
  }
  void Ckdu_dims::from_apparent(Boolean _transp, Boolean _vflip, Boolean _hflip)
  {
    bool transp = (bool) _transp;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->from_apparent(transp,vflip,hflip);
  }
  void Ckdu_dims::to_apparent(Boolean _transp, Boolean _vflip, Boolean _hflip)
  {
    bool transp = (bool) _transp;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->to_apparent(transp,vflip,hflip);
  }
  void Ckdu_dims::Do_dispose(bool in_dispose)
  {
    kdu_dims *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_encoder
  Ckdu_encoder::Ckdu_encoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_encoder(subband,allocator,use_shorts,normalization,roi,env,env_queue);
  }
  Ckdu_encoder::Ckdu_encoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi, Ckdu_thread_env ^_env)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_encoder(subband,allocator,use_shorts,normalization,roi,env);
  }
  Ckdu_encoder::Ckdu_encoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_roi_node ^_roi)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_roi_node *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_encoder(subband,allocator,use_shorts,normalization,roi);
  }
  Ckdu_encoder::Ckdu_encoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_encoder(subband,allocator,use_shorts,normalization);
  }
  Ckdu_encoder::Ckdu_encoder(Ckdu_subband ^_subband, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_push_ifc((kdu_push_ifc *) NULL)
  {
    kdu_subband subband;
    void *subband_S = ((_subband==nullptr)?NULL:_subband->_kval.ToPointer());
    subband = *((kdu_subband *)(&subband_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_encoder(subband,allocator,use_shorts);
  }
  void Ckdu_encoder::Do_dispose(bool in_dispose)
  {
    kdu_encoder *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_line_buf
  Ckdu_line_buf::Ckdu_line_buf()
  {
    _natively_owned = false;
    _kref = new kdu_line_buf();
  }
  void Ckdu_line_buf::pre_create(Ckdu_sample_allocator ^_allocator, Int32 _width, Boolean _absolute, Boolean _use_shorts, Int32 _extend_left, Int32 _extend_right)
  {
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    int width = (int) _width;
    bool absolute = (bool) _absolute;
    bool use_shorts = (bool) _use_shorts;
    int extend_left = (int) _extend_left;
    int extend_right = (int) _extend_right;
    _get_kref()->pre_create(allocator,width,absolute,use_shorts,extend_left,extend_right);
  }
  void Ckdu_line_buf::pre_create(Ckdu_sample_allocator ^_allocator, Int32 _width, Boolean _absolute, Boolean _use_shorts, Int32 _extend_left)
  {
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    int width = (int) _width;
    bool absolute = (bool) _absolute;
    bool use_shorts = (bool) _use_shorts;
    int extend_left = (int) _extend_left;
    _get_kref()->pre_create(allocator,width,absolute,use_shorts,extend_left);
  }
  void Ckdu_line_buf::pre_create(Ckdu_sample_allocator ^_allocator, Int32 _width, Boolean _absolute, Boolean _use_shorts)
  {
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    int width = (int) _width;
    bool absolute = (bool) _absolute;
    bool use_shorts = (bool) _use_shorts;
    _get_kref()->pre_create(allocator,width,absolute,use_shorts);
  }
  void Ckdu_line_buf::create()
  {
    _get_kref()->create();
  }
  void Ckdu_line_buf::destroy()
  {
    _get_kref()->destroy();
  }
  Boolean Ckdu_line_buf::get_floats(cli::array<Single> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->get_floats(buffer,first_idx,num_samples);
    return Result;
  }
  Boolean Ckdu_line_buf::set_floats(cli::array<Single> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->set_floats(buffer,first_idx,num_samples);
    return Result;
  }
  Boolean Ckdu_line_buf::get_ints(cli::array<Int32> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->get_ints(buffer,first_idx,num_samples);
    return Result;
  }
  Boolean Ckdu_line_buf::set_ints(cli::array<Int32> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->set_ints(buffer,first_idx,num_samples);
    return Result;
  }
  Boolean Ckdu_line_buf::get_ints(cli::array<Int16> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->get_ints(buffer,first_idx,num_samples);
    return Result;
  }
  Boolean Ckdu_line_buf::set_ints(cli::array<Int16> ^_buffer, Int32 _first_idx, Int32 _num_samples)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    int first_idx = (int) _first_idx;
    int num_samples = (int) _num_samples;
    bool Result;
    Result = _get_kref()->set_ints(buffer,first_idx,num_samples);
    return Result;
  }
  Int32 Ckdu_line_buf::get_width()
  {
    int Result;
    Result = _get_kref()->get_width();
    return Result;
  }
  Boolean Ckdu_line_buf::is_absolute()
  {
    bool Result;
    Result = _get_kref()->is_absolute();
    return Result;
  }
  void Ckdu_line_buf::Do_dispose(bool in_dispose)
  {
    kdu_line_buf *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_message
  Ckdu_message::Ckdu_message()
  {
    _natively_owned = false;
    _aux_extended__kdu_message *_true_kref = new _aux_extended__kdu_message();
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_message(this);
  }
  void Ckdu_message::put_text(String ^ _string)
  {
  }
  void Ckdu_message::put_text(cli::array<Int32> ^_string)
  {
    kdu_uint16 *string = NULL;
    if (_string != nullptr)
      {
        int _len_ = _string->Length;
        string = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          string[_n_] = (kdu_uint16) _string[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->put_text(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (_string != nullptr)
      {
        int _len_ = _string->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _string[_n_] = (Int32) string[_n_];
      }
    if (string != NULL)
      delete[] string;
  }
  void Ckdu_message::flush(Boolean _end_of_message)
  {
  }
  void Ckdu_message::flush()
  {
    Boolean _end_of_message = (Boolean)(false);
    flush(_end_of_message);
  }
  void Ckdu_message::start_message()
  {
  }
  Boolean Ckdu_message::set_hex_mode(Boolean _new_mode)
  {
    bool new_mode = (bool) _new_mode;
    bool Result;
    Result = _get_kref()->set_hex_mode(new_mode);
    return Result;
  }
  void Ckdu_message::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_message *_kref_tmp = (_aux_extended__kdu_message *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_message *_delegator = (_mni_delegator__kdu_message *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_message_formatter
  Ckdu_message_formatter::Ckdu_message_formatter(Ckdu_message ^_output, Int32 _max_line)
      : Ckdu_message((kdu_message *) NULL)
  {
    kdu_message *output = ((_output==nullptr)?NULL:(_output->_get_kref()));
    int max_line = (int) _max_line;
    _natively_owned = false;
    _kref = new kdu_message_formatter(output,max_line);
  }
  Ckdu_message_formatter::Ckdu_message_formatter(Ckdu_message ^_output)
      : Ckdu_message((kdu_message *) NULL)
  {
    kdu_message *output = ((_output==nullptr)?NULL:(_output->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_message_formatter(output);
  }
  void Ckdu_message_formatter::set_master_indent(Int32 _val)
  {
    int val = (int) _val;
    _get_kref()->set_master_indent(val);
  }
  void Ckdu_message_formatter::put_text(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->put_text(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
  }
  void Ckdu_message_formatter::put_text(cli::array<Int32> ^_string)
  {
    kdu_uint16 *string = NULL;
    if (_string != nullptr)
      {
        int _len_ = _string->Length;
        string = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          string[_n_] = (kdu_uint16) _string[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->put_text(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (_string != nullptr)
      {
        int _len_ = _string->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _string[_n_] = (Int32) string[_n_];
      }
    if (string != NULL)
      delete[] string;
  }
  void Ckdu_message_formatter::flush(Boolean _end_of_message)
  {
    bool end_of_message = (bool) _end_of_message;
    _get_kref()->flush(end_of_message);
  }
  void Ckdu_message_formatter::flush()
  {
    Boolean _end_of_message = (Boolean)(false);
    flush(_end_of_message);
  }
  void Ckdu_message_formatter::start_message()
  {
    _get_kref()->start_message();
  }
  void Ckdu_message_formatter::Do_dispose(bool in_dispose)
  {
    kdu_message_formatter *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_metareq
  Boolean Ckdu_metareq::equals(Ckdu_metareq ^_rhs)
  {
    kdu_metareq &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->equals(rhs);
    return Result;
  }
  Int64 Ckdu_metareq::__property_get_box_type()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_box_type();
    return Result;
  }
  Int32 Ckdu_metareq::__property_get_qualifier()
  {
    int Result;
    Result = _get_kref()->get_qualifier();
    return Result;
  }
  Boolean Ckdu_metareq::__property_get_priority()
  {
    bool Result;
    Result = _get_kref()->get_priority();
    return Result;
  }
  Int32 Ckdu_metareq::__property_get_byte_limit()
  {
    int Result;
    Result = _get_kref()->get_byte_limit();
    return Result;
  }
  Boolean Ckdu_metareq::__property_get_recurse()
  {
    bool Result;
    Result = _get_kref()->get_recurse();
    return Result;
  }
  Int64 Ckdu_metareq::__property_get_root_bin_id()
  {
    kdu_long Result;
    Result = _get_kref()->get_root_bin_id();
    return Result;
  }
  Int32 Ckdu_metareq::__property_get_max_depth()
  {
    int Result;
    Result = _get_kref()->get_max_depth();
    return Result;
  }
  Ckdu_metareq ^Ckdu_metareq::get_next()
  {
    kdu_metareq *Result;
    Result = _get_kref()->get_next();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_metareq(Result);
  }
  void Ckdu_metareq::Do_dispose(bool in_dispose)
  {
    kdu_metareq *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_multi_analysis
  Boolean Ckdu_multi_analysis::exists()
  {
    bool Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env, IntPtr _env_queue, Boolean _double_buffering)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    bool double_buffering = (bool) _double_buffering;
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi,want_fastest,processing_stripe_height,env,env_queue,double_buffering);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi,want_fastest,processing_stripe_height,env,env_queue);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi,want_fastest,processing_stripe_height,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi, Boolean _want_fastest, Int32 _processing_stripe_height)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi,want_fastest,processing_stripe_height);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi, Boolean _want_fastest)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    bool want_fastest = (bool) _want_fastest;
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi,want_fastest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Ckdu_roi_image ^_roi)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_roi_image *roi = ((_roi==nullptr)?NULL:(_roi->_get_kref()));
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,roi);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_analysis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    kdu_long Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_multi_analysis::destroy(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    _kval_cast.destroy(env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_multi_analysis::destroy()
  {
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    _kval_cast.destroy();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_coords ^Ckdu_multi_analysis::get_size(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.get_size(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_line_buf ^Ckdu_multi_analysis::exchange_line(Int32 _comp_idx, Ckdu_line_buf ^_written, Ckdu_thread_env ^_env)
  {
    int comp_idx = (int) _comp_idx;
    kdu_line_buf *written = ((_written==nullptr)?NULL:(_written->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_line_buf *Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.exchange_line(comp_idx,written,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_line_buf(Result);
  }
  Ckdu_line_buf ^Ckdu_multi_analysis::exchange_line(Int32 _comp_idx, Ckdu_line_buf ^_written)
  {
    int comp_idx = (int) _comp_idx;
    kdu_line_buf *written = ((_written==nullptr)?NULL:(_written->_get_kref()));
    kdu_line_buf *Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.exchange_line(comp_idx,written);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_line_buf(Result);
  }
  Boolean Ckdu_multi_analysis::is_line_precise(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    bool Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.is_line_precise(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_multi_analysis::is_line_absolute(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    bool Result;
    kdu_multi_analysis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_analysis *)(&_kval_cast_S));
    Result = _kval_cast.is_line_absolute(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_multi_synthesis
  Boolean Ckdu_multi_synthesis::exists()
  {
    bool Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env, IntPtr _env_queue, Boolean _double_buffering)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    bool double_buffering = (bool) _double_buffering;
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc,want_fastest,processing_stripe_height,env,env_queue,double_buffering);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc,want_fastest,processing_stripe_height,env,env_queue);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc, Boolean _want_fastest, Int32 _processing_stripe_height, Ckdu_thread_env ^_env)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc,want_fastest,processing_stripe_height,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc, Boolean _want_fastest, Int32 _processing_stripe_height)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    bool want_fastest = (bool) _want_fastest;
    int processing_stripe_height = (int) _processing_stripe_height;
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc,want_fastest,processing_stripe_height);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc, Boolean _want_fastest)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    bool want_fastest = (bool) _want_fastest;
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc,want_fastest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise, Boolean _skip_ycc)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    bool skip_ycc = (bool) _skip_ycc;
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise,skip_ycc);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile, Boolean _force_precise)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    bool force_precise = (bool) _force_precise;
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile,force_precise);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_multi_synthesis::create(Ckdu_codestream ^_codestream, Ckdu_tile ^_tile)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_tile tile;
    void *tile_S = ((_tile==nullptr)?NULL:_tile->_kval.ToPointer());
    tile = *((kdu_tile *)(&tile_S));
    kdu_long Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.create(codestream,tile);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_multi_synthesis::destroy(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    _kval_cast.destroy(env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_multi_synthesis::destroy()
  {
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    _kval_cast.destroy();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_coords ^Ckdu_multi_synthesis::get_size(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    kdu_coords Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.get_size(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_line_buf ^Ckdu_multi_synthesis::get_line(Int32 _comp_idx, Ckdu_thread_env ^_env)
  {
    int comp_idx = (int) _comp_idx;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_line_buf *Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.get_line(comp_idx,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_line_buf(Result);
  }
  Ckdu_line_buf ^Ckdu_multi_synthesis::get_line(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    kdu_line_buf *Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.get_line(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_line_buf(Result);
  }
  Boolean Ckdu_multi_synthesis::is_line_precise(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    bool Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.is_line_precise(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_multi_synthesis::is_line_absolute(Int32 _comp_idx)
  {
    int comp_idx = (int) _comp_idx;
    bool Result;
    kdu_multi_synthesis _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_multi_synthesis *)(&_kval_cast_S));
    Result = _kval_cast.is_line_absolute(comp_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_node
  Boolean Ckdu_node::exists()
  {
    bool Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_node::compare(Ckdu_node ^_src)
  {
    kdu_node src;
    void *src_S = ((_src==nullptr)?NULL:_src->_kval.ToPointer());
    src = *((kdu_node *)(&src_S));
    bool Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.compare(src);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    _src->_kval = IntPtr(*((void **)(&src)));
    return Result;
  }
  Ckdu_node ^Ckdu_node::access_child(Int32 _child_idx)
  {
    int child_idx = (int) _child_idx;
    kdu_node Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.access_child(child_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_node ^_Result = gcnew Ckdu_node;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Ckdu_node::get_num_descendants(cli::interior_ptr<Int32> _num_leaf_descendants)
  {
    int num_leaf_descendants = (int) *_num_leaf_descendants;
    int Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.get_num_descendants(num_leaf_descendants);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_leaf_descendants = num_leaf_descendants;
    return Result;
  }
  Ckdu_subband ^Ckdu_node::access_subband()
  {
    kdu_subband Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.access_subband();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_subband ^_Result = gcnew Ckdu_subband;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_resolution ^Ckdu_node::access_resolution()
  {
    kdu_resolution Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_resolution ^_Result = gcnew Ckdu_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Ckdu_node::get_dims(Ckdu_dims ^_dims)
  {
    kdu_dims &dims = *(_dims->_get_kref());
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    _kval_cast.get_dims(dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Ckdu_node::get_kernel_id()
  {
    int Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.get_kernel_id();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  IntPtr Ckdu_node::get_kernel_coefficients(Boolean _vertical)
  {
    bool vertical = (bool) _vertical;
    const float *Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.get_kernel_coefficients(vertical);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return IntPtr((void *) Result);
  }
  IntPtr Ckdu_node::get_bibo_gains(cli::interior_ptr<Int32> _num_steps, Boolean _vertical)
  {
    int num_steps = (int) *_num_steps;
    bool vertical = (bool) _vertical;
    const float *Result;
    kdu_node _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_node *)(&_kval_cast_S));
    Result = _kval_cast.get_bibo_gains(num_steps,vertical);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_steps = num_steps;
    return IntPtr((void *) Result);
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_output
  Int32 Ckdu_output::put(Byte _byte)
  {
    kdu_byte byte = (kdu_byte) _byte;
    int Result;
    Result = _get_kref()->put(byte);
    return Result;
  }
  Int32 Ckdu_output::put(Int32 _word)
  {
    kdu_uint16 word = (kdu_uint16) _word;
    int Result;
    Result = _get_kref()->put(word);
    return Result;
  }
  Int32 Ckdu_output::put(Int64 _word)
  {
    kdu_uint32 word = (kdu_uint32) _word;
    int Result;
    Result = _get_kref()->put(word);
    return Result;
  }
  Int32 Ckdu_output::put(Single _val)
  {
    float val = (float) _val;
    int Result;
    Result = _get_kref()->put(val);
    return Result;
  }
  void Ckdu_output::write(cli::array<Byte> ^_buf, Int32 _count)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int count = (int) _count;
    _get_kref()->write(buf,count);
  }
  void Ckdu_output::Do_dispose(bool in_dispose)
  {
    kdu_output *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_params
  Ckdu_params ^Ckdu_params::new_object()
  {
    kdu_params *Result;
    Result = _get_kref()->new_object();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::link(Ckdu_params ^_existing, Int32 _tile_idx, Int32 _comp_idx, Int32 _num_tiles, Int32 _num_comps)
  {
    kdu_params *existing = ((_existing==nullptr)?NULL:(_existing->_get_kref()));
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int num_tiles = (int) _num_tiles;
    int num_comps = (int) _num_comps;
    kdu_params *Result;
    Result = _get_kref()->link(existing,tile_idx,comp_idx,num_tiles,num_comps);
    _natively_owned = true;
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::new_instance()
  {
    kdu_params *Result;
    Result = _get_kref()->new_instance();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose, Boolean _vflip, Boolean _hflip)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels,transpose,vflip,hflip);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose, Boolean _vflip)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    _get_kref()->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels,transpose,vflip);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    _get_kref()->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels,transpose);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance, Int32 _skip_components, Int32 _discard_levels)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    _get_kref()->copy_from(source,source_tile,target_tile,instance,skip_components,discard_levels);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance, Int32 _skip_components)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    int skip_components = (int) _skip_components;
    _get_kref()->copy_from(source,source_tile,target_tile,instance,skip_components);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile, Int32 _instance)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    int instance = (int) _instance;
    _get_kref()->copy_from(source,source_tile,target_tile,instance);
  }
  void Ckdu_params::copy_from(Ckdu_params ^_source, Int32 _source_tile, Int32 _target_tile)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int source_tile = (int) _source_tile;
    int target_tile = (int) _target_tile;
    _get_kref()->copy_from(source,source_tile,target_tile);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose, Boolean _vflip, Boolean _hflip)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    _get_kref()->copy_all(source,skip_components,discard_levels,transpose,vflip,hflip);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose, Boolean _vflip)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    _get_kref()->copy_all(source,skip_components,discard_levels,transpose,vflip);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source, Int32 _skip_components, Int32 _discard_levels, Boolean _transpose)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    bool transpose = (bool) _transpose;
    _get_kref()->copy_all(source,skip_components,discard_levels,transpose);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source, Int32 _skip_components, Int32 _discard_levels)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int skip_components = (int) _skip_components;
    int discard_levels = (int) _discard_levels;
    _get_kref()->copy_all(source,skip_components,discard_levels);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source, Int32 _skip_components)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int skip_components = (int) _skip_components;
    _get_kref()->copy_all(source,skip_components);
  }
  void Ckdu_params::copy_all(Ckdu_params ^_source)
  {
    kdu_params *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _get_kref()->copy_all(source);
  }
  String ^ Ckdu_params::identify_cluster()
  {
    const char * Result;
    Result = _get_kref()->identify_cluster();
    return gcnew String((char *) Result);
  }
  Ckdu_params ^Ckdu_params::access_cluster(String ^ _cluster_name)
  {
    char * cluster_name = NULL;
    if (_cluster_name != nullptr)
      {
        cluster_name = new char[(_cluster_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> cluster_name_W = PtrToStringChars(_cluster_name);
        wcstombs(cluster_name,cluster_name_W,(_cluster_name->Length+1)*2);
      }
    kdu_params *Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->access_cluster(cluster_name);
    } catch (...) {
    if (cluster_name != NULL)
      delete[] cluster_name;
    throw;
    }
    if (cluster_name != NULL)
      delete[] cluster_name;
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_cluster(Int32 _sequence_idx)
  {
    int sequence_idx = (int) _sequence_idx;
    kdu_params *Result;
    Result = _get_kref()->access_cluster(sequence_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Int32 Ckdu_params::get_instance()
  {
    int Result;
    Result = _get_kref()->get_instance();
    return Result;
  }
  Int32 Ckdu_params::get_num_comps()
  {
    int Result;
    Result = _get_kref()->get_num_comps();
    return Result;
  }
  Int32 Ckdu_params::get_num_tiles()
  {
    int Result;
    Result = _get_kref()->get_num_tiles();
    return Result;
  }
  Ckdu_params ^Ckdu_params::access_relation(Int32 _tile_idx, Int32 _comp_idx, Int32 _inst_idx, Boolean _read_only)
  {
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    bool read_only = (bool) _read_only;
    kdu_params *Result;
    Result = _get_kref()->access_relation(tile_idx,comp_idx,inst_idx,read_only);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_relation(Int32 _tile_idx, Int32 _comp_idx, Int32 _inst_idx)
  {
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    kdu_params *Result;
    Result = _get_kref()->access_relation(tile_idx,comp_idx,inst_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_relation(Int32 _tile_idx, Int32 _comp_idx)
  {
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    kdu_params *Result;
    Result = _get_kref()->access_relation(tile_idx,comp_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_unique(Int32 _tile_idx, Int32 _comp_idx, Int32 _inst_idx)
  {
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    int inst_idx = (int) _inst_idx;
    kdu_params *Result;
    Result = _get_kref()->access_unique(tile_idx,comp_idx,inst_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_unique(Int32 _tile_idx, Int32 _comp_idx)
  {
    int tile_idx = (int) _tile_idx;
    int comp_idx = (int) _comp_idx;
    kdu_params *Result;
    Result = _get_kref()->access_unique(tile_idx,comp_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  Ckdu_params ^Ckdu_params::access_next_inst()
  {
    kdu_params *Result;
    Result = _get_kref()->access_next_inst();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_params(Result);
  }
  void Ckdu_params::clear_marks()
  {
    _get_kref()->clear_marks();
  }
  Boolean Ckdu_params::any_changes()
  {
    bool Result;
    Result = _get_kref()->any_changes();
    return Result;
  }
  Boolean Ckdu_params::check_typical_tile(Int32 _tile_idx, String ^ _excluded_clusters)
  {
    int tile_idx = (int) _tile_idx;
    char * excluded_clusters = NULL;
    if (_excluded_clusters != nullptr)
      {
        excluded_clusters = new char[(_excluded_clusters->Length+1)*2];
        cli::pin_ptr<const wchar_t> excluded_clusters_W = PtrToStringChars(_excluded_clusters);
        wcstombs(excluded_clusters,excluded_clusters_W,(_excluded_clusters->Length+1)*2);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->check_typical_tile(tile_idx,excluded_clusters);
    } catch (...) {
    if (excluded_clusters != NULL)
      delete[] excluded_clusters;
    throw;
    }
    if (excluded_clusters != NULL)
      delete[] excluded_clusters;
    return Result;
  }
  Boolean Ckdu_params::check_typical_tile(Int32 _tile_idx)
  {
    int tile_idx = (int) _tile_idx;
    bool Result;
    Result = _get_kref()->check_typical_tile(tile_idx);
    return Result;
  }
  Boolean Ckdu_params::translate_marker_segment(Int32 _code, Int32 _num_bytes, cli::array<Byte> ^_bytes, Int32 _which_tile, Int32 _tpart_idx)
  {
    kdu_uint16 code = (kdu_uint16) _code;
    int num_bytes = (int) _num_bytes;
    cli::pin_ptr<Byte> bytes = ((_bytes==nullptr)?nullptr:(&_bytes[0]));
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    bool Result;
    Result = _get_kref()->translate_marker_segment(code,num_bytes,bytes,which_tile,tpart_idx);
    return Result;
  }
  Int32 Ckdu_params::generate_marker_segments(Ckdu_output ^_out, Int32 _which_tile, Int32 _tpart_idx)
  {
    kdu_output *out = ((_out==nullptr)?NULL:(_out->_get_kref()));
    int which_tile = (int) _which_tile;
    int tpart_idx = (int) _tpart_idx;
    int Result;
    Result = _get_kref()->generate_marker_segments(out,which_tile,tpart_idx);
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Int32> _value, Boolean _allow_inherit, Boolean _allow_extend, Boolean _allow_derived)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool allow_derived = (bool) _allow_derived;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Int32> _value, Boolean _allow_inherit, Boolean _allow_extend)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Int32> _value, Boolean _allow_inherit)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Int32> _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) *_value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Boolean> _value, Boolean _allow_inherit, Boolean _allow_extend, Boolean _allow_derived)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool allow_derived = (bool) _allow_derived;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Boolean> _value, Boolean _allow_inherit, Boolean _allow_extend)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Boolean> _value, Boolean _allow_inherit)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Boolean> _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) *_value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Single> _value, Boolean _allow_inherit, Boolean _allow_extend, Boolean _allow_derived)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool allow_derived = (bool) _allow_derived;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend,allow_derived);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Single> _value, Boolean _allow_inherit, Boolean _allow_extend)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool allow_extend = (bool) _allow_extend;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit,allow_extend);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Single> _value, Boolean _allow_inherit)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) *_value;
    bool allow_inherit = (bool) _allow_inherit;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value,allow_inherit);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::get(String ^ _name, Int32 _record_idx, Int32 _field_idx, cli::interior_ptr<Single> _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) *_value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->get(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_value = value;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::compare(String ^ _name, Int32 _record_idx, Int32 _field_idx, Int32 _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::compare(String ^ _name, Int32 _record_idx, Int32 _field_idx, Boolean _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
    return Result;
  }
  Boolean Ckdu_params::compare(String ^ _name, Int32 _record_idx, Int32 _field_idx, Single _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    float value = (float) _value;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->compare(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
    return Result;
  }
  void Ckdu_params::set(String ^ _name, Int32 _record_idx, Int32 _field_idx, Int32 _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    int value = (int) _value;
    try { // So we can clean up temporary arrays
    _get_kref()->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::set(String ^ _name, Int32 _record_idx, Int32 _field_idx, Boolean _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    bool value = (bool) _value;
    try { // So we can clean up temporary arrays
    _get_kref()->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::set(String ^ _name, Int32 _record_idx, Int32 _field_idx, Double _value)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int record_idx = (int) _record_idx;
    int field_idx = (int) _field_idx;
    double value = (double) _value;
    try { // So we can clean up temporary arrays
    _get_kref()->set(name,record_idx,field_idx,value);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::set_derived(String ^ _name)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->set_derived(name);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  Boolean Ckdu_params::parse_string(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->parse_string(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return Result;
  }
  Boolean Ckdu_params::parse_string(String ^ _string, Int32 _tile_idx)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    int tile_idx = (int) _tile_idx;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->parse_string(string,tile_idx);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return Result;
  }
  void Ckdu_params::textualize_attributes(Ckdu_message ^_output, Boolean _skip_derived)
  {
    kdu_message &output = *(_output->_get_kref());
    bool skip_derived = (bool) _skip_derived;
    _get_kref()->textualize_attributes(output,skip_derived);
  }
  void Ckdu_params::textualize_attributes(Ckdu_message ^_output)
  {
    kdu_message &output = *(_output->_get_kref());
    _get_kref()->textualize_attributes(output);
  }
  void Ckdu_params::textualize_attributes(Ckdu_message ^_output, Int32 _min_tile, Int32 _max_tile, Boolean _skip_derived)
  {
    kdu_message &output = *(_output->_get_kref());
    int min_tile = (int) _min_tile;
    int max_tile = (int) _max_tile;
    bool skip_derived = (bool) _skip_derived;
    _get_kref()->textualize_attributes(output,min_tile,max_tile,skip_derived);
  }
  void Ckdu_params::textualize_attributes(Ckdu_message ^_output, Int32 _min_tile, Int32 _max_tile)
  {
    kdu_message &output = *(_output->_get_kref());
    int min_tile = (int) _min_tile;
    int max_tile = (int) _max_tile;
    _get_kref()->textualize_attributes(output,min_tile,max_tile);
  }
  void Ckdu_params::describe_attributes(Ckdu_message ^_output, Boolean _include_comments)
  {
    kdu_message &output = *(_output->_get_kref());
    bool include_comments = (bool) _include_comments;
    _get_kref()->describe_attributes(output,include_comments);
  }
  void Ckdu_params::describe_attributes(Ckdu_message ^_output)
  {
    kdu_message &output = *(_output->_get_kref());
    _get_kref()->describe_attributes(output);
  }
  void Ckdu_params::describe_attribute(String ^ _name, Ckdu_message ^_output, Boolean _include_comments)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    kdu_message &output = *(_output->_get_kref());
    bool include_comments = (bool) _include_comments;
    try { // So we can clean up temporary arrays
    _get_kref()->describe_attribute(name,output,include_comments);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::describe_attribute(String ^ _name, Ckdu_message ^_output)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    kdu_message &output = *(_output->_get_kref());
    try { // So we can clean up temporary arrays
    _get_kref()->describe_attribute(name,output);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::delete_unparsed_attribute(String ^ _name)
  {
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _get_kref()->delete_unparsed_attribute(name);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  Int32 Ckdu_params::custom_parse_field(String ^ _string, String ^ _name, Int32 _field_idx, cli::interior_ptr<Int32> _val)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int field_idx = (int) _field_idx;
    int val = (int) *_val;
    int Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->custom_parse_field(string,name,field_idx,val);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    if (name != NULL)
      delete[] name;
    throw;
    }
    *_val = val;
    if (string != NULL)
      delete[] string;
    if (name != NULL)
      delete[] name;
    return Result;
  }
  void Ckdu_params::custom_textualize_field(Ckdu_message ^_output, String ^ _name, Int32 _field_idx, Int32 _val)
  {
    kdu_message &output = *(_output->_get_kref());
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    int field_idx = (int) _field_idx;
    int val = (int) _val;
    try { // So we can clean up temporary arrays
    _get_kref()->custom_textualize_field(output,name,field_idx,val);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
  }
  void Ckdu_params::finalize(Boolean _after_reading)
  {
    bool after_reading = (bool) _after_reading;
    _get_kref()->finalize(after_reading);
  }
  void Ckdu_params::finalize()
  {
    Boolean _after_reading = (Boolean)(false);
    finalize(_after_reading);
  }
  void Ckdu_params::finalize_all(Boolean _after_reading)
  {
    bool after_reading = (bool) _after_reading;
    _get_kref()->finalize_all(after_reading);
  }
  void Ckdu_params::finalize_all()
  {
    _get_kref()->finalize_all();
  }
  void Ckdu_params::finalize_all(Int32 _tile_idx, Boolean _after_reading)
  {
    int tile_idx = (int) _tile_idx;
    bool after_reading = (bool) _after_reading;
    _get_kref()->finalize_all(tile_idx,after_reading);
  }
  void Ckdu_params::finalize_all(Int32 _tile_idx)
  {
    int tile_idx = (int) _tile_idx;
    _get_kref()->finalize_all(tile_idx);
  }
  void Ckdu_params::Do_dispose(bool in_dispose)
  {
    kdu_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_precinct
  Boolean Ckdu_precinct::exists()
  {
    bool Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_precinct::check_loaded()
  {
    bool Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.check_loaded();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_precinct::get_unique_id()
  {
    kdu_long Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.get_unique_id();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_precinct::get_valid_blocks(Int32 _band_idx, Ckdu_dims ^_indices)
  {
    int band_idx = (int) _band_idx;
    kdu_dims &indices = *(_indices->_get_kref());
    bool Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.get_valid_blocks(band_idx,indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_block ^Ckdu_precinct::open_block(Int32 _band_idx, Ckdu_coords ^_block_idx, Ckdu_thread_env ^_env)
  {
    int band_idx = (int) _band_idx;
    kdu_coords block_idx = *(_block_idx->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_block *Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.open_block(band_idx,block_idx,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_block(Result);
  }
  Ckdu_block ^Ckdu_precinct::open_block(Int32 _band_idx, Ckdu_coords ^_block_idx)
  {
    int band_idx = (int) _band_idx;
    kdu_coords block_idx = *(_block_idx->_get_kref());
    kdu_block *Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.open_block(band_idx,block_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_block(Result);
  }
  void Ckdu_precinct::close_block(Ckdu_block ^_block, Ckdu_thread_env ^_env)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    _kval_cast.close_block(block,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_precinct::close_block(Ckdu_block ^_block)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    _kval_cast.close_block(block);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Ckdu_precinct::size_packets(cli::interior_ptr<Int32> _cumulative_packets, cli::interior_ptr<Int32> _cumulative_bytes, cli::interior_ptr<Boolean> _is_significant)
  {
    int cumulative_packets = (int) *_cumulative_packets;
    int cumulative_bytes = (int) *_cumulative_bytes;
    bool is_significant = (bool) *_is_significant;
    bool Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.size_packets(cumulative_packets,cumulative_bytes,is_significant);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_cumulative_packets = cumulative_packets;
    *_cumulative_bytes = cumulative_bytes;
    *_is_significant = is_significant;
    return Result;
  }
  Boolean Ckdu_precinct::get_packets(Int32 _leading_skip_packets, Int32 _leading_skip_bytes, cli::interior_ptr<Int32> _cumulative_packets, cli::interior_ptr<Int32> _cumulative_bytes, Ckdu_output ^_out)
  {
    int leading_skip_packets = (int) _leading_skip_packets;
    int leading_skip_bytes = (int) _leading_skip_bytes;
    int cumulative_packets = (int) *_cumulative_packets;
    int cumulative_bytes = (int) *_cumulative_bytes;
    kdu_output *out = ((_out==nullptr)?NULL:(_out->_get_kref()));
    bool Result;
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    Result = _kval_cast.get_packets(leading_skip_packets,leading_skip_bytes,cumulative_packets,cumulative_bytes,out);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_cumulative_packets = cumulative_packets;
    *_cumulative_bytes = cumulative_bytes;
    return Result;
  }
  void Ckdu_precinct::restart()
  {
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    _kval_cast.restart();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_precinct::close()
  {
    kdu_precinct _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_precinct *)(&_kval_cast_S));
    _kval_cast.close();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_pull_ifc
  Ckdu_pull_ifc::Ckdu_pull_ifc()
  {
    _natively_owned = false;
    _kref = new kdu_pull_ifc();
  }
  void Ckdu_pull_ifc::destroy()
  {
    _get_kref()->destroy();
  }
  void Ckdu_pull_ifc::start(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _get_kref()->start(env);
  }
  Boolean Ckdu_pull_ifc::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Ckdu_pull_ifc::pull(Ckdu_line_buf ^_line, Ckdu_thread_env ^_env)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _get_kref()->pull(line,env);
  }
  void Ckdu_pull_ifc::pull(Ckdu_line_buf ^_line)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    _get_kref()->pull(line);
  }
  void Ckdu_pull_ifc::pull(Ckdu_line_buf ^_line, Boolean _allow_exchange)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    bool allow_exchange = (bool) _allow_exchange;
    _get_kref()->pull(line,allow_exchange);
  }
  void Ckdu_pull_ifc::Do_dispose(bool in_dispose)
  {
    kdu_pull_ifc *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_push_ifc
  Ckdu_push_ifc::Ckdu_push_ifc()
  {
    _natively_owned = false;
    _kref = new kdu_push_ifc();
  }
  void Ckdu_push_ifc::destroy()
  {
    _get_kref()->destroy();
  }
  Boolean Ckdu_push_ifc::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Ckdu_push_ifc::push(Ckdu_line_buf ^_line, Ckdu_thread_env ^_env)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _get_kref()->push(line,env);
  }
  void Ckdu_push_ifc::push(Ckdu_line_buf ^_line)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    _get_kref()->push(line);
  }
  void Ckdu_push_ifc::push(Ckdu_line_buf ^_line, Boolean _allow_exchange)
  {
    kdu_line_buf &line = *(_line->_get_kref());
    bool allow_exchange = (bool) _allow_exchange;
    _get_kref()->push(line,allow_exchange);
  }
  void Ckdu_push_ifc::Do_dispose(bool in_dispose)
  {
    kdu_push_ifc *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_range_set
  Ckdu_range_set::Ckdu_range_set()
  {
    _natively_owned = false;
    _kref = new kdu_range_set();
  }
  void Ckdu_range_set::copy_from(Ckdu_range_set ^_src)
  {
    kdu_range_set &src = *(_src->_get_kref());
    _get_kref()->copy_from(src);
  }
  Boolean Ckdu_range_set::is_empty()
  {
    bool Result;
    Result = _get_kref()->is_empty();
    return Result;
  }
  Boolean Ckdu_range_set::contains(Ckdu_range_set ^_rhs)
  {
    kdu_range_set &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->contains(rhs);
    return Result;
  }
  Boolean Ckdu_range_set::equals(Ckdu_range_set ^_rhs)
  {
    kdu_range_set &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->equals(rhs);
    return Result;
  }
  void Ckdu_range_set::init()
  {
    _get_kref()->init();
  }
  void Ckdu_range_set::add(Ckdu_sampled_range ^_range, Boolean _allow_merging)
  {
    kdu_sampled_range range = *(_range->_get_kref());
    bool allow_merging = (bool) _allow_merging;
    _get_kref()->add(range,allow_merging);
  }
  void Ckdu_range_set::add(Ckdu_sampled_range ^_range)
  {
    kdu_sampled_range range = *(_range->_get_kref());
    _get_kref()->add(range);
  }
  void Ckdu_range_set::add(Int32 _val)
  {
    int val = (int) _val;
    _get_kref()->add(val);
  }
  void Ckdu_range_set::add(Int32 _from, Int32 _to)
  {
    int from = (int) _from;
    int to = (int) _to;
    _get_kref()->add(from,to);
  }
  Int32 Ckdu_range_set::get_num_ranges()
  {
    int Result;
    Result = _get_kref()->get_num_ranges();
    return Result;
  }
  Ckdu_sampled_range ^Ckdu_range_set::get_range(Int32 _n)
  {
    int n = (int) _n;
    kdu_sampled_range Result;
    Result = _get_kref()->get_range(n);
    Ckdu_sampled_range ^_Result = gcnew Ckdu_sampled_range;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_sampled_range ^Ckdu_range_set::access_range(Int32 _n)
  {
    int n = (int) _n;
    kdu_sampled_range *Result;
    Result = _get_kref()->access_range(n);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_sampled_range(Result);
  }
  Boolean Ckdu_range_set::test(Int32 _index)
  {
    int index = (int) _index;
    bool Result;
    Result = _get_kref()->test(index);
    return Result;
  }
  Int32 Ckdu_range_set::expand(cli::array<Int32> ^_buf, Int32 _accept_min, Int32 _accept_max)
  {
    cli::pin_ptr<Int32> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int accept_min = (int) _accept_min;
    int accept_max = (int) _accept_max;
    int Result;
    Result = _get_kref()->expand(buf,accept_min,accept_max);
    return Result;
  }
  void Ckdu_range_set::Do_dispose(bool in_dispose)
  {
    kdu_range_set *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_region_compositor
  Ckdu_region_compositor::Ckdu_region_compositor(Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(env,env_queue);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    kdu_thread_queue *env_queue = NULL;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(env,env_queue);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor()
  {
    _natively_owned = false;
    kdu_thread_env *env = NULL;
    kdu_thread_queue *env_queue = NULL;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(env,env_queue);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Ckdu_compressed_source ^_source, Int32 _persistent_cache_threshold)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _natively_owned = false;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Ckdu_compressed_source ^_source)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _natively_owned = false;
    int persistent_cache_threshold = 256000;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Cjpx_source ^_source, Int32 _persistent_cache_threshold)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _natively_owned = false;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Cjpx_source ^_source)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _natively_owned = false;
    int persistent_cache_threshold = 256000;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Cmj2_source ^_source, Int32 _persistent_cache_threshold)
  {
    mj2_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _natively_owned = false;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  Ckdu_region_compositor::Ckdu_region_compositor(Cmj2_source ^_source)
  {
    mj2_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _natively_owned = false;
    int persistent_cache_threshold = 256000;
    _aux_extended__kdu_region_compositor *_true_kref = new _aux_extended__kdu_region_compositor(source,persistent_cache_threshold);
    _kref = _true_kref;
    _true_kref->_delegator = new _mni_delegator__kdu_region_compositor(this);
  }
  void Ckdu_region_compositor::pre_destroy()
  {
    _get_kref()->pre_destroy();
  }
  void Ckdu_region_compositor::create(Ckdu_compressed_source ^_source, Int32 _persistent_cache_threshold)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _get_kref()->create(source,persistent_cache_threshold);
  }
  void Ckdu_region_compositor::create(Ckdu_compressed_source ^_source)
  {
    kdu_compressed_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _get_kref()->create(source);
  }
  void Ckdu_region_compositor::create(Cjpx_source ^_source, Int32 _persistent_cache_threshold)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _get_kref()->create(source,persistent_cache_threshold);
  }
  void Ckdu_region_compositor::create(Cjpx_source ^_source)
  {
    jpx_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _get_kref()->create(source);
  }
  void Ckdu_region_compositor::create(Cmj2_source ^_source, Int32 _persistent_cache_threshold)
  {
    mj2_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    int persistent_cache_threshold = (int) _persistent_cache_threshold;
    _get_kref()->create(source,persistent_cache_threshold);
  }
  void Ckdu_region_compositor::create(Cmj2_source ^_source)
  {
    mj2_source *source = ((_source==nullptr)?NULL:(_source->_get_kref()));
    _get_kref()->create(source);
  }
  void Ckdu_region_compositor::set_error_level(Int32 _error_level)
  {
    int error_level = (int) _error_level;
    _get_kref()->set_error_level(error_level);
  }
  void Ckdu_region_compositor::set_surface_initialization_mode(Boolean _pre_initialize)
  {
    bool pre_initialize = (bool) _pre_initialize;
    _get_kref()->set_surface_initialization_mode(pre_initialize);
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims, Boolean _transpose, Boolean _vflip, Boolean _hflip, Int32 _frame_idx, Int32 _field_handling)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    int frame_idx = (int) _frame_idx;
    int field_handling = (int) _field_handling;
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims,transpose,vflip,hflip,frame_idx,field_handling);
    return Result;
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims, Boolean _transpose, Boolean _vflip, Boolean _hflip, Int32 _frame_idx)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    int frame_idx = (int) _frame_idx;
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims,transpose,vflip,hflip,frame_idx);
    return Result;
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims, Boolean _transpose, Boolean _vflip, Boolean _hflip)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims,transpose,vflip,hflip);
    return Result;
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims, Boolean _transpose, Boolean _vflip)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims,transpose,vflip);
    return Result;
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims, Boolean _transpose)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool transpose = (bool) _transpose;
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims,transpose);
    return Result;
  }
  Boolean Ckdu_region_compositor::add_compositing_layer(Int32 _layer_idx, Ckdu_dims ^_full_source_dims, Ckdu_dims ^_full_target_dims)
  {
    int layer_idx = (int) _layer_idx;
    kdu_dims full_source_dims = *(_full_source_dims->_get_kref());
    kdu_dims full_target_dims = *(_full_target_dims->_get_kref());
    bool Result;
    Result = _get_kref()->add_compositing_layer(layer_idx,full_source_dims,full_target_dims);
    return Result;
  }
  Boolean Ckdu_region_compositor::change_compositing_layer_frame(Int32 _layer_idx, Int32 _frame_idx)
  {
    int layer_idx = (int) _layer_idx;
    int frame_idx = (int) _frame_idx;
    bool Result;
    Result = _get_kref()->change_compositing_layer_frame(layer_idx,frame_idx);
    return Result;
  }
  void Ckdu_region_compositor::remove_compositing_layer(Int32 _layer_idx, Boolean _permanent)
  {
    int layer_idx = (int) _layer_idx;
    bool permanent = (bool) _permanent;
    _get_kref()->remove_compositing_layer(layer_idx,permanent);
  }
  Int32 Ckdu_region_compositor::set_single_component(Int32 _stream_idx, Int32 _component_idx, Int32 _access_mode)
  {
    int stream_idx = (int) _stream_idx;
    int component_idx = (int) _component_idx;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    int Result;
    Result = _get_kref()->set_single_component(stream_idx,component_idx,access_mode);
    return Result;
  }
  Int32 Ckdu_region_compositor::set_single_component(Int32 _stream_idx, Int32 _component_idx)
  {
    int stream_idx = (int) _stream_idx;
    int component_idx = (int) _component_idx;
    int Result;
    Result = _get_kref()->set_single_component(stream_idx,component_idx);
    return Result;
  }
  void Ckdu_region_compositor::cull_inactive_layers(Int32 _max_inactive)
  {
    int max_inactive = (int) _max_inactive;
    _get_kref()->cull_inactive_layers(max_inactive);
  }
  void Ckdu_region_compositor::set_frame(Cjpx_frame_expander ^_expander)
  {
    jpx_frame_expander *expander = ((_expander==nullptr)?NULL:(_expander->_get_kref()));
    _get_kref()->set_frame(expander);
  }
  void Ckdu_region_compositor::set_scale(Boolean _transpose, Boolean _vflip, Boolean _hflip, Single _scale)
  {
    bool transpose = (bool) _transpose;
    bool vflip = (bool) _vflip;
    bool hflip = (bool) _hflip;
    float scale = (float) _scale;
    _get_kref()->set_scale(transpose,vflip,hflip,scale);
  }
  Single Ckdu_region_compositor::find_optimal_scale(Ckdu_dims ^_region, Single _scale_anchor, Single _min_scale, Single _max_scale, cli::array<Int32> ^_compositing_layer_idx, cli::array<Int32> ^_codestream_idx, cli::array<Int32> ^_component_idx)
  {
    kdu_dims region = *(_region->_get_kref());
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    cli::pin_ptr<Int32> compositing_layer_idx = ((_compositing_layer_idx==nullptr)?nullptr:(&_compositing_layer_idx[0]));
    cli::pin_ptr<Int32> codestream_idx = ((_codestream_idx==nullptr)?nullptr:(&_codestream_idx[0]));
    cli::pin_ptr<Int32> component_idx = ((_component_idx==nullptr)?nullptr:(&_component_idx[0]));
    float Result;
    Result = _get_kref()->find_optimal_scale(region,scale_anchor,min_scale,max_scale,compositing_layer_idx,codestream_idx,component_idx);
    return Result;
  }
  Single Ckdu_region_compositor::find_optimal_scale(Ckdu_dims ^_region, Single _scale_anchor, Single _min_scale, Single _max_scale, cli::array<Int32> ^_compositing_layer_idx, cli::array<Int32> ^_codestream_idx)
  {
    kdu_dims region = *(_region->_get_kref());
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    cli::pin_ptr<Int32> compositing_layer_idx = ((_compositing_layer_idx==nullptr)?nullptr:(&_compositing_layer_idx[0]));
    cli::pin_ptr<Int32> codestream_idx = ((_codestream_idx==nullptr)?nullptr:(&_codestream_idx[0]));
    float Result;
    Result = _get_kref()->find_optimal_scale(region,scale_anchor,min_scale,max_scale,compositing_layer_idx,codestream_idx);
    return Result;
  }
  Single Ckdu_region_compositor::find_optimal_scale(Ckdu_dims ^_region, Single _scale_anchor, Single _min_scale, Single _max_scale, cli::array<Int32> ^_compositing_layer_idx)
  {
    kdu_dims region = *(_region->_get_kref());
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    cli::pin_ptr<Int32> compositing_layer_idx = ((_compositing_layer_idx==nullptr)?nullptr:(&_compositing_layer_idx[0]));
    float Result;
    Result = _get_kref()->find_optimal_scale(region,scale_anchor,min_scale,max_scale,compositing_layer_idx);
    return Result;
  }
  Single Ckdu_region_compositor::find_optimal_scale(Ckdu_dims ^_region, Single _scale_anchor, Single _min_scale, Single _max_scale)
  {
    kdu_dims region = *(_region->_get_kref());
    float scale_anchor = (float) _scale_anchor;
    float min_scale = (float) _min_scale;
    float max_scale = (float) _max_scale;
    float Result;
    Result = _get_kref()->find_optimal_scale(region,scale_anchor,min_scale,max_scale);
    return Result;
  }
  void Ckdu_region_compositor::set_buffer_surface(Ckdu_dims ^_region, Int32 _background)
  {
    kdu_dims region = *(_region->_get_kref());
    kdu_int32 background = (kdu_int32) _background;
    _get_kref()->set_buffer_surface(region,background);
  }
  void Ckdu_region_compositor::set_buffer_surface(Ckdu_dims ^_region)
  {
    kdu_dims region = *(_region->_get_kref());
    _get_kref()->set_buffer_surface(region);
  }
  Int32 Ckdu_region_compositor::check_invalid_scale_code()
  {
    int Result;
    Result = _get_kref()->check_invalid_scale_code();
    return Result;
  }
  Boolean Ckdu_region_compositor::get_total_composition_dims(Ckdu_dims ^_dims)
  {
    kdu_dims &dims = *(_dims->_get_kref());
    bool Result;
    Result = _get_kref()->get_total_composition_dims(dims);
    return Result;
  }
  Ckdu_compositor_buf ^Ckdu_region_compositor::get_composition_buffer(Ckdu_dims ^_region)
  {
    kdu_dims &region = *(_region->_get_kref());
    kdu_compositor_buf *Result;
    Result = _get_kref()->get_composition_buffer(region);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_compositor_buf(Result);
  }
  Boolean Ckdu_region_compositor::push_composition_buffer(Int64 _stamp, Int32 _id)
  {
    kdu_long stamp = (kdu_long) _stamp;
    int id = (int) _id;
    bool Result;
    Result = _get_kref()->push_composition_buffer(stamp,id);
    return Result;
  }
  Boolean Ckdu_region_compositor::pop_composition_buffer()
  {
    bool Result;
    Result = _get_kref()->pop_composition_buffer();
    return Result;
  }
  Boolean Ckdu_region_compositor::inspect_composition_queue(Int32 _elt, cli::array<Int64> ^_stamp, cli::array<Int32> ^_id)
  {
    int elt = (int) _elt;
    kdu_long *stamp = NULL;
    if (_stamp != nullptr)
      {
        int _len_ = _stamp->Length;
        stamp = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          stamp[_n_] = (kdu_long) _stamp[_n_];
      }
    cli::pin_ptr<Int32> id = ((_id==nullptr)?nullptr:(&_id[0]));
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->inspect_composition_queue(elt,stamp,id);
    } catch (...) {
    if (stamp != NULL)
      delete[] stamp;
    throw;
    }
    if (_stamp != nullptr)
      {
        int _len_ = _stamp->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _stamp[_n_] = (Int64) stamp[_n_];
      }
    if (stamp != NULL)
      delete[] stamp;
    return Result;
  }
  Boolean Ckdu_region_compositor::inspect_composition_queue(Int32 _elt, cli::array<Int64> ^_stamp)
  {
    int elt = (int) _elt;
    kdu_long *stamp = NULL;
    if (_stamp != nullptr)
      {
        int _len_ = _stamp->Length;
        stamp = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          stamp[_n_] = (kdu_long) _stamp[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->inspect_composition_queue(elt,stamp);
    } catch (...) {
    if (stamp != NULL)
      delete[] stamp;
    throw;
    }
    if (_stamp != nullptr)
      {
        int _len_ = _stamp->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _stamp[_n_] = (Int64) stamp[_n_];
      }
    if (stamp != NULL)
      delete[] stamp;
    return Result;
  }
  Boolean Ckdu_region_compositor::inspect_composition_queue(Int32 _elt)
  {
    int elt = (int) _elt;
    bool Result;
    Result = _get_kref()->inspect_composition_queue(elt);
    return Result;
  }
  void Ckdu_region_compositor::flush_composition_queue()
  {
    _get_kref()->flush_composition_queue();
  }
  void Ckdu_region_compositor::set_max_quality_layers(Int32 _quality_layers)
  {
    int quality_layers = (int) _quality_layers;
    _get_kref()->set_max_quality_layers(quality_layers);
  }
  Int32 Ckdu_region_compositor::get_max_available_quality_layers()
  {
    int Result;
    Result = _get_kref()->get_max_available_quality_layers();
    return Result;
  }
  Ckdu_thread_env ^Ckdu_region_compositor::set_thread_env(Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    kdu_thread_env *Result;
    Result = _get_kref()->set_thread_env(env,env_queue);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_thread_env(Result);
  }
  Boolean Ckdu_region_compositor::process(Int32 _suggested_increment, Ckdu_dims ^_new_region)
  {
    int suggested_increment = (int) _suggested_increment;
    kdu_dims &new_region = *(_new_region->_get_kref());
    bool Result;
    Result = _get_kref()->process(suggested_increment,new_region);
    return Result;
  }
  Boolean Ckdu_region_compositor::is_processing_complete()
  {
    bool Result;
    Result = _get_kref()->is_processing_complete();
    return Result;
  }
  Boolean Ckdu_region_compositor::refresh()
  {
    bool Result;
    Result = _get_kref()->refresh();
    return Result;
  }
  void Ckdu_region_compositor::halt_processing()
  {
    _get_kref()->halt_processing();
  }
  Boolean Ckdu_region_compositor::find_point(Ckdu_coords ^_point, cli::interior_ptr<Int32> _layer_idx, cli::interior_ptr<Int32> _codestream_idx)
  {
    kdu_coords point = *(_point->_get_kref());
    int layer_idx = (int) *_layer_idx;
    int codestream_idx = (int) *_codestream_idx;
    bool Result;
    Result = _get_kref()->find_point(point,layer_idx,codestream_idx);
    *_layer_idx = layer_idx;
    *_codestream_idx = codestream_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::map_region(cli::interior_ptr<Int32> _codestream_idx, Ckdu_dims ^_region)
  {
    int codestream_idx = (int) *_codestream_idx;
    kdu_dims &region = *(_region->_get_kref());
    bool Result;
    Result = _get_kref()->map_region(codestream_idx,region);
    *_codestream_idx = codestream_idx;
    return Result;
  }
  Ckdu_dims ^Ckdu_region_compositor::inverse_map_region(Ckdu_dims ^_region, Int32 _codestream_idx, Int32 _layer_idx)
  {
    kdu_dims region = *(_region->_get_kref());
    int codestream_idx = (int) _codestream_idx;
    int layer_idx = (int) _layer_idx;
    kdu_dims Result;
    Result = _get_kref()->inverse_map_region(region,codestream_idx,layer_idx);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_compositor::inverse_map_region(Ckdu_dims ^_region, Int32 _codestream_idx)
  {
    kdu_dims region = *(_region->_get_kref());
    int codestream_idx = (int) _codestream_idx;
    kdu_dims Result;
    Result = _get_kref()->inverse_map_region(region,codestream_idx);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_compositor::find_layer_region(Int32 _layer_idx, Int32 _instance, Boolean _apply_cropping)
  {
    int layer_idx = (int) _layer_idx;
    int instance = (int) _instance;
    bool apply_cropping = (bool) _apply_cropping;
    kdu_dims Result;
    Result = _get_kref()->find_layer_region(layer_idx,instance,apply_cropping);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_compositor::find_codestream_region(Int32 _codestream_idx, Int32 _instance, Boolean _apply_cropping)
  {
    int codestream_idx = (int) _codestream_idx;
    int instance = (int) _instance;
    bool apply_cropping = (bool) _apply_cropping;
    kdu_dims Result;
    Result = _get_kref()->find_codestream_region(codestream_idx,instance,apply_cropping);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  IntPtr Ckdu_region_compositor::get_next_codestream(IntPtr _last_stream_ref, Boolean _only_active_codestreams, Boolean _no_duplicates)
  {
    kdrc_stream *last_stream_ref = (kdrc_stream *) _last_stream_ref.ToPointer();
    bool only_active_codestreams = (bool) _only_active_codestreams;
    bool no_duplicates = (bool) _no_duplicates;
    kdrc_stream *Result;
    Result = _get_kref()->get_next_codestream(last_stream_ref,only_active_codestreams,no_duplicates);
    return IntPtr((void *) Result);
  }
  IntPtr Ckdu_region_compositor::get_next_visible_codestream(IntPtr _last_stream_ref, Ckdu_dims ^_region, Boolean _include_alpha)
  {
    kdrc_stream *last_stream_ref = (kdrc_stream *) _last_stream_ref.ToPointer();
    kdu_dims region = *(_region->_get_kref());
    bool include_alpha = (bool) _include_alpha;
    kdrc_stream *Result;
    Result = _get_kref()->get_next_visible_codestream(last_stream_ref,region,include_alpha);
    return IntPtr((void *) Result);
  }
  Ckdu_codestream ^Ckdu_region_compositor::access_codestream(IntPtr _stream_ref)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    kdu_codestream Result;
    Result = _get_kref()->access_codestream(stream_ref);
    Ckdu_codestream ^_Result = gcnew Ckdu_codestream;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_info(IntPtr _stream_ref, cli::interior_ptr<Int32> _codestream_idx, cli::interior_ptr<Int32> _compositing_layer_idx, cli::array<Int32> ^_components_in_use, cli::array<Int32> ^_principle_component_idx, cli::array<Single> ^_principle_component_scale_x, cli::array<Single> ^_principle_component_scale_y)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    int codestream_idx = (int) *_codestream_idx;
    int compositing_layer_idx = (int) *_compositing_layer_idx;
    cli::pin_ptr<Int32> components_in_use = ((_components_in_use==nullptr)?nullptr:(&_components_in_use[0]));
    cli::pin_ptr<Int32> principle_component_idx = ((_principle_component_idx==nullptr)?nullptr:(&_principle_component_idx[0]));
    cli::pin_ptr<Single> principle_component_scale_x = ((_principle_component_scale_x==nullptr)?nullptr:(&_principle_component_scale_x[0]));
    cli::pin_ptr<Single> principle_component_scale_y = ((_principle_component_scale_y==nullptr)?nullptr:(&_principle_component_scale_y[0]));
    bool Result;
    Result = _get_kref()->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx,components_in_use,principle_component_idx,principle_component_scale_x,principle_component_scale_y);
    *_codestream_idx = codestream_idx;
    *_compositing_layer_idx = compositing_layer_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_info(IntPtr _stream_ref, cli::interior_ptr<Int32> _codestream_idx, cli::interior_ptr<Int32> _compositing_layer_idx, cli::array<Int32> ^_components_in_use, cli::array<Int32> ^_principle_component_idx, cli::array<Single> ^_principle_component_scale_x)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    int codestream_idx = (int) *_codestream_idx;
    int compositing_layer_idx = (int) *_compositing_layer_idx;
    cli::pin_ptr<Int32> components_in_use = ((_components_in_use==nullptr)?nullptr:(&_components_in_use[0]));
    cli::pin_ptr<Int32> principle_component_idx = ((_principle_component_idx==nullptr)?nullptr:(&_principle_component_idx[0]));
    cli::pin_ptr<Single> principle_component_scale_x = ((_principle_component_scale_x==nullptr)?nullptr:(&_principle_component_scale_x[0]));
    bool Result;
    Result = _get_kref()->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx,components_in_use,principle_component_idx,principle_component_scale_x);
    *_codestream_idx = codestream_idx;
    *_compositing_layer_idx = compositing_layer_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_info(IntPtr _stream_ref, cli::interior_ptr<Int32> _codestream_idx, cli::interior_ptr<Int32> _compositing_layer_idx, cli::array<Int32> ^_components_in_use, cli::array<Int32> ^_principle_component_idx)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    int codestream_idx = (int) *_codestream_idx;
    int compositing_layer_idx = (int) *_compositing_layer_idx;
    cli::pin_ptr<Int32> components_in_use = ((_components_in_use==nullptr)?nullptr:(&_components_in_use[0]));
    cli::pin_ptr<Int32> principle_component_idx = ((_principle_component_idx==nullptr)?nullptr:(&_principle_component_idx[0]));
    bool Result;
    Result = _get_kref()->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx,components_in_use,principle_component_idx);
    *_codestream_idx = codestream_idx;
    *_compositing_layer_idx = compositing_layer_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_info(IntPtr _stream_ref, cli::interior_ptr<Int32> _codestream_idx, cli::interior_ptr<Int32> _compositing_layer_idx, cli::array<Int32> ^_components_in_use)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    int codestream_idx = (int) *_codestream_idx;
    int compositing_layer_idx = (int) *_compositing_layer_idx;
    cli::pin_ptr<Int32> components_in_use = ((_components_in_use==nullptr)?nullptr:(&_components_in_use[0]));
    bool Result;
    Result = _get_kref()->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx,components_in_use);
    *_codestream_idx = codestream_idx;
    *_compositing_layer_idx = compositing_layer_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_info(IntPtr _stream_ref, cli::interior_ptr<Int32> _codestream_idx, cli::interior_ptr<Int32> _compositing_layer_idx)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    int codestream_idx = (int) *_codestream_idx;
    int compositing_layer_idx = (int) *_compositing_layer_idx;
    bool Result;
    Result = _get_kref()->get_codestream_info(stream_ref,codestream_idx,compositing_layer_idx);
    *_codestream_idx = codestream_idx;
    *_compositing_layer_idx = compositing_layer_idx;
    return Result;
  }
  Boolean Ckdu_region_compositor::get_codestream_packets(IntPtr _stream_ref, Ckdu_dims ^_region, cli::interior_ptr<Int64> _visible_precinct_samples, cli::interior_ptr<Int64> _visible_packet_samples, cli::interior_ptr<Int64> _max_visible_packet_samples)
  {
    kdrc_stream *stream_ref = (kdrc_stream *) _stream_ref.ToPointer();
    kdu_dims region = *(_region->_get_kref());
    kdu_long visible_precinct_samples = (kdu_long) *_visible_precinct_samples;
    kdu_long visible_packet_samples = (kdu_long) *_visible_packet_samples;
    kdu_long max_visible_packet_samples = (kdu_long) *_max_visible_packet_samples;
    bool Result;
    Result = _get_kref()->get_codestream_packets(stream_ref,region,visible_precinct_samples,visible_packet_samples,max_visible_packet_samples);
    *_visible_precinct_samples = visible_precinct_samples;
    *_visible_packet_samples = visible_packet_samples;
    *_max_visible_packet_samples = max_visible_packet_samples;
    return Result;
  }
  void Ckdu_region_compositor::configure_overlays(Boolean _enable, Int32 _min_display_size, Int32 _painting_param)
  {
    bool enable = (bool) _enable;
    int min_display_size = (int) _min_display_size;
    int painting_param = (int) _painting_param;
    _get_kref()->configure_overlays(enable,min_display_size,painting_param);
  }
  void Ckdu_region_compositor::update_overlays(Boolean _start_from_scratch)
  {
    bool start_from_scratch = (bool) _start_from_scratch;
    _get_kref()->update_overlays(start_from_scratch);
  }
  Cjpx_metanode ^Ckdu_region_compositor::search_overlays(Ckdu_coords ^_point, cli::interior_ptr<Int32> _codestream_idx)
  {
    kdu_coords point = *(_point->_get_kref());
    int codestream_idx = (int) *_codestream_idx;
    jpx_metanode Result;
    Result = _get_kref()->search_overlays(point,codestream_idx);
    *_codestream_idx = codestream_idx;
    Cjpx_metanode ^_Result = gcnew Cjpx_metanode;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Ckdu_region_compositor::custom_paint_overlay(Ckdu_compositor_buf ^_buffer, Ckdu_dims ^_buffer_region, Ckdu_dims ^_bounding_region, Int32 _codestream_idx, Cjpx_metanode ^_node, Int32 _painting_param, Ckdu_coords ^_image_offset, Ckdu_coords ^_subsampling, Boolean _transpose, Boolean _vflip, Boolean _hflip, Ckdu_coords ^_expansion_numerator, Ckdu_coords ^_expansion_denominator, Ckdu_coords ^_compositing_offset)
  {
    return (Boolean) 0;
  }
  Ckdu_compositor_buf ^Ckdu_region_compositor::allocate_buffer(Ckdu_coords ^_min_size, Ckdu_coords ^_actual_size, Boolean _read_access_required)
  {
    return nullptr;
  }
  void Ckdu_region_compositor::delete_buffer(Ckdu_compositor_buf ^_buf)
  {
  }
  void Ckdu_region_compositor::Do_dispose(bool in_dispose)
  {
    _aux_extended__kdu_region_compositor *_kref_tmp = (_aux_extended__kdu_region_compositor *) _kref;
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        _mni_delegator__kdu_region_compositor *_delegator = (_mni_delegator__kdu_region_compositor *)(_kref_tmp->_delegator);
        delete _kref_tmp;
        if (_delegator != NULL)
          delete _delegator;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_region_decompressor
  Ckdu_region_decompressor::Ckdu_region_decompressor()
  {
    _natively_owned = false;
    _kref = new kdu_region_decompressor();
  }
  Ckdu_dims ^Ckdu_region_decompressor::get_rendered_image_dims(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Int32 _access_mode)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    kdu_dims Result;
    Result = _get_kref()->get_rendered_image_dims(codestream,mapping,single_component,discard_levels,expand_numerator,expand_denominator,access_mode);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_decompressor::get_rendered_image_dims(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    kdu_dims Result;
    Result = _get_kref()->get_rendered_image_dims(codestream,mapping,single_component,discard_levels,expand_numerator,expand_denominator);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_decompressor::get_rendered_image_dims(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Ckdu_coords ^_expand_numerator)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_dims Result;
    Result = _get_kref()->get_rendered_image_dims(codestream,mapping,single_component,discard_levels,expand_numerator);
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Ckdu_dims ^Ckdu_region_decompressor::get_rendered_image_dims()
  {
    kdu_dims Result;
    Result = _get_kref()->get_rendered_image_dims();
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  void Ckdu_region_decompressor::set_white_stretch(Int32 _white_stretch_precision)
  {
    int white_stretch_precision = (int) _white_stretch_precision;
    _get_kref()->set_white_stretch(white_stretch_precision);
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Boolean _precise, Int32 _access_mode, Boolean _fastest, Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool precise = (bool) _precise;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool fastest = (bool) _fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator,precise,access_mode,fastest,env,env_queue);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Boolean _precise, Int32 _access_mode, Boolean _fastest, Ckdu_thread_env ^_env)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool precise = (bool) _precise;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool fastest = (bool) _fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator,precise,access_mode,fastest,env);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Boolean _precise, Int32 _access_mode, Boolean _fastest)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool precise = (bool) _precise;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool fastest = (bool) _fastest;
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator,precise,access_mode,fastest);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Boolean _precise, Int32 _access_mode)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool precise = (bool) _precise;
    kdu_component_access_mode access_mode = (kdu_component_access_mode) _access_mode;
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator,precise,access_mode);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator, Boolean _precise)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool precise = (bool) _precise;
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator,precise);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator, Ckdu_coords ^_expand_denominator)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    kdu_coords expand_denominator = *(_expand_denominator->_get_kref());
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator,expand_denominator);
    return Result;
  }
  Boolean Ckdu_region_decompressor::start(Ckdu_codestream ^_codestream, Ckdu_channel_mapping ^_mapping, Int32 _single_component, Int32 _discard_levels, Int32 _max_layers, Ckdu_dims ^_region, Ckdu_coords ^_expand_numerator)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    kdu_channel_mapping *mapping = ((_mapping==nullptr)?NULL:(_mapping->_get_kref()));
    int single_component = (int) _single_component;
    int discard_levels = (int) _discard_levels;
    int max_layers = (int) _max_layers;
    kdu_dims region = *(_region->_get_kref());
    kdu_coords expand_numerator = *(_expand_numerator->_get_kref());
    bool Result;
    Result = _get_kref()->start(codestream,mapping,single_component,discard_levels,max_layers,region,expand_numerator);
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Int32> ^_buffer, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    bool Result;
    Result = _get_kref()->process(buffer,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region);
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Byte> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region, Int32 _precision_bits, Boolean _measure_row_gap_in_pixels)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (bool) _measure_row_gap_in_pixels;
    bool Result;
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region,precision_bits,measure_row_gap_in_pixels);
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Byte> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region, Int32 _precision_bits)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    int precision_bits = (int) _precision_bits;
    bool Result;
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region,precision_bits);
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Byte> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    bool Result;
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region);
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Int32> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region, Int32 _precision_bits, Boolean _measure_row_gap_in_pixels)
  {
    kdu_uint16 *buffer = NULL;
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        buffer = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          buffer[_n_] = (kdu_uint16) _buffer[_n_];
      }
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    int precision_bits = (int) _precision_bits;
    bool measure_row_gap_in_pixels = (bool) _measure_row_gap_in_pixels;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region,precision_bits,measure_row_gap_in_pixels);
    } catch (...) {
    if (buffer != NULL)
      delete[] buffer;
    throw;
    }
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _buffer[_n_] = (Int32) buffer[_n_];
      }
    if (buffer != NULL)
      delete[] buffer;
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Int32> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region, Int32 _precision_bits)
  {
    kdu_uint16 *buffer = NULL;
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        buffer = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          buffer[_n_] = (kdu_uint16) _buffer[_n_];
      }
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    int precision_bits = (int) _precision_bits;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region,precision_bits);
    } catch (...) {
    if (buffer != NULL)
      delete[] buffer;
    throw;
    }
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _buffer[_n_] = (Int32) buffer[_n_];
      }
    if (buffer != NULL)
      delete[] buffer;
    return Result;
  }
  Boolean Ckdu_region_decompressor::process(cli::array<Int32> ^_buffer, cli::array<Int32> ^_channel_offsets, Int32 _pixel_gap, Ckdu_coords ^_buffer_origin, Int32 _row_gap, Int32 _suggested_increment, Int32 _max_region_pixels, Ckdu_dims ^_incomplete_region, Ckdu_dims ^_new_region)
  {
    kdu_uint16 *buffer = NULL;
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        buffer = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          buffer[_n_] = (kdu_uint16) _buffer[_n_];
      }
    cli::pin_ptr<Int32> channel_offsets = ((_channel_offsets==nullptr)?nullptr:(&_channel_offsets[0]));
    int pixel_gap = (int) _pixel_gap;
    kdu_coords buffer_origin = *(_buffer_origin->_get_kref());
    int row_gap = (int) _row_gap;
    int suggested_increment = (int) _suggested_increment;
    int max_region_pixels = (int) _max_region_pixels;
    kdu_dims &incomplete_region = *(_incomplete_region->_get_kref());
    kdu_dims &new_region = *(_new_region->_get_kref());
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->process(buffer,channel_offsets,pixel_gap,buffer_origin,row_gap,suggested_increment,max_region_pixels,incomplete_region,new_region);
    } catch (...) {
    if (buffer != NULL)
      delete[] buffer;
    throw;
    }
    if (_buffer != nullptr)
      {
        int _len_ = _buffer->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _buffer[_n_] = (Int32) buffer[_n_];
      }
    if (buffer != NULL)
      delete[] buffer;
    return Result;
  }
  Boolean Ckdu_region_decompressor::finish()
  {
    bool Result;
    Result = _get_kref()->finish();
    return Result;
  }
  void Ckdu_region_decompressor::Do_dispose(bool in_dispose)
  {
    kdu_region_decompressor *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_resolution
  Boolean Ckdu_resolution::exists()
  {
    bool Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_resolution ^Ckdu_resolution::access_next()
  {
    kdu_resolution Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.access_next();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_resolution ^_Result = gcnew Ckdu_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Ckdu_resolution::which()
  {
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.which();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_resolution::get_dwt_level()
  {
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_dwt_level();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_resolution::get_comp_idx()
  {
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_comp_idx();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_resolution::get_dims(Ckdu_dims ^_dims)
  {
    kdu_dims &dims = *(_dims->_get_kref());
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    _kval_cast.get_dims(dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_resolution::get_valid_precincts(Ckdu_dims ^_indices)
  {
    kdu_dims &indices = *(_indices->_get_kref());
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    _kval_cast.get_valid_precincts(indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_precinct ^Ckdu_resolution::open_precinct(Ckdu_coords ^_precinct_idx)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    kdu_precinct Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.open_precinct(precinct_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_precinct ^_Result = gcnew Ckdu_precinct;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int64 Ckdu_resolution::get_precinct_id(Ckdu_coords ^_precinct_idx)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    kdu_long Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_id(precinct_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Double Ckdu_resolution::get_precinct_relevance(Ckdu_coords ^_precinct_idx)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    double Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_relevance(precinct_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_resolution::get_precinct_packets(Ckdu_coords ^_precinct_idx, Ckdu_thread_env ^_env, Boolean _parse_if_necessary)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    bool parse_if_necessary = (bool) _parse_if_necessary;
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_packets(precinct_idx,env,parse_if_necessary);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_resolution::get_precinct_packets(Ckdu_coords ^_precinct_idx, Ckdu_thread_env ^_env)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_packets(precinct_idx,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_resolution::get_precinct_packets(Ckdu_coords ^_precinct_idx)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_packets(precinct_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_resolution::get_precinct_samples(Ckdu_coords ^_precinct_idx)
  {
    kdu_coords precinct_idx = *(_precinct_idx->_get_kref());
    kdu_long Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_precinct_samples(precinct_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_node ^Ckdu_resolution::access_node()
  {
    kdu_node Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.access_node();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_node ^_Result = gcnew Ckdu_node;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Ckdu_resolution::get_valid_band_indices(cli::interior_ptr<Int32> _min_idx)
  {
    int min_idx = (int) *_min_idx;
    int Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_valid_band_indices(min_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_min_idx = min_idx;
    return Result;
  }
  Ckdu_subband ^Ckdu_resolution::access_subband(Int32 _band_idx)
  {
    int band_idx = (int) _band_idx;
    kdu_subband Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.access_subband(band_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_subband ^_Result = gcnew Ckdu_subband;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Boolean Ckdu_resolution::get_reversible()
  {
    bool Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.get_reversible();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_resolution::propagate_roi()
  {
    bool Result;
    kdu_resolution _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_resolution *)(&_kval_cast_S));
    Result = _kval_cast.propagate_roi();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_roi_image
  Ckdu_roi_node ^Ckdu_roi_image::acquire_node(Int32 _component, Ckdu_dims ^_tile_region)
  {
    int component = (int) _component;
    kdu_dims tile_region = *(_tile_region->_get_kref());
    kdu_roi_node *Result;
    Result = _get_kref()->acquire_node(component,tile_region);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_roi_node(Result);
  }
  void Ckdu_roi_image::Do_dispose(bool in_dispose)
  {
    kdu_roi_image *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_roi_node
  void Ckdu_roi_node::release()
  {
    _get_kref()->release();
  }
  void Ckdu_roi_node::pull(cli::array<Byte> ^_buf, Int32 _width)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int width = (int) _width;
    _get_kref()->pull(buf,width);
  }
  void Ckdu_roi_node::Do_dispose(bool in_dispose)
  {
    kdu_roi_node *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_sample_allocator
  Ckdu_sample_allocator::Ckdu_sample_allocator()
  {
    _natively_owned = false;
    _kref = new kdu_sample_allocator();
  }
  void Ckdu_sample_allocator::restart()
  {
    _get_kref()->restart();
  }
  void Ckdu_sample_allocator::pre_alloc(Boolean _use_shorts, Int32 _before, Int32 _after, Int32 _num_requests)
  {
    bool use_shorts = (bool) _use_shorts;
    int before = (int) _before;
    int after = (int) _after;
    int num_requests = (int) _num_requests;
    _get_kref()->pre_alloc(use_shorts,before,after,num_requests);
  }
  void Ckdu_sample_allocator::finalize()
  {
    _get_kref()->finalize();
  }
  Int32 Ckdu_sample_allocator::get_size()
  {
    int Result;
    Result = _get_kref()->get_size();
    return Result;
  }
  void Ckdu_sample_allocator::Do_dispose(bool in_dispose)
  {
    kdu_sample_allocator *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_sampled_range
  Ckdu_sampled_range::Ckdu_sampled_range()
  {
    _natively_owned = false;
    _kref = new kdu_sampled_range();
  }
  Ckdu_sampled_range::Ckdu_sampled_range(Int32 _val)
  {
    int val = (int) _val;
    _natively_owned = false;
    _kref = new kdu_sampled_range(val);
  }
  Ckdu_sampled_range::Ckdu_sampled_range(Int32 _from, Int32 _to)
  {
    int from = (int) _from;
    int to = (int) _to;
    _natively_owned = false;
    _kref = new kdu_sampled_range(from,to);
  }
  Ckdu_sampled_range::Ckdu_sampled_range(Int32 _from, Int32 _to, Int32 _step)
  {
    int from = (int) _from;
    int to = (int) _to;
    int step = (int) _step;
    _natively_owned = false;
    _kref = new kdu_sampled_range(from,to,step);
  }
  Boolean Ckdu_sampled_range::is_empty()
  {
    bool Result;
    Result = _get_kref()->is_empty();
    return Result;
  }
  Int32 Ckdu_sampled_range::__property_get_from()
  {
    int Result;
    Result = _get_kref()->get_from();
    return Result;
  }
  Int32 Ckdu_sampled_range::__property_get_to()
  {
    int Result;
    Result = _get_kref()->get_to();
    return Result;
  }
  Int32 Ckdu_sampled_range::__property_get_step()
  {
    int Result;
    Result = _get_kref()->get_step();
    return Result;
  }
  Int32 Ckdu_sampled_range::get_remapping_id(Int32 _which)
  {
    int which = (int) _which;
    int Result;
    Result = _get_kref()->get_remapping_id(which);
    return Result;
  }
  Int32 Ckdu_sampled_range::__property_get_context_type()
  {
    int Result;
    Result = _get_kref()->get_context_type();
    return Result;
  }
  Ckdu_range_set ^Ckdu_sampled_range::get_context_expansion()
  {
    kdu_range_set *Result;
    Result = _get_kref()->get_context_expansion();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_range_set(Result);
  }
  void Ckdu_sampled_range::__property_set_from(Int32 _from)
  {
    int from = (int) _from;
    _get_kref()->set_from(from);
  }
  void Ckdu_sampled_range::__property_set_to(Int32 _to)
  {
    int to = (int) _to;
    _get_kref()->set_to(to);
  }
  void Ckdu_sampled_range::__property_set_step(Int32 _step)
  {
    int step = (int) _step;
    _get_kref()->set_step(step);
  }
  void Ckdu_sampled_range::set_remapping_id(Int32 _which, Int32 _id_val)
  {
    int which = (int) _which;
    int id_val = (int) _id_val;
    _get_kref()->set_remapping_id(which,id_val);
  }
  void Ckdu_sampled_range::__property_set_context_type(Int32 _ctp)
  {
    int ctp = (int) _ctp;
    _get_kref()->set_context_type(ctp);
  }
  void Ckdu_sampled_range::Do_dispose(bool in_dispose)
  {
    kdu_sampled_range *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_serve
  Ckdu_serve::Ckdu_serve()
  {
    _natively_owned = false;
    _kref = new kdu_serve();
  }
  void Ckdu_serve::initialize(Ckdu_serve_target ^_target, Int32 _max_chunk_size, Int32 _chunk_prefix_bytes, Boolean _ignore_relevance_info)
  {
    kdu_serve_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    int max_chunk_size = (int) _max_chunk_size;
    int chunk_prefix_bytes = (int) _chunk_prefix_bytes;
    bool ignore_relevance_info = (bool) _ignore_relevance_info;
    _get_kref()->initialize(target,max_chunk_size,chunk_prefix_bytes,ignore_relevance_info);
  }
  void Ckdu_serve::initialize(Ckdu_serve_target ^_target, Int32 _max_chunk_size, Int32 _chunk_prefix_bytes)
  {
    kdu_serve_target *target = ((_target==nullptr)?NULL:(_target->_get_kref()));
    int max_chunk_size = (int) _max_chunk_size;
    int chunk_prefix_bytes = (int) _chunk_prefix_bytes;
    _get_kref()->initialize(target,max_chunk_size,chunk_prefix_bytes);
  }
  void Ckdu_serve::destroy()
  {
    _get_kref()->destroy();
  }
  void Ckdu_serve::set_window(Ckdu_window ^_window)
  {
    kdu_window &window = *(_window->_get_kref());
    _get_kref()->set_window(window);
  }
  Boolean Ckdu_serve::get_window(Ckdu_window ^_window)
  {
    kdu_window &window = *(_window->_get_kref());
    bool Result;
    Result = _get_kref()->get_window(window);
    return Result;
  }
  void Ckdu_serve::augment_cache_model(Int32 _databin_class, Int32 _stream_min, Int32 _stream_max, Int64 _bin_id, Int32 _available_bytes, Int32 _available_packets)
  {
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    _get_kref()->augment_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes,available_packets);
  }
  void Ckdu_serve::augment_cache_model(Int32 _databin_class, Int32 _stream_min, Int32 _stream_max, Int64 _bin_id, Int32 _available_bytes)
  {
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    _get_kref()->augment_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes);
  }
  void Ckdu_serve::truncate_cache_model(Int32 _databin_class, Int32 _stream_min, Int32 _stream_max, Int64 _bin_id, Int32 _available_bytes, Int32 _available_packets)
  {
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    _get_kref()->truncate_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes,available_packets);
  }
  void Ckdu_serve::truncate_cache_model(Int32 _databin_class, Int32 _stream_min, Int32 _stream_max, Int64 _bin_id, Int32 _available_bytes)
  {
    int databin_class = (int) _databin_class;
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    kdu_long bin_id = (kdu_long) _bin_id;
    int available_bytes = (int) _available_bytes;
    _get_kref()->truncate_cache_model(databin_class,stream_min,stream_max,bin_id,available_bytes);
  }
  void Ckdu_serve::augment_cache_model(Int32 _stream_min, Int32 _stream_max, Int32 _tmin, Int32 _tmax, Int32 _cmin, Int32 _cmax, Int32 _rmin, Int32 _rmax, Int32 _pmin, Int32 _pmax, Int32 _available_bytes, Int32 _available_packets)
  {
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    int tmin = (int) _tmin;
    int tmax = (int) _tmax;
    int cmin = (int) _cmin;
    int cmax = (int) _cmax;
    int rmin = (int) _rmin;
    int rmax = (int) _rmax;
    int pmin = (int) _pmin;
    int pmax = (int) _pmax;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    _get_kref()->augment_cache_model(stream_min,stream_max,tmin,tmax,cmin,cmax,rmin,rmax,pmin,pmax,available_bytes,available_packets);
  }
  void Ckdu_serve::truncate_cache_model(Int32 _stream_min, Int32 _stream_max, Int32 _tmin, Int32 _tmax, Int32 _cmin, Int32 _cmax, Int32 _rmin, Int32 _rmax, Int32 _pmin, Int32 _pmax, Int32 _available_bytes, Int32 _available_packets)
  {
    int stream_min = (int) _stream_min;
    int stream_max = (int) _stream_max;
    int tmin = (int) _tmin;
    int tmax = (int) _tmax;
    int cmin = (int) _cmin;
    int cmax = (int) _cmax;
    int rmin = (int) _rmin;
    int rmax = (int) _rmax;
    int pmin = (int) _pmin;
    int pmax = (int) _pmax;
    int available_bytes = (int) _available_bytes;
    int available_packets = (int) _available_packets;
    _get_kref()->truncate_cache_model(stream_min,stream_max,tmin,tmax,cmin,cmax,rmin,rmax,pmin,pmax,available_bytes,available_packets);
  }
  Boolean Ckdu_serve::get_image_done()
  {
    bool Result;
    Result = _get_kref()->get_image_done();
    return Result;
  }
  Int32 Ckdu_serve::push_extra_data(cli::array<Byte> ^_data, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->push_extra_data(data,num_bytes);
    return Result;
  }
  void Ckdu_serve::Do_dispose(bool in_dispose)
  {
    kdu_serve *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_serve_target
  IntPtr Ckdu_serve_target::get_codestream_ranges(cli::interior_ptr<Int32> _num_ranges, Int32 _compositing_layer_idx)
  {
    int num_ranges = (int) *_num_ranges;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    int *Result;
    Result = _get_kref()->get_codestream_ranges(num_ranges,compositing_layer_idx);
    *_num_ranges = num_ranges;
    return IntPtr((void *) Result);
  }
  IntPtr Ckdu_serve_target::get_codestream_ranges(cli::interior_ptr<Int32> _num_ranges)
  {
    Int32 _compositing_layer_idx = (Int32)(-1);
    return get_codestream_ranges(_num_ranges,_compositing_layer_idx);
  }
  Ckdu_codestream ^Ckdu_serve_target::attach_to_codestream(Int32 _codestream_id, IntPtr _thread_handle)
  {
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    kdu_codestream Result;
    Result = _get_kref()->attach_to_codestream(codestream_id,thread_handle);
    Ckdu_codestream ^_Result = gcnew Ckdu_codestream;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Ckdu_serve_target::detach_from_codestream(Int32 _codestream_id, IntPtr _thread_handle)
  {
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->detach_from_codestream(codestream_id,thread_handle);
  }
  void Ckdu_serve_target::lock_codestreams(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, IntPtr _thread_handle)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->lock_codestreams(num_codestreams,codestream_indices,thread_handle);
  }
  void Ckdu_serve_target::release_codestreams(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, IntPtr _thread_handle)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->release_codestreams(num_codestreams,codestream_indices,thread_handle);
  }
  Int32 Ckdu_serve_target::get_num_context_members(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int Result;
    Result = _get_kref()->get_num_context_members(context_type,context_idx,remapping_ids);
    return Result;
  }
  Int32 Ckdu_serve_target::get_context_codestream(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int Result;
    Result = _get_kref()->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    return Result;
  }
  IntPtr Ckdu_serve_target::get_context_components(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, cli::interior_ptr<Int32> _num_components)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int num_components = (int) *_num_components;
    const int *Result;
    Result = _get_kref()->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    *_num_components = num_components;
    return IntPtr((void *) Result);
  }
  Boolean Ckdu_serve_target::perform_context_remapping(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, Ckdu_coords ^_resolution, Ckdu_dims ^_region)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    kdu_coords &resolution = *(_resolution->_get_kref());
    kdu_dims &region = *(_region->_get_kref());
    bool Result;
    Result = _get_kref()->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,resolution,region);
    return Result;
  }
  Int32 Ckdu_serve_target::find_roi(Int32 _stream_id, String ^ _roi_name)
  {
    int stream_id = (int) _stream_id;
    char * roi_name = NULL;
    if (_roi_name != nullptr)
      {
        roi_name = new char[(_roi_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> roi_name_W = PtrToStringChars(_roi_name);
        wcstombs(roi_name,roi_name_W,(_roi_name->Length+1)*2);
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->find_roi(stream_id,roi_name);
    } catch (...) {
    if (roi_name != NULL)
      delete[] roi_name;
    throw;
    }
    if (roi_name != NULL)
      delete[] roi_name;
    return Result;
  }
  Int32 Ckdu_serve_target::find_roi(Int32 _stream_id)
  {
    String ^ _roi_name = nullptr;
    return find_roi(_stream_id,_roi_name);
  }
  String ^ Ckdu_serve_target::get_roi_details(Int32 _index, Ckdu_coords ^_resolution, Ckdu_dims ^_region)
  {
    int index = (int) _index;
    kdu_coords &resolution = *(_resolution->_get_kref());
    kdu_dims &region = *(_region->_get_kref());
    const char * Result;
    Result = _get_kref()->get_roi_details(index,resolution,region);
    return gcnew String((char *) Result);
  }
  void Ckdu_serve_target::Do_dispose(bool in_dispose)
  {
    kdu_serve_target *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_servex
  void Ckdu_servex::open(String ^ _filename, Int32 _phld_threshold, Int32 _per_client_cache, IntPtr _cache_fp, Boolean _cache_exists, Int64 _sub_start, Int64 _sub_lim)
  {
    char * filename = NULL;
    if (_filename != nullptr)
      {
        filename = new char[(_filename->Length+1)*2];
        cli::pin_ptr<const wchar_t> filename_W = PtrToStringChars(_filename);
        wcstombs(filename,filename_W,(_filename->Length+1)*2);
      }
    int phld_threshold = (int) _phld_threshold;
    int per_client_cache = (int) _per_client_cache;
    FILE *cache_fp = (FILE *) _cache_fp.ToPointer();
    bool cache_exists = (bool) _cache_exists;
    kdu_long sub_start = (kdu_long) _sub_start;
    kdu_long sub_lim = (kdu_long) _sub_lim;
    try { // So we can clean up temporary arrays
    _get_kref()->open(filename,phld_threshold,per_client_cache,cache_fp,cache_exists,sub_start,sub_lim);
    } catch (...) {
    if (filename != NULL)
      delete[] filename;
    throw;
    }
    if (filename != NULL)
      delete[] filename;
  }
  void Ckdu_servex::open(String ^ _filename, Int32 _phld_threshold, Int32 _per_client_cache, IntPtr _cache_fp, Boolean _cache_exists, Int64 _sub_start)
  {
    char * filename = NULL;
    if (_filename != nullptr)
      {
        filename = new char[(_filename->Length+1)*2];
        cli::pin_ptr<const wchar_t> filename_W = PtrToStringChars(_filename);
        wcstombs(filename,filename_W,(_filename->Length+1)*2);
      }
    int phld_threshold = (int) _phld_threshold;
    int per_client_cache = (int) _per_client_cache;
    FILE *cache_fp = (FILE *) _cache_fp.ToPointer();
    bool cache_exists = (bool) _cache_exists;
    kdu_long sub_start = (kdu_long) _sub_start;
    try { // So we can clean up temporary arrays
    _get_kref()->open(filename,phld_threshold,per_client_cache,cache_fp,cache_exists,sub_start);
    } catch (...) {
    if (filename != NULL)
      delete[] filename;
    throw;
    }
    if (filename != NULL)
      delete[] filename;
  }
  void Ckdu_servex::open(String ^ _filename, Int32 _phld_threshold, Int32 _per_client_cache, IntPtr _cache_fp, Boolean _cache_exists)
  {
    char * filename = NULL;
    if (_filename != nullptr)
      {
        filename = new char[(_filename->Length+1)*2];
        cli::pin_ptr<const wchar_t> filename_W = PtrToStringChars(_filename);
        wcstombs(filename,filename_W,(_filename->Length+1)*2);
      }
    int phld_threshold = (int) _phld_threshold;
    int per_client_cache = (int) _per_client_cache;
    FILE *cache_fp = (FILE *) _cache_fp.ToPointer();
    bool cache_exists = (bool) _cache_exists;
    try { // So we can clean up temporary arrays
    _get_kref()->open(filename,phld_threshold,per_client_cache,cache_fp,cache_exists);
    } catch (...) {
    if (filename != NULL)
      delete[] filename;
    throw;
    }
    if (filename != NULL)
      delete[] filename;
  }
  void Ckdu_servex::close()
  {
    _get_kref()->close();
  }
  IntPtr Ckdu_servex::get_codestream_ranges(cli::interior_ptr<Int32> _num_ranges, Int32 _compositing_layer_idx)
  {
    int num_ranges = (int) *_num_ranges;
    int compositing_layer_idx = (int) _compositing_layer_idx;
    int *Result;
    Result = _get_kref()->get_codestream_ranges(num_ranges,compositing_layer_idx);
    *_num_ranges = num_ranges;
    return IntPtr((void *) Result);
  }
  Ckdu_codestream ^Ckdu_servex::attach_to_codestream(Int32 _codestream_id, IntPtr _thread_handle)
  {
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    kdu_codestream Result;
    Result = _get_kref()->attach_to_codestream(codestream_id,thread_handle);
    Ckdu_codestream ^_Result = gcnew Ckdu_codestream;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Ckdu_servex::detach_from_codestream(Int32 _codestream_id, IntPtr _thread_handle)
  {
    int codestream_id = (int) _codestream_id;
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->detach_from_codestream(codestream_id,thread_handle);
  }
  void Ckdu_servex::lock_codestreams(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, IntPtr _thread_handle)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->lock_codestreams(num_codestreams,codestream_indices,thread_handle);
  }
  void Ckdu_servex::release_codestreams(Int32 _num_codestreams, cli::array<Int32> ^_codestream_indices, IntPtr _thread_handle)
  {
    int num_codestreams = (int) _num_codestreams;
    cli::pin_ptr<Int32> codestream_indices = ((_codestream_indices==nullptr)?nullptr:(&_codestream_indices[0]));
    kd_serve *thread_handle = (kd_serve *) _thread_handle.ToPointer();
    _get_kref()->release_codestreams(num_codestreams,codestream_indices,thread_handle);
  }
  Int32 Ckdu_servex::get_num_context_members(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int Result;
    Result = _get_kref()->get_num_context_members(context_type,context_idx,remapping_ids);
    return Result;
  }
  Int32 Ckdu_servex::get_context_codestream(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int Result;
    Result = _get_kref()->get_context_codestream(context_type,context_idx,remapping_ids,member_idx);
    return Result;
  }
  IntPtr Ckdu_servex::get_context_components(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, cli::interior_ptr<Int32> _num_components)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    int num_components = (int) *_num_components;
    const int *Result;
    Result = _get_kref()->get_context_components(context_type,context_idx,remapping_ids,member_idx,num_components);
    *_num_components = num_components;
    return IntPtr((void *) Result);
  }
  Boolean Ckdu_servex::perform_context_remapping(Int32 _context_type, Int32 _context_idx, cli::array<Int32> ^_remapping_ids, Int32 _member_idx, Ckdu_coords ^_resolution, Ckdu_dims ^_region)
  {
    int context_type = (int) _context_type;
    int context_idx = (int) _context_idx;
    cli::pin_ptr<Int32> remapping_ids = ((_remapping_ids==nullptr)?nullptr:(&_remapping_ids[0]));
    int member_idx = (int) _member_idx;
    kdu_coords &resolution = *(_resolution->_get_kref());
    kdu_dims &region = *(_region->_get_kref());
    bool Result;
    Result = _get_kref()->perform_context_remapping(context_type,context_idx,remapping_ids,member_idx,resolution,region);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_simple_file_source
  Ckdu_simple_file_source::Ckdu_simple_file_source()
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_simple_file_source();
  }
  Ckdu_simple_file_source::Ckdu_simple_file_source(String ^ _fname, Boolean _allow_seeks)
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool allow_seeks = (bool) _allow_seeks;
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_file_source(fname,allow_seeks);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Ckdu_simple_file_source::Ckdu_simple_file_source(String ^ _fname)
      : Ckdu_compressed_source((kdu_compressed_source *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_file_source(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_file_source::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Ckdu_simple_file_source::open(String ^ _fname, Boolean _allow_seeks, Boolean _return_on_failure)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool allow_seeks = (bool) _allow_seeks;
    bool return_on_failure = (bool) _return_on_failure;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname,allow_seeks,return_on_failure);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Boolean Ckdu_simple_file_source::open(String ^ _fname, Boolean _allow_seeks)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool allow_seeks = (bool) _allow_seeks;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname,allow_seeks);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Boolean Ckdu_simple_file_source::open(String ^ _fname)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Int32 Ckdu_simple_file_source::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Boolean Ckdu_simple_file_source::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Ckdu_simple_file_source::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  Int32 Ckdu_simple_file_source::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  Boolean Ckdu_simple_file_source::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_simple_file_target
  Ckdu_simple_file_target::Ckdu_simple_file_target()
      : Ckdu_compressed_target((kdu_compressed_target *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_simple_file_target();
  }
  Ckdu_simple_file_target::Ckdu_simple_file_target(String ^ _fname, Boolean _append_to_existing)
      : Ckdu_compressed_target((kdu_compressed_target *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool append_to_existing = (bool) _append_to_existing;
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_file_target(fname,append_to_existing);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Ckdu_simple_file_target::Ckdu_simple_file_target(String ^ _fname)
      : Ckdu_compressed_target((kdu_compressed_target *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_file_target(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_file_target::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Ckdu_simple_file_target::open(String ^ _fname, Boolean _append_to_existing, Boolean _return_on_failure)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool append_to_existing = (bool) _append_to_existing;
    bool return_on_failure = (bool) _return_on_failure;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname,append_to_existing,return_on_failure);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Boolean Ckdu_simple_file_target::open(String ^ _fname, Boolean _append_to_existing)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool append_to_existing = (bool) _append_to_existing;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname,append_to_existing);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Boolean Ckdu_simple_file_target::open(String ^ _fname)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->open(fname);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
    return Result;
  }
  Boolean Ckdu_simple_file_target::strip_tail(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->strip_tail(buf,num_bytes);
    return Result;
  }
  Boolean Ckdu_simple_file_target::write(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->write(buf,num_bytes);
    return Result;
  }
  Boolean Ckdu_simple_file_target::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Boolean Ckdu_simple_file_target::start_rewrite(Int64 _backtrack)
  {
    kdu_long backtrack = (kdu_long) _backtrack;
    bool Result;
    Result = _get_kref()->start_rewrite(backtrack);
    return Result;
  }
  Boolean Ckdu_simple_file_target::end_rewrite()
  {
    bool Result;
    Result = _get_kref()->end_rewrite();
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_simple_video_source
  Ckdu_simple_video_source::Ckdu_simple_video_source()
      : Ckdu_compressed_video_source((kdu_compressed_video_source *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_simple_video_source();
  }
  Ckdu_simple_video_source::Ckdu_simple_video_source(String ^ _fname, cli::interior_ptr<Int64> _flags)
      : Ckdu_compressed_video_source((kdu_compressed_video_source *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    kdu_uint32 flags = (kdu_uint32) *_flags;
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_video_source(fname,flags);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    *_flags = flags;
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_video_source::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Ckdu_simple_video_source::open(String ^ _fname, cli::interior_ptr<Int64> _flags)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    kdu_uint32 flags = (kdu_uint32) *_flags;
    try { // So we can clean up temporary arrays
    _get_kref()->open(fname,flags);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    *_flags = flags;
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_video_source::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  Int64 Ckdu_simple_video_source::get_timescale()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_timescale();
    return Result;
  }
  Int64 Ckdu_simple_video_source::get_frame_instant()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_instant();
    return Result;
  }
  Int32 Ckdu_simple_video_source::open_image()
  {
    int Result;
    Result = _get_kref()->open_image();
    return Result;
  }
  void Ckdu_simple_video_source::close_image()
  {
    _get_kref()->close_image();
  }
  Int64 Ckdu_simple_video_source::get_frame_period()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_period();
    return Result;
  }
  Int32 Ckdu_simple_video_source::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Boolean Ckdu_simple_video_source::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Ckdu_simple_video_source::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  Int32 Ckdu_simple_video_source::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_simple_video_target
  Ckdu_simple_video_target::Ckdu_simple_video_target()
      : Ckdu_compressed_video_target((kdu_compressed_video_target *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_simple_video_target();
  }
  Ckdu_simple_video_target::Ckdu_simple_video_target(String ^ _fname, Int64 _timescale, Int64 _frame_period, Int64 _flags)
      : Ckdu_compressed_video_target((kdu_compressed_video_target *) NULL)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    try { // So we can clean up temporary arrays
    _natively_owned = false;
    _kref = new kdu_simple_video_target(fname,timescale,frame_period,flags);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_video_target::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Ckdu_simple_video_target::open(String ^ _fname, Int64 _timescale, Int64 _frame_period, Int64 _flags)
  {
    char * fname = NULL;
    if (_fname != nullptr)
      {
        fname = new char[(_fname->Length+1)*2];
        cli::pin_ptr<const wchar_t> fname_W = PtrToStringChars(_fname);
        wcstombs(fname,fname_W,(_fname->Length+1)*2);
      }
    kdu_uint32 timescale = (kdu_uint32) _timescale;
    kdu_uint32 frame_period = (kdu_uint32) _frame_period;
    kdu_uint32 flags = (kdu_uint32) _flags;
    try { // So we can clean up temporary arrays
    _get_kref()->open(fname,timescale,frame_period,flags);
    } catch (...) {
    if (fname != NULL)
      delete[] fname;
    throw;
    }
    if (fname != NULL)
      delete[] fname;
  }
  Boolean Ckdu_simple_video_target::close()
  {
    bool Result;
    Result = _get_kref()->close();
    return Result;
  }
  void Ckdu_simple_video_target::open_image()
  {
    _get_kref()->open_image();
  }
  Boolean Ckdu_simple_video_target::write(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->write(buf,num_bytes);
    return Result;
  }
  void Ckdu_simple_video_target::close_image(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    _get_kref()->close_image(codestream);
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_stripe_compressor
  Ckdu_stripe_compressor::Ckdu_stripe_compressor()
  {
    _natively_owned = false;
    _kref = new kdu_stripe_compressor();
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance, Int32 _num_components, Boolean _want_fastest, Ckdu_thread_env ^_env, IntPtr _env_queue, Int32 _env_dbuf_height)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    int env_dbuf_height = (int) _env_dbuf_height;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest,env,env_queue,env_dbuf_height);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance, Int32 _num_components, Boolean _want_fastest, Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest,env,env_queue);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance, Int32 _num_components, Boolean _want_fastest, Ckdu_thread_env ^_env)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest,env);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance, Int32 _num_components, Boolean _want_fastest)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    bool want_fastest = (bool) _want_fastest;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components,want_fastest);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance, Int32 _num_components)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    int num_components = (int) _num_components;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance,num_components);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment, Double _size_tolerance)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    double size_tolerance = (double) _size_tolerance;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment,size_tolerance);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise, Boolean _record_layer_info_in_comment)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    bool record_layer_info_in_comment = (bool) _record_layer_info_in_comment;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise,record_layer_info_in_comment);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction, Boolean _force_precise)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    bool force_precise = (bool) _force_precise;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction,force_precise);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold, Boolean _no_prediction)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    bool no_prediction = (bool) _no_prediction;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold,no_prediction);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes, Int32 _min_slope_threshold)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    kdu_uint16 min_slope_threshold = (kdu_uint16) _min_slope_threshold;
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes,min_slope_threshold);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes,layer_slopes);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->start(codestream,num_layer_specs,layer_sizes);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream, Int32 _num_layer_specs)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    int num_layer_specs = (int) _num_layer_specs;
    _get_kref()->start(codestream,num_layer_specs);
  }
  void Ckdu_stripe_compressor::start(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    _get_kref()->start(codestream);
  }
  Boolean Ckdu_stripe_compressor::finish(Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes, cli::array<Int32> ^_layer_slopes)
  {
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    kdu_uint16 *layer_slopes = NULL;
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        layer_slopes = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_slopes[_n_] = (kdu_uint16) _layer_slopes[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->finish(num_layer_specs,layer_sizes,layer_slopes);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (_layer_slopes != nullptr)
      {
        int _len_ = _layer_slopes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_slopes[_n_] = (Int32) layer_slopes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    if (layer_slopes != NULL)
      delete[] layer_slopes;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::finish(Int32 _num_layer_specs, cli::array<Int64> ^_layer_sizes)
  {
    int num_layer_specs = (int) _num_layer_specs;
    kdu_long *layer_sizes = NULL;
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        layer_sizes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_sizes[_n_] = (kdu_long) _layer_sizes[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->finish(num_layer_specs,layer_sizes);
    } catch (...) {
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    throw;
    }
    if (_layer_sizes != nullptr)
      {
        int _len_ = _layer_sizes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_sizes[_n_] = (Int64) layer_sizes[_n_];
      }
    if (layer_sizes != NULL)
      delete[] layer_sizes;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::finish(Int32 _num_layer_specs)
  {
    int num_layer_specs = (int) _num_layer_specs;
    bool Result;
    Result = _get_kref()->finish(num_layer_specs);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::finish()
  {
    bool Result;
    Result = _get_kref()->finish();
    return Result;
  }
  Boolean Ckdu_stripe_compressor::get_recommended_stripe_heights(Int32 _preferred_min_height, Int32 _absolute_max_height, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_max_stripe_heights)
  {
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> max_stripe_heights = ((_max_stripe_heights==nullptr)?nullptr:(&_max_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, Int32 _flush_period)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    int flush_period = (int) _flush_period;
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,flush_period);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed, Int32 _flush_period)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed, Int32 _flush_period)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed, Int32 _flush_period)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    int flush_period = (int) _flush_period;
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed,flush_period);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_compressor::push_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->push_stripe(buffer,stripe_heights);
    return Result;
  }
  void Ckdu_stripe_compressor::Do_dispose(bool in_dispose)
  {
    kdu_stripe_compressor *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_stripe_decompressor
  Ckdu_stripe_decompressor::Ckdu_stripe_decompressor()
  {
    _natively_owned = false;
    _kref = new kdu_stripe_decompressor();
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream, Boolean _force_precise, Boolean _want_fastest, Ckdu_thread_env ^_env, IntPtr _env_queue, Int32 _env_dbuf_height)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (bool) _force_precise;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    int env_dbuf_height = (int) _env_dbuf_height;
    _get_kref()->start(codestream,force_precise,want_fastest,env,env_queue,env_dbuf_height);
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream, Boolean _force_precise, Boolean _want_fastest, Ckdu_thread_env ^_env, IntPtr _env_queue)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (bool) _force_precise;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _get_kref()->start(codestream,force_precise,want_fastest,env,env_queue);
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream, Boolean _force_precise, Boolean _want_fastest, Ckdu_thread_env ^_env)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (bool) _force_precise;
    bool want_fastest = (bool) _want_fastest;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _get_kref()->start(codestream,force_precise,want_fastest,env);
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream, Boolean _force_precise, Boolean _want_fastest)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (bool) _force_precise;
    bool want_fastest = (bool) _want_fastest;
    _get_kref()->start(codestream,force_precise,want_fastest);
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream, Boolean _force_precise)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    bool force_precise = (bool) _force_precise;
    _get_kref()->start(codestream,force_precise);
  }
  void Ckdu_stripe_decompressor::start(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    _get_kref()->start(codestream);
  }
  Boolean Ckdu_stripe_decompressor::finish()
  {
    bool Result;
    Result = _get_kref()->finish();
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::get_recommended_stripe_heights(Int32 _preferred_min_height, Int32 _absolute_max_height, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_max_stripe_heights)
  {
    int preferred_min_height = (int) _preferred_min_height;
    int absolute_max_height = (int) _absolute_max_height;
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> max_stripe_heights = ((_max_stripe_heights==nullptr)?nullptr:(&_max_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->get_recommended_stripe_heights(preferred_min_height,absolute_max_height,stripe_heights,max_stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Byte> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Byte> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int16> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Int16> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Int32> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Int32> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions, cli::array<Boolean> ^_is_signed)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool *is_signed = NULL;
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        is_signed = new bool[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          is_signed[_n_] = (bool) _is_signed[_n_];
      }
    bool Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions,is_signed);
    } catch (...) {
    if (is_signed != NULL)
      delete[] is_signed;
    throw;
    }
    if (_is_signed != nullptr)
      {
        int _len_ = _is_signed->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _is_signed[_n_] = (Boolean) is_signed[_n_];
      }
    if (is_signed != NULL)
      delete[] is_signed;
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps, cli::array<Int32> ^_precisions)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    cli::pin_ptr<Int32> precisions = ((_precisions==nullptr)?nullptr:(&_precisions[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps,precisions);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps, cli::array<Int32> ^_row_gaps)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    cli::pin_ptr<Int32> row_gaps = ((_row_gaps==nullptr)?nullptr:(&_row_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps,row_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets, cli::array<Int32> ^_sample_gaps)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    cli::pin_ptr<Int32> sample_gaps = ((_sample_gaps==nullptr)?nullptr:(&_sample_gaps[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets,sample_gaps);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights, cli::array<Int32> ^_sample_offsets)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    cli::pin_ptr<Int32> sample_offsets = ((_sample_offsets==nullptr)?nullptr:(&_sample_offsets[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights,sample_offsets);
    return Result;
  }
  Boolean Ckdu_stripe_decompressor::pull_stripe(cli::array<Single> ^_buffer, cli::array<Int32> ^_stripe_heights)
  {
    cli::pin_ptr<Single> buffer = ((_buffer==nullptr)?nullptr:(&_buffer[0]));
    cli::pin_ptr<Int32> stripe_heights = ((_stripe_heights==nullptr)?nullptr:(&_stripe_heights[0]));
    bool Result;
    Result = _get_kref()->pull_stripe(buffer,stripe_heights);
    return Result;
  }
  void Ckdu_stripe_decompressor::Do_dispose(bool in_dispose)
  {
    kdu_stripe_decompressor *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_subband
  Boolean Ckdu_subband::exists()
  {
    bool Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_subband::get_band_idx()
  {
    int Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_band_idx();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_resolution ^Ckdu_subband::access_resolution()
  {
    kdu_resolution Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_resolution ^_Result = gcnew Ckdu_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Ckdu_subband::get_K_max()
  {
    int Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_K_max();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_subband::get_K_max_prime()
  {
    int Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_K_max_prime();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_subband::get_reversible()
  {
    bool Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_reversible();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Single Ckdu_subband::get_delta()
  {
    float Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_delta();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Single Ckdu_subband::get_msb_wmse()
  {
    float Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_msb_wmse();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_subband::get_roi_weight(cli::interior_ptr<Single> _energy_weight)
  {
    float energy_weight = (float) *_energy_weight;
    bool Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_roi_weight(energy_weight);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_energy_weight = energy_weight;
    return Result;
  }
  void Ckdu_subband::get_dims(Ckdu_dims ^_dims)
  {
    kdu_dims &dims = *(_dims->_get_kref());
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    _kval_cast.get_dims(dims);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_subband::get_valid_blocks(Ckdu_dims ^_indices)
  {
    kdu_dims &indices = *(_indices->_get_kref());
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    _kval_cast.get_valid_blocks(indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_subband::get_block_size(Ckdu_coords ^_nominal_size, Ckdu_coords ^_first_size)
  {
    kdu_coords &nominal_size = *(_nominal_size->_get_kref());
    kdu_coords &first_size = *(_first_size->_get_kref());
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    _kval_cast.get_block_size(nominal_size,first_size);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Ckdu_block ^Ckdu_subband::open_block(Ckdu_coords ^_block_idx, cli::array<Int32> ^_return_tpart, Ckdu_thread_env ^_env)
  {
    kdu_coords block_idx = *(_block_idx->_get_kref());
    cli::pin_ptr<Int32> return_tpart = ((_return_tpart==nullptr)?nullptr:(&_return_tpart[0]));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_block *Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.open_block(block_idx,return_tpart,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_block(Result);
  }
  Ckdu_block ^Ckdu_subband::open_block(Ckdu_coords ^_block_idx, cli::array<Int32> ^_return_tpart)
  {
    kdu_coords block_idx = *(_block_idx->_get_kref());
    cli::pin_ptr<Int32> return_tpart = ((_return_tpart==nullptr)?nullptr:(&_return_tpart[0]));
    kdu_block *Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.open_block(block_idx,return_tpart);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_block(Result);
  }
  Ckdu_block ^Ckdu_subband::open_block(Ckdu_coords ^_block_idx)
  {
    kdu_coords block_idx = *(_block_idx->_get_kref());
    kdu_block *Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.open_block(block_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_block(Result);
  }
  void Ckdu_subband::close_block(Ckdu_block ^_block, Ckdu_thread_env ^_env)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    _kval_cast.close_block(block,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_subband::close_block(Ckdu_block ^_block)
  {
    kdu_block *block = ((_block==nullptr)?NULL:(_block->_get_kref()));
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    _kval_cast.close_block(block);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Ckdu_subband::get_conservative_slope_threshold()
  {
    kdu_uint16 Result;
    kdu_subband _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_subband *)(&_kval_cast_S));
    Result = _kval_cast.get_conservative_slope_threshold();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_synthesis
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_synthesis(node,allocator,use_shorts,normalization,pull_offset,env,env_queue);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset, Ckdu_thread_env ^_env)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_synthesis(node,allocator,use_shorts,normalization,pull_offset,env);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Int32 _pull_offset)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    int pull_offset = (int) _pull_offset;
    _natively_owned = false;
    _kref = new kdu_synthesis(node,allocator,use_shorts,normalization,pull_offset);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_synthesis(node,allocator,use_shorts,normalization);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_node ^_node, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_node node;
    void *node_S = ((_node==nullptr)?NULL:_node->_kval.ToPointer());
    node = *((kdu_node *)(&node_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_synthesis(node,allocator,use_shorts);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_thread_env ^_env, IntPtr _env_queue)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_thread_queue *env_queue = (kdu_thread_queue *) _env_queue.ToPointer();
    _natively_owned = false;
    _kref = new kdu_synthesis(resolution,allocator,use_shorts,normalization,env,env_queue);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization, Ckdu_thread_env ^_env)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    _natively_owned = false;
    _kref = new kdu_synthesis(resolution,allocator,use_shorts,normalization,env);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts, Single _normalization)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    float normalization = (float) _normalization;
    _natively_owned = false;
    _kref = new kdu_synthesis(resolution,allocator,use_shorts,normalization);
  }
  Ckdu_synthesis::Ckdu_synthesis(Ckdu_resolution ^_resolution, Ckdu_sample_allocator ^_allocator, Boolean _use_shorts)
      : Ckdu_pull_ifc((kdu_pull_ifc *) NULL)
  {
    kdu_resolution resolution;
    void *resolution_S = ((_resolution==nullptr)?NULL:_resolution->_kval.ToPointer());
    resolution = *((kdu_resolution *)(&resolution_S));
    kdu_sample_allocator *allocator = ((_allocator==nullptr)?NULL:(_allocator->_get_kref()));
    bool use_shorts = (bool) _use_shorts;
    _natively_owned = false;
    _kref = new kdu_synthesis(resolution,allocator,use_shorts);
  }
  void Ckdu_synthesis::Do_dispose(bool in_dispose)
  {
    kdu_synthesis *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_thread_entity
  Ckdu_thread_entity::Ckdu_thread_entity()
  {
    _natively_owned = false;
    _kref = new kdu_thread_entity();
  }
  void Ckdu_thread_entity::pre_destroy()
  {
    _get_kref()->pre_destroy();
  }
  Ckdu_thread_entity ^Ckdu_thread_entity::new_instance()
  {
    kdu_thread_entity *Result;
    Result = _get_kref()->new_instance();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_thread_entity(Result);
  }
  Boolean Ckdu_thread_entity::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Boolean Ckdu_thread_entity::is_group_owner()
  {
    bool Result;
    Result = _get_kref()->is_group_owner();
    return Result;
  }
  Ckdu_thread_entity ^Ckdu_thread_entity::get_current_thread_entity()
  {
    kdu_thread_entity *Result;
    Result = _get_kref()->get_current_thread_entity();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_thread_entity(Result);
  }
  Int32 Ckdu_thread_entity::get_num_locks()
  {
    int Result;
    Result = _get_kref()->get_num_locks();
    return Result;
  }
  void Ckdu_thread_entity::create(Int64 _cpu_affinity)
  {
    kdu_long cpu_affinity = (kdu_long) _cpu_affinity;
    _get_kref()->create(cpu_affinity);
  }
  void Ckdu_thread_entity::create()
  {
    _get_kref()->create();
  }
  Boolean Ckdu_thread_entity::destroy()
  {
    bool Result;
    Result = _get_kref()->destroy();
    return Result;
  }
  Int32 Ckdu_thread_entity::get_num_threads()
  {
    int Result;
    Result = _get_kref()->get_num_threads();
    return Result;
  }
  Boolean Ckdu_thread_entity::add_thread(Int32 _thread_concurrency)
  {
    int thread_concurrency = (int) _thread_concurrency;
    bool Result;
    Result = _get_kref()->add_thread(thread_concurrency);
    return Result;
  }
  Boolean Ckdu_thread_entity::add_thread()
  {
    bool Result;
    Result = _get_kref()->add_thread();
    return Result;
  }
  IntPtr Ckdu_thread_entity::add_queue(Ckdu_worker ^_worker, IntPtr _super_queue, String ^ _name, Int64 _queue_bank_idx)
  {
    kdu_worker *worker = ((_worker==nullptr)?NULL:(_worker->_get_kref()));
    kdu_thread_queue *super_queue = (kdu_thread_queue *) _super_queue.ToPointer();
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    kdu_long queue_bank_idx = (kdu_long) _queue_bank_idx;
    kdu_thread_queue *Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->add_queue(worker,super_queue,name,queue_bank_idx);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
    return IntPtr((void *) Result);
  }
  IntPtr Ckdu_thread_entity::add_queue(Ckdu_worker ^_worker, IntPtr _super_queue, String ^ _name)
  {
    kdu_worker *worker = ((_worker==nullptr)?NULL:(_worker->_get_kref()));
    kdu_thread_queue *super_queue = (kdu_thread_queue *) _super_queue.ToPointer();
    char * name = NULL;
    if (_name != nullptr)
      {
        name = new char[(_name->Length+1)*2];
        cli::pin_ptr<const wchar_t> name_W = PtrToStringChars(_name);
        wcstombs(name,name_W,(_name->Length+1)*2);
      }
    kdu_thread_queue *Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->add_queue(worker,super_queue,name);
    } catch (...) {
    if (name != NULL)
      delete[] name;
    throw;
    }
    if (name != NULL)
      delete[] name;
    return IntPtr((void *) Result);
  }
  IntPtr Ckdu_thread_entity::add_queue(Ckdu_worker ^_worker, IntPtr _super_queue)
  {
    kdu_worker *worker = ((_worker==nullptr)?NULL:(_worker->_get_kref()));
    kdu_thread_queue *super_queue = (kdu_thread_queue *) _super_queue.ToPointer();
    kdu_thread_queue *Result;
    Result = _get_kref()->add_queue(worker,super_queue);
    return IntPtr((void *) Result);
  }
  void Ckdu_thread_entity::add_jobs(IntPtr _queue, Int32 _num_jobs, Boolean _finalize_queue, Int64 _secondary_seq)
  {
    kdu_thread_queue *queue = (kdu_thread_queue *) _queue.ToPointer();
    int num_jobs = (int) _num_jobs;
    bool finalize_queue = (bool) _finalize_queue;
    kdu_uint32 secondary_seq = (kdu_uint32) _secondary_seq;
    _get_kref()->add_jobs(queue,num_jobs,finalize_queue,secondary_seq);
  }
  void Ckdu_thread_entity::add_jobs(IntPtr _queue, Int32 _num_jobs, Boolean _finalize_queue)
  {
    kdu_thread_queue *queue = (kdu_thread_queue *) _queue.ToPointer();
    int num_jobs = (int) _num_jobs;
    bool finalize_queue = (bool) _finalize_queue;
    _get_kref()->add_jobs(queue,num_jobs,finalize_queue);
  }
  Boolean Ckdu_thread_entity::synchronize(IntPtr _root_queue, Boolean _finalize_descendants_when_synchronized, Boolean _finalize_root_when_synchronized)
  {
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _root_queue.ToPointer();
    bool finalize_descendants_when_synchronized = (bool) _finalize_descendants_when_synchronized;
    bool finalize_root_when_synchronized = (bool) _finalize_root_when_synchronized;
    bool Result;
    Result = _get_kref()->synchronize(root_queue,finalize_descendants_when_synchronized,finalize_root_when_synchronized);
    return Result;
  }
  Boolean Ckdu_thread_entity::synchronize(IntPtr _root_queue, Boolean _finalize_descendants_when_synchronized)
  {
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _root_queue.ToPointer();
    bool finalize_descendants_when_synchronized = (bool) _finalize_descendants_when_synchronized;
    bool Result;
    Result = _get_kref()->synchronize(root_queue,finalize_descendants_when_synchronized);
    return Result;
  }
  Boolean Ckdu_thread_entity::synchronize(IntPtr _root_queue)
  {
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _root_queue.ToPointer();
    bool Result;
    Result = _get_kref()->synchronize(root_queue);
    return Result;
  }
  Boolean Ckdu_thread_entity::terminate(IntPtr _root_queue, Boolean _leave_root, cli::array<Int32> ^_exc_code)
  {
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _root_queue.ToPointer();
    bool leave_root = (bool) _leave_root;
    cli::pin_ptr<Int32> exc_code = ((_exc_code==nullptr)?nullptr:(&_exc_code[0]));
    bool Result;
    Result = _get_kref()->terminate(root_queue,leave_root,exc_code);
    return Result;
  }
  Boolean Ckdu_thread_entity::terminate(IntPtr _root_queue, Boolean _leave_root)
  {
    kdu_thread_queue *root_queue = (kdu_thread_queue *) _root_queue.ToPointer();
    bool leave_root = (bool) _leave_root;
    bool Result;
    Result = _get_kref()->terminate(root_queue,leave_root);
    return Result;
  }
  void Ckdu_thread_entity::register_synchronized_job(Ckdu_worker ^_worker, IntPtr _queue, Boolean _run_deferred)
  {
    kdu_worker *worker = ((_worker==nullptr)?NULL:(_worker->_get_kref()));
    kdu_thread_queue *queue = (kdu_thread_queue *) _queue.ToPointer();
    bool run_deferred = (bool) _run_deferred;
    _get_kref()->register_synchronized_job(worker,queue,run_deferred);
  }
  Boolean Ckdu_thread_entity::process_jobs(IntPtr _wait_queue, Boolean _waiting_for_sync, Boolean _throw_group_failure)
  {
    kdu_thread_queue *wait_queue = (kdu_thread_queue *) _wait_queue.ToPointer();
    bool waiting_for_sync = (bool) _waiting_for_sync;
    bool throw_group_failure = (bool) _throw_group_failure;
    bool Result;
    Result = _get_kref()->process_jobs(wait_queue,waiting_for_sync,throw_group_failure);
    return Result;
  }
  Boolean Ckdu_thread_entity::process_jobs(IntPtr _wait_queue, Boolean _waiting_for_sync)
  {
    kdu_thread_queue *wait_queue = (kdu_thread_queue *) _wait_queue.ToPointer();
    bool waiting_for_sync = (bool) _waiting_for_sync;
    bool Result;
    Result = _get_kref()->process_jobs(wait_queue,waiting_for_sync);
    return Result;
  }
  Boolean Ckdu_thread_entity::process_jobs(IntPtr _wait_queue)
  {
    kdu_thread_queue *wait_queue = (kdu_thread_queue *) _wait_queue.ToPointer();
    bool Result;
    Result = _get_kref()->process_jobs(wait_queue);
    return Result;
  }
  void Ckdu_thread_entity::handle_exception(Int32 _exc_code)
  {
    int exc_code = (int) _exc_code;
    _get_kref()->handle_exception(exc_code);
  }
  void Ckdu_thread_entity::acquire_lock(Int32 _lock_id, Boolean _allow_exceptions)
  {
    int lock_id = (int) _lock_id;
    bool allow_exceptions = (bool) _allow_exceptions;
    _get_kref()->acquire_lock(lock_id,allow_exceptions);
  }
  void Ckdu_thread_entity::acquire_lock(Int32 _lock_id)
  {
    int lock_id = (int) _lock_id;
    _get_kref()->acquire_lock(lock_id);
  }
  Boolean Ckdu_thread_entity::try_lock(Int32 _lock_id, Boolean _allow_exceptions)
  {
    int lock_id = (int) _lock_id;
    bool allow_exceptions = (bool) _allow_exceptions;
    bool Result;
    Result = _get_kref()->try_lock(lock_id,allow_exceptions);
    return Result;
  }
  Boolean Ckdu_thread_entity::try_lock(Int32 _lock_id)
  {
    int lock_id = (int) _lock_id;
    bool Result;
    Result = _get_kref()->try_lock(lock_id);
    return Result;
  }
  void Ckdu_thread_entity::release_lock(Int32 _lock_id)
  {
    int lock_id = (int) _lock_id;
    _get_kref()->release_lock(lock_id);
  }
  void Ckdu_thread_entity::Do_dispose(bool in_dispose)
  {
    kdu_thread_entity *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_thread_env
  Ckdu_thread_env::Ckdu_thread_env()
      : Ckdu_thread_entity((kdu_thread_entity *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_thread_env();
  }
  Ckdu_thread_entity ^Ckdu_thread_env::new_instance()
  {
    kdu_thread_entity *Result;
    Result = _get_kref()->new_instance();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_thread_entity(Result);
  }
  Int32 Ckdu_thread_env::get_num_locks()
  {
    int Result;
    Result = _get_kref()->get_num_locks();
    return Result;
  }
  IntPtr Ckdu_thread_env::get_state()
  {
    kd_thread_env *Result;
    Result = _get_kref()->get_state();
    return IntPtr((void *) Result);
  }
  Ckdu_thread_env ^Ckdu_thread_env::get_current_thread_env()
  {
    kdu_thread_env *Result;
    Result = _get_kref()->get_current_thread_env();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_thread_env(Result);
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_thread_safe_message
  Ckdu_thread_safe_message::Ckdu_thread_safe_message()
      : Ckdu_message((kdu_message *) NULL)
  {
    _natively_owned = false;
    _kref = new kdu_thread_safe_message();
  }
  void Ckdu_thread_safe_message::flush(Boolean _end_of_message)
  {
    bool end_of_message = (bool) _end_of_message;
    _get_kref()->flush(end_of_message);
  }
  void Ckdu_thread_safe_message::flush()
  {
    Boolean _end_of_message = (Boolean)(false);
    flush(_end_of_message);
  }
  void Ckdu_thread_safe_message::start_message()
  {
    _get_kref()->start_message();
  }
  void Ckdu_thread_safe_message::Do_dispose(bool in_dispose)
  {
    kdu_thread_safe_message *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_tiffdir
  Ckdu_tiffdir::Ckdu_tiffdir()
  {
    _natively_owned = false;
    _kref = new kdu_tiffdir();
  }
  Boolean Ckdu_tiffdir::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  void Ckdu_tiffdir::init(Boolean _littlendian)
  {
    bool littlendian = (bool) _littlendian;
    _get_kref()->init(littlendian);
  }
  Boolean Ckdu_tiffdir::opendir(Ckdu_compressed_source ^_src)
  {
    kdu_compressed_source *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    bool Result;
    Result = _get_kref()->opendir(src);
    return Result;
  }
  Int32 Ckdu_tiffdir::write_header(Ckdu_compressed_target ^_tgt, Int64 _dir_offset)
  {
    kdu_compressed_target *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    int Result;
    Result = _get_kref()->write_header(tgt,dir_offset);
    return Result;
  }
  Boolean Ckdu_tiffdir::writedir(Ckdu_compressed_target ^_tgt, Int64 _dir_offset)
  {
    kdu_compressed_target *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    kdu_long dir_offset = (kdu_long) _dir_offset;
    bool Result;
    Result = _get_kref()->writedir(tgt,dir_offset);
    return Result;
  }
  Boolean Ckdu_tiffdir::is_littlendian()
  {
    bool Result;
    Result = _get_kref()->is_littlendian();
    return Result;
  }
  Boolean Ckdu_tiffdir::is_native_littlendian()
  {
    bool Result;
    Result = _get_kref()->is_native_littlendian();
    return Result;
  }
  void Ckdu_tiffdir::close()
  {
    _get_kref()->close();
  }
  Int64 Ckdu_tiffdir::get_dirlength()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_dirlength();
    return Result;
  }
  Int64 Ckdu_tiffdir::get_taglength(Int64 _tag_type)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 Result;
    Result = _get_kref()->get_taglength(tag_type);
    return Result;
  }
  Int32 Ckdu_tiffdir::get_fieldlength(Int64 _tag_type)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int Result;
    Result = _get_kref()->get_fieldlength(tag_type);
    return Result;
  }
  Boolean Ckdu_tiffdir::delete_tag(Int64 _tag_type)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    bool Result;
    Result = _get_kref()->delete_tag(tag_type);
    return Result;
  }
  Int64 Ckdu_tiffdir::open_tag(Int64 _tag_type)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 Result;
    Result = _get_kref()->open_tag(tag_type);
    return Result;
  }
  Int32 Ckdu_tiffdir::read_tag(Int64 _tag_type, Int32 _length, cli::array<Byte> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int Result;
    Result = _get_kref()->read_tag(tag_type,length,data);
    return Result;
  }
  Int32 Ckdu_tiffdir::read_tag(Int64 _tag_type, Int32 _length, cli::array<Int32> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint16 *data = NULL;
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        data = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          data[_n_] = (kdu_uint16) _data[_n_];
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->read_tag(tag_type,length,data);
    } catch (...) {
    if (data != NULL)
      delete[] data;
    throw;
    }
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _data[_n_] = (Int32) data[_n_];
      }
    if (data != NULL)
      delete[] data;
    return Result;
  }
  Int32 Ckdu_tiffdir::read_tag(Int64 _tag_type, Int32 _length, cli::array<Int64> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint32 *data = NULL;
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        data = new kdu_uint32[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          data[_n_] = (kdu_uint32) _data[_n_];
      }
    int Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->read_tag(tag_type,length,data);
    } catch (...) {
    if (data != NULL)
      delete[] data;
    throw;
    }
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _data[_n_] = (Int64) data[_n_];
      }
    if (data != NULL)
      delete[] data;
    return Result;
  }
  Int32 Ckdu_tiffdir::read_tag(Int64 _tag_type, Int32 _length, cli::array<Double> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    cli::pin_ptr<Double> data = ((_data==nullptr)?nullptr:(&_data[0]));
    int Result;
    Result = _get_kref()->read_tag(tag_type,length,data);
    return Result;
  }
  void Ckdu_tiffdir::create_tag(Int64 _tag_type)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    _get_kref()->create_tag(tag_type);
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int32 _length, cli::array<Byte> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    cli::pin_ptr<Byte> data = ((_data==nullptr)?nullptr:(&_data[0]));
    _get_kref()->write_tag(tag_type,length,data);
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int32 _length, cli::array<Int32> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint16 *data = NULL;
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        data = new kdu_uint16[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          data[_n_] = (kdu_uint16) _data[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->write_tag(tag_type,length,data);
    } catch (...) {
    if (data != NULL)
      delete[] data;
    throw;
    }
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _data[_n_] = (Int32) data[_n_];
      }
    if (data != NULL)
      delete[] data;
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int32 _length, cli::array<Int64> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    kdu_uint32 *data = NULL;
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        data = new kdu_uint32[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          data[_n_] = (kdu_uint32) _data[_n_];
      }
    try { // So we can clean up temporary arrays
    _get_kref()->write_tag(tag_type,length,data);
    } catch (...) {
    if (data != NULL)
      delete[] data;
    throw;
    }
    if (_data != nullptr)
      {
        int _len_ = _data->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _data[_n_] = (Int64) data[_n_];
      }
    if (data != NULL)
      delete[] data;
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int32 _length, cli::array<Double> ^_data)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    int length = (int) _length;
    cli::pin_ptr<Double> data = ((_data==nullptr)?nullptr:(&_data[0]));
    _get_kref()->write_tag(tag_type,length,data);
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int32 _val16)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint16 val16 = (kdu_uint16) _val16;
    _get_kref()->write_tag(tag_type,val16);
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Int64 _val32)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    kdu_uint32 val32 = (kdu_uint32) _val32;
    _get_kref()->write_tag(tag_type,val32);
  }
  void Ckdu_tiffdir::write_tag(Int64 _tag_type, Double _valdbl)
  {
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    double valdbl = (double) _valdbl;
    _get_kref()->write_tag(tag_type,valdbl);
  }
  void Ckdu_tiffdir::copy_tag(Ckdu_tiffdir ^_src, Int64 _tag_type)
  {
    kdu_tiffdir &src = *(_src->_get_kref());
    kdu_uint32 tag_type = (kdu_uint32) _tag_type;
    _get_kref()->copy_tag(src,tag_type);
  }
  void Ckdu_tiffdir::Do_dispose(bool in_dispose)
  {
    kdu_tiffdir *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_tile
  Boolean Ckdu_tile::exists()
  {
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_tile::close(Ckdu_thread_env ^_env)
  {
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    _kval_cast.close(env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_tile::close()
  {
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    _kval_cast.close();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Ckdu_tile::get_tnum()
  {
    int Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_tnum();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_coords ^Ckdu_tile::get_tile_idx()
  {
    kdu_coords Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_tile_idx();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Boolean Ckdu_tile::get_ycc()
  {
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_ycc();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_tile::set_components_of_interest(Int32 _num_components_of_interest, cli::array<Int32> ^_components_of_interest)
  {
    int num_components_of_interest = (int) _num_components_of_interest;
    cli::pin_ptr<Int32> components_of_interest = ((_components_of_interest==nullptr)?nullptr:(&_components_of_interest[0]));
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    _kval_cast.set_components_of_interest(num_components_of_interest,components_of_interest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_tile::set_components_of_interest(Int32 _num_components_of_interest)
  {
    int num_components_of_interest = (int) _num_components_of_interest;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    _kval_cast.set_components_of_interest(num_components_of_interest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Ckdu_tile::set_components_of_interest()
  {
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    _kval_cast.set_components_of_interest();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs, cli::array<Int32> ^_block_input_indices, cli::array<Int32> ^_block_output_indices, cli::array<Single> ^_irrev_block_offsets, cli::array<Int32> ^_rev_block_offsets, cli::array<Int32> ^_stage_input_indices)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    cli::pin_ptr<Int32> block_input_indices = ((_block_input_indices==nullptr)?nullptr:(&_block_input_indices[0]));
    cli::pin_ptr<Int32> block_output_indices = ((_block_output_indices==nullptr)?nullptr:(&_block_output_indices[0]));
    cli::pin_ptr<Single> irrev_block_offsets = ((_irrev_block_offsets==nullptr)?nullptr:(&_irrev_block_offsets[0]));
    cli::pin_ptr<Int32> rev_block_offsets = ((_rev_block_offsets==nullptr)?nullptr:(&_rev_block_offsets[0]));
    cli::pin_ptr<Int32> stage_input_indices = ((_stage_input_indices==nullptr)?nullptr:(&_stage_input_indices[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices,irrev_block_offsets,rev_block_offsets,stage_input_indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs, cli::array<Int32> ^_block_input_indices, cli::array<Int32> ^_block_output_indices, cli::array<Single> ^_irrev_block_offsets, cli::array<Int32> ^_rev_block_offsets)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    cli::pin_ptr<Int32> block_input_indices = ((_block_input_indices==nullptr)?nullptr:(&_block_input_indices[0]));
    cli::pin_ptr<Int32> block_output_indices = ((_block_output_indices==nullptr)?nullptr:(&_block_output_indices[0]));
    cli::pin_ptr<Single> irrev_block_offsets = ((_irrev_block_offsets==nullptr)?nullptr:(&_irrev_block_offsets[0]));
    cli::pin_ptr<Int32> rev_block_offsets = ((_rev_block_offsets==nullptr)?nullptr:(&_rev_block_offsets[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices,irrev_block_offsets,rev_block_offsets);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs, cli::array<Int32> ^_block_input_indices, cli::array<Int32> ^_block_output_indices, cli::array<Single> ^_irrev_block_offsets)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    cli::pin_ptr<Int32> block_input_indices = ((_block_input_indices==nullptr)?nullptr:(&_block_input_indices[0]));
    cli::pin_ptr<Int32> block_output_indices = ((_block_output_indices==nullptr)?nullptr:(&_block_output_indices[0]));
    cli::pin_ptr<Single> irrev_block_offsets = ((_irrev_block_offsets==nullptr)?nullptr:(&_irrev_block_offsets[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices,irrev_block_offsets);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs, cli::array<Int32> ^_block_input_indices, cli::array<Int32> ^_block_output_indices)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    cli::pin_ptr<Int32> block_input_indices = ((_block_input_indices==nullptr)?nullptr:(&_block_input_indices[0]));
    cli::pin_ptr<Int32> block_output_indices = ((_block_output_indices==nullptr)?nullptr:(&_block_output_indices[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices,block_output_indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs, cli::array<Int32> ^_block_input_indices)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    cli::pin_ptr<Int32> block_input_indices = ((_block_input_indices==nullptr)?nullptr:(&_block_input_indices[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs,block_input_indices);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_block_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Int32> _num_stage_inputs, cli::interior_ptr<Int32> _num_stage_outputs, cli::interior_ptr<Int32> _num_block_inputs, cli::interior_ptr<Int32> _num_block_outputs)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    int num_stage_inputs = (int) *_num_stage_inputs;
    int num_stage_outputs = (int) *_num_stage_outputs;
    int num_block_inputs = (int) *_num_block_inputs;
    int num_block_outputs = (int) *_num_block_outputs;
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_block_info(stage_idx,block_idx,num_stage_inputs,num_stage_outputs,num_block_inputs,num_block_outputs);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_num_stage_inputs = num_stage_inputs;
    *_num_stage_outputs = num_stage_outputs;
    *_num_block_inputs = num_block_inputs;
    *_num_block_outputs = num_block_outputs;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_matrix_info(Int32 _stage_idx, Int32 _block_idx, cli::array<Single> ^_coefficients)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    cli::pin_ptr<Single> coefficients = ((_coefficients==nullptr)?nullptr:(&_coefficients[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_matrix_info(stage_idx,block_idx,coefficients);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::get_mct_matrix_info(Int32 _stage_idx, Int32 _block_idx)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_matrix_info(stage_idx,block_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::get_mct_rxform_info(Int32 _stage_idx, Int32 _block_idx, cli::array<Int32> ^_coefficients, cli::array<Int32> ^_active_outputs)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    cli::pin_ptr<Int32> coefficients = ((_coefficients==nullptr)?nullptr:(&_coefficients[0]));
    cli::pin_ptr<Int32> active_outputs = ((_active_outputs==nullptr)?nullptr:(&_active_outputs[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_rxform_info(stage_idx,block_idx,coefficients,active_outputs);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::get_mct_rxform_info(Int32 _stage_idx, Int32 _block_idx, cli::array<Int32> ^_coefficients)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    cli::pin_ptr<Int32> coefficients = ((_coefficients==nullptr)?nullptr:(&_coefficients[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_rxform_info(stage_idx,block_idx,coefficients);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::get_mct_rxform_info(Int32 _stage_idx, Int32 _block_idx)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_rxform_info(stage_idx,block_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible, cli::array<Single> ^_irrev_coefficients, cli::array<Single> ^_irrev_offsets, cli::array<Int32> ^_rev_coefficients, cli::array<Int32> ^_rev_offsets, cli::array<Int32> ^_active_outputs)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    cli::pin_ptr<Single> irrev_coefficients = ((_irrev_coefficients==nullptr)?nullptr:(&_irrev_coefficients[0]));
    cli::pin_ptr<Single> irrev_offsets = ((_irrev_offsets==nullptr)?nullptr:(&_irrev_offsets[0]));
    cli::pin_ptr<Int32> rev_coefficients = ((_rev_coefficients==nullptr)?nullptr:(&_rev_coefficients[0]));
    cli::pin_ptr<Int32> rev_offsets = ((_rev_offsets==nullptr)?nullptr:(&_rev_offsets[0]));
    cli::pin_ptr<Int32> active_outputs = ((_active_outputs==nullptr)?nullptr:(&_active_outputs[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets,rev_coefficients,rev_offsets,active_outputs);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible, cli::array<Single> ^_irrev_coefficients, cli::array<Single> ^_irrev_offsets, cli::array<Int32> ^_rev_coefficients, cli::array<Int32> ^_rev_offsets)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    cli::pin_ptr<Single> irrev_coefficients = ((_irrev_coefficients==nullptr)?nullptr:(&_irrev_coefficients[0]));
    cli::pin_ptr<Single> irrev_offsets = ((_irrev_offsets==nullptr)?nullptr:(&_irrev_offsets[0]));
    cli::pin_ptr<Int32> rev_coefficients = ((_rev_coefficients==nullptr)?nullptr:(&_rev_coefficients[0]));
    cli::pin_ptr<Int32> rev_offsets = ((_rev_offsets==nullptr)?nullptr:(&_rev_offsets[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets,rev_coefficients,rev_offsets);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible, cli::array<Single> ^_irrev_coefficients, cli::array<Single> ^_irrev_offsets, cli::array<Int32> ^_rev_coefficients)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    cli::pin_ptr<Single> irrev_coefficients = ((_irrev_coefficients==nullptr)?nullptr:(&_irrev_coefficients[0]));
    cli::pin_ptr<Single> irrev_offsets = ((_irrev_offsets==nullptr)?nullptr:(&_irrev_offsets[0]));
    cli::pin_ptr<Int32> rev_coefficients = ((_rev_coefficients==nullptr)?nullptr:(&_rev_coefficients[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets,rev_coefficients);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible, cli::array<Single> ^_irrev_coefficients, cli::array<Single> ^_irrev_offsets)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    cli::pin_ptr<Single> irrev_coefficients = ((_irrev_coefficients==nullptr)?nullptr:(&_irrev_coefficients[0]));
    cli::pin_ptr<Single> irrev_offsets = ((_irrev_offsets==nullptr)?nullptr:(&_irrev_offsets[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients,irrev_offsets);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible, cli::array<Single> ^_irrev_coefficients)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    cli::pin_ptr<Single> irrev_coefficients = ((_irrev_coefficients==nullptr)?nullptr:(&_irrev_coefficients[0]));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible,irrev_coefficients);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Boolean Ckdu_tile::get_mct_dependency_info(Int32 _stage_idx, Int32 _block_idx, cli::interior_ptr<Boolean> _is_reversible)
  {
    int stage_idx = (int) _stage_idx;
    int block_idx = (int) _block_idx;
    bool is_reversible = (bool) *_is_reversible;
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_mct_dependency_info(stage_idx,block_idx,is_reversible);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    *_is_reversible = is_reversible;
    return Result;
  }
  Int32 Ckdu_tile::get_num_components()
  {
    int Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_num_components();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_tile::get_num_layers()
  {
    int Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_num_layers();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile::parse_all_relevant_packets(Boolean _start_from_scratch_if_possible, Ckdu_thread_env ^_env)
  {
    bool start_from_scratch_if_possible = (bool) _start_from_scratch_if_possible;
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    bool Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.parse_all_relevant_packets(start_from_scratch_if_possible,env);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int64 Ckdu_tile::get_parsed_packet_stats(Int32 _component_idx, Int32 _discard_levels, Int32 _num_layers, cli::array<Int64> ^_layer_bytes, cli::array<Int64> ^_layer_packets)
  {
    int component_idx = (int) _component_idx;
    int discard_levels = (int) _discard_levels;
    int num_layers = (int) _num_layers;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    kdu_long *layer_packets = NULL;
    if (_layer_packets != nullptr)
      {
        int _len_ = _layer_packets->Length;
        layer_packets = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_packets[_n_] = (kdu_long) _layer_packets[_n_];
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_parsed_packet_stats(component_idx,discard_levels,num_layers,layer_bytes,layer_packets);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_packets != NULL)
      delete[] layer_packets;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (_layer_packets != nullptr)
      {
        int _len_ = _layer_packets->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_packets[_n_] = (Int64) layer_packets[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    if (layer_packets != NULL)
      delete[] layer_packets;
    return Result;
  }
  Int64 Ckdu_tile::get_parsed_packet_stats(Int32 _component_idx, Int32 _discard_levels, Int32 _num_layers, cli::array<Int64> ^_layer_bytes)
  {
    int component_idx = (int) _component_idx;
    int discard_levels = (int) _discard_levels;
    int num_layers = (int) _num_layers;
    kdu_long *layer_bytes = NULL;
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        layer_bytes = new kdu_long[_len_];
        for (int _n_=0; _n_ < _len_; _n_++)
          layer_bytes[_n_] = (kdu_long) _layer_bytes[_n_];
      }
    kdu_long Result;
    try { // So we can clean up temporary arrays
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.get_parsed_packet_stats(component_idx,discard_levels,num_layers,layer_bytes);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    } catch (...) {
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    throw;
    }
    if (_layer_bytes != nullptr)
      {
        int _len_ = _layer_bytes->Length;
        for (int _n_=0; _n_ < _len_; _n_++)
          _layer_bytes[_n_] = (Int64) layer_bytes[_n_];
      }
    if (layer_bytes != NULL)
      delete[] layer_bytes;
    return Result;
  }
  Ckdu_tile_comp ^Ckdu_tile::access_component(Int32 _component_idx)
  {
    int component_idx = (int) _component_idx;
    kdu_tile_comp Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.access_component(component_idx);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_tile_comp ^_Result = gcnew Ckdu_tile_comp;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Single Ckdu_tile::find_component_gain_info(Int32 _comp_idx, Boolean _restrict_to_interest)
  {
    int comp_idx = (int) _comp_idx;
    bool restrict_to_interest = (bool) _restrict_to_interest;
    float Result;
    kdu_tile _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile *)(&_kval_cast_S));
    Result = _kval_cast.find_component_gain_info(comp_idx,restrict_to_interest);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_tile_comp
  Boolean Ckdu_tile_comp::exists()
  {
    bool Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile_comp::get_reversible()
  {
    bool Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.get_reversible();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Ckdu_tile_comp::get_subsampling(Ckdu_coords ^_factors)
  {
    kdu_coords &factors = *(_factors->_get_kref());
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    _kval_cast.get_subsampling(factors);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Int32 Ckdu_tile_comp::get_bit_depth(Boolean _internal)
  {
    bool internal = (bool) _internal;
    int Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth(internal);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_tile_comp::get_bit_depth()
  {
    int Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.get_bit_depth();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Boolean Ckdu_tile_comp::get_signed()
  {
    bool Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.get_signed();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Int32 Ckdu_tile_comp::get_num_resolutions()
  {
    int Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.get_num_resolutions();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  Ckdu_resolution ^Ckdu_tile_comp::access_resolution(Int32 _res_level)
  {
    int res_level = (int) _res_level;
    kdu_resolution Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution(res_level);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_resolution ^_Result = gcnew Ckdu_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Ckdu_resolution ^Ckdu_tile_comp::access_resolution()
  {
    kdu_resolution Result;
    kdu_tile_comp _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((kdu_tile_comp *)(&_kval_cast_S));
    Result = _kval_cast.access_resolution();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    Ckdu_resolution ^_Result = gcnew Ckdu_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_window
  Ckdu_window::Ckdu_window()
  {
    _natively_owned = false;
    _kref = new kdu_window();
  }
  void Ckdu_window::init()
  {
    _get_kref()->init();
  }
  void Ckdu_window::copy_from(Ckdu_window ^_src, Boolean _copy_expansions)
  {
    kdu_window &src = *(_src->_get_kref());
    bool copy_expansions = (bool) _copy_expansions;
    _get_kref()->copy_from(src,copy_expansions);
  }
  void Ckdu_window::copy_from(Ckdu_window ^_src)
  {
    kdu_window &src = *(_src->_get_kref());
    _get_kref()->copy_from(src);
  }
  Boolean Ckdu_window::equals(Ckdu_window ^_rhs)
  {
    kdu_window &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->equals(rhs);
    return Result;
  }
  Boolean Ckdu_window::contains(Ckdu_window ^_rhs)
  {
    kdu_window &rhs = *(_rhs->_get_kref());
    bool Result;
    Result = _get_kref()->contains(rhs);
    return Result;
  }
  Ckdu_coords ^Ckdu_window::__property_get_resolution()
  {
    kdu_coords Result;
    Result = _get_kref()->get_resolution();
    Ckdu_coords ^_Result = gcnew Ckdu_coords;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  void Ckdu_window::__property_set_resolution(Ckdu_coords ^_resolution)
  {
    kdu_coords resolution = *(_resolution->_get_kref());
    _get_kref()->set_resolution(resolution);
  }
  Int32 Ckdu_window::__property_get_round_direction()
  {
    int Result;
    Result = _get_kref()->get_round_direction();
    return Result;
  }
  void Ckdu_window::__property_set_round_direction(Int32 _direction)
  {
    int direction = (int) _direction;
    _get_kref()->set_round_direction(direction);
  }
  Ckdu_dims ^Ckdu_window::__property_get_region()
  {
    kdu_dims Result;
    Result = _get_kref()->get_region();
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  void Ckdu_window::__property_set_region(Ckdu_dims ^_region)
  {
    kdu_dims region = *(_region->_get_kref());
    _get_kref()->set_region(region);
  }
  Ckdu_range_set ^Ckdu_window::access_components()
  {
    kdu_range_set *Result;
    Result = _get_kref()->access_components();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_range_set(Result);
  }
  Ckdu_range_set ^Ckdu_window::access_codestreams()
  {
    kdu_range_set *Result;
    Result = _get_kref()->access_codestreams();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_range_set(Result);
  }
  Ckdu_range_set ^Ckdu_window::access_contexts()
  {
    kdu_range_set *Result;
    Result = _get_kref()->access_contexts();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_range_set(Result);
  }
  Ckdu_range_set ^Ckdu_window::create_context_expansion(Int32 _which)
  {
    int which = (int) _which;
    kdu_range_set *Result;
    Result = _get_kref()->create_context_expansion(which);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_range_set(Result);
  }
  String ^ Ckdu_window::parse_context(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->parse_context(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return gcnew String((char *) Result);
  }
  Int32 Ckdu_window::__property_get_max_layers()
  {
    int Result;
    Result = _get_kref()->get_max_layers();
    return Result;
  }
  void Ckdu_window::__property_set_max_layers(Int32 _val)
  {
    int val = (int) _val;
    _get_kref()->set_max_layers(val);
  }
  Boolean Ckdu_window::__property_get_metadata_only()
  {
    bool Result;
    Result = _get_kref()->get_metadata_only();
    return Result;
  }
  void Ckdu_window::__property_set_metadata_only(Boolean _val)
  {
    bool val = (bool) _val;
    _get_kref()->set_metadata_only(val);
  }
  Ckdu_metareq ^Ckdu_window::get_metareq(Int32 _index)
  {
    int index = (int) _index;
    kdu_metareq *Result;
    Result = _get_kref()->get_metareq(index);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Ckdu_metareq(Result);
  }
  void Ckdu_window::init_metareq()
  {
    _get_kref()->init_metareq();
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier, Boolean _priority, Int32 _byte_limit, Boolean _recurse, Int64 _root_bin_id, Int32 _max_depth)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (bool) _priority;
    int byte_limit = (int) _byte_limit;
    bool recurse = (bool) _recurse;
    kdu_long root_bin_id = (kdu_long) _root_bin_id;
    int max_depth = (int) _max_depth;
    _get_kref()->add_metareq(box_type,qualifier,priority,byte_limit,recurse,root_bin_id,max_depth);
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier, Boolean _priority, Int32 _byte_limit, Boolean _recurse, Int64 _root_bin_id)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (bool) _priority;
    int byte_limit = (int) _byte_limit;
    bool recurse = (bool) _recurse;
    kdu_long root_bin_id = (kdu_long) _root_bin_id;
    _get_kref()->add_metareq(box_type,qualifier,priority,byte_limit,recurse,root_bin_id);
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier, Boolean _priority, Int32 _byte_limit, Boolean _recurse)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (bool) _priority;
    int byte_limit = (int) _byte_limit;
    bool recurse = (bool) _recurse;
    _get_kref()->add_metareq(box_type,qualifier,priority,byte_limit,recurse);
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier, Boolean _priority, Int32 _byte_limit)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (bool) _priority;
    int byte_limit = (int) _byte_limit;
    _get_kref()->add_metareq(box_type,qualifier,priority,byte_limit);
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier, Boolean _priority)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    bool priority = (bool) _priority;
    _get_kref()->add_metareq(box_type,qualifier,priority);
  }
  void Ckdu_window::add_metareq(Int64 _box_type, Int32 _qualifier)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    int qualifier = (int) _qualifier;
    _get_kref()->add_metareq(box_type,qualifier);
  }
  void Ckdu_window::add_metareq(Int64 _box_type)
  {
    kdu_uint32 box_type = (kdu_uint32) _box_type;
    _get_kref()->add_metareq(box_type);
  }
  String ^ Ckdu_window::parse_metareq(String ^ _string)
  {
    char * string = NULL;
    if (_string != nullptr)
      {
        string = new char[(_string->Length+1)*2];
        cli::pin_ptr<const wchar_t> string_W = PtrToStringChars(_string);
        wcstombs(string,string_W,(_string->Length+1)*2);
      }
    const char * Result;
    try { // So we can clean up temporary arrays
    Result = _get_kref()->parse_metareq(string);
    } catch (...) {
    if (string != NULL)
      delete[] string;
    throw;
    }
    if (string != NULL)
      delete[] string;
    return gcnew String((char *) Result);
  }
  void Ckdu_window::Do_dispose(bool in_dispose)
  {
    kdu_window *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Ckdu_worker
  void Ckdu_worker::do_job(Ckdu_thread_entity ^_ent, Int32 _job_idx)
  {
    kdu_thread_entity *ent = ((_ent==nullptr)?NULL:(_ent->_get_kref()));
    int job_idx = (int) _job_idx;
    _get_kref()->do_job(ent,job_idx);
  }
  void Ckdu_worker::Do_dispose(bool in_dispose)
  {
    kdu_worker *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmcc_params
  Cmcc_params::Cmcc_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new mcc_params();
  }
  void Cmcc_params::Do_dispose(bool in_dispose)
  {
    mcc_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmco_params
  Cmco_params::Cmco_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new mco_params();
  }
  void Cmco_params::Do_dispose(bool in_dispose)
  {
    mco_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmct_params
  Cmct_params::Cmct_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new mct_params();
  }
  void Cmct_params::Do_dispose(bool in_dispose)
  {
    mct_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmj2_source
  Cmj2_source::Cmj2_source()
  {
    _natively_owned = false;
    _kref = new mj2_source();
  }
  Cmj2_source::Cmj2_source(IntPtr _state)
  {
    mj_movie *state = (mj_movie *) _state.ToPointer();
    _natively_owned = false;
    _kref = new mj2_source(state);
  }
  Boolean Cmj2_source::exists()
  {
    bool Result;
    Result = _get_kref()->exists();
    return Result;
  }
  Int32 Cmj2_source::open(Cjp2_family_src ^_src, Boolean _return_if_incompatible)
  {
    jp2_family_src *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    bool return_if_incompatible = (bool) _return_if_incompatible;
    int Result;
    Result = _get_kref()->open(src,return_if_incompatible);
    return Result;
  }
  Int32 Cmj2_source::open(Cjp2_family_src ^_src)
  {
    jp2_family_src *src = ((_src==nullptr)?NULL:(_src->_get_kref()));
    int Result;
    Result = _get_kref()->open(src);
    return Result;
  }
  void Cmj2_source::close()
  {
    _get_kref()->close();
  }
  Cjp2_family_src ^Cmj2_source::get_ultimate_src()
  {
    jp2_family_src *Result;
    Result = _get_kref()->get_ultimate_src();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_family_src(Result);
  }
  Ckdu_dims ^Cmj2_source::get_movie_dims()
  {
    kdu_dims Result;
    Result = _get_kref()->get_movie_dims();
    Ckdu_dims ^_Result = gcnew Ckdu_dims;
    *(_Result->_get_kref()) = Result;
    return _Result;
  }
  Int64 Cmj2_source::get_next_track(Int64 _prev_track_idx)
  {
    kdu_uint32 prev_track_idx = (kdu_uint32) _prev_track_idx;
    kdu_uint32 Result;
    Result = _get_kref()->get_next_track(prev_track_idx);
    return Result;
  }
  Int32 Cmj2_source::get_track_type(Int64 _track_idx)
  {
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    int Result;
    Result = _get_kref()->get_track_type(track_idx);
    return Result;
  }
  Cmj2_video_source ^Cmj2_source::access_video_track(Int64 _track_idx)
  {
    kdu_uint32 track_idx = (kdu_uint32) _track_idx;
    mj2_video_source *Result;
    Result = _get_kref()->access_video_track(track_idx);
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cmj2_video_source(Result);
  }
  Boolean Cmj2_source::find_stream(Int32 _stream_idx, cli::interior_ptr<Int64> _track_idx, cli::interior_ptr<Int32> _frame_idx, cli::interior_ptr<Int32> _field_idx)
  {
    int stream_idx = (int) _stream_idx;
    kdu_uint32 track_idx = (kdu_uint32) *_track_idx;
    int frame_idx = (int) *_frame_idx;
    int field_idx = (int) *_field_idx;
    bool Result;
    Result = _get_kref()->find_stream(stream_idx,track_idx,frame_idx,field_idx);
    *_track_idx = track_idx;
    *_frame_idx = frame_idx;
    *_field_idx = field_idx;
    return Result;
  }
  Boolean Cmj2_source::count_codestreams(cli::interior_ptr<Int32> _count)
  {
    int count = (int) *_count;
    bool Result;
    Result = _get_kref()->count_codestreams(count);
    *_count = count;
    return Result;
  }
  void Cmj2_source::Do_dispose(bool in_dispose)
  {
    mj2_source *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmj2_target
  Boolean Cmj2_target::exists()
  {
    bool Result;
    mj2_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((mj2_target *)(&_kval_cast_S));
    Result = _kval_cast.exists();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    return Result;
  }
  void Cmj2_target::open(Cjp2_family_tgt ^_tgt)
  {
    jp2_family_tgt *tgt = ((_tgt==nullptr)?NULL:(_tgt->_get_kref()));
    mj2_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((mj2_target *)(&_kval_cast_S));
    _kval_cast.open(tgt);
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  void Cmj2_target::close()
  {
    mj2_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((mj2_target *)(&_kval_cast_S));
    _kval_cast.close();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
  }
  Cmj2_video_target ^Cmj2_target::add_video_track()
  {
    mj2_video_target *Result;
    mj2_target _kval_cast;
    void *_kval_cast_S = this->_kval.ToPointer();
    _kval_cast = *((mj2_target *)(&_kval_cast_S));
    Result = _kval_cast.add_video_track();
    this->_kval = IntPtr(*((void **)(&_kval_cast)));
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cmj2_video_target(Result);
  }
  //---------------------------------------------------
  // Managed Class: Cmj2_video_source
  Int64 Cmj2_video_source::get_track_idx()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_track_idx();
    return Result;
  }
  Int16 Cmj2_video_source::get_compositing_order()
  {
    kdu_int16 Result;
    Result = _get_kref()->get_compositing_order();
    return Result;
  }
  Int16 Cmj2_video_source::get_graphics_mode(cli::interior_ptr<Int16> _op_red, cli::interior_ptr<Int16> _op_green, cli::interior_ptr<Int16> _op_blue)
  {
    kdu_int16 op_red = (kdu_int16) *_op_red;
    kdu_int16 op_green = (kdu_int16) *_op_green;
    kdu_int16 op_blue = (kdu_int16) *_op_blue;
    kdu_int16 Result;
    Result = _get_kref()->get_graphics_mode(op_red,op_green,op_blue);
    *_op_red = op_red;
    *_op_green = op_green;
    *_op_blue = op_blue;
    return Result;
  }
  Int16 Cmj2_video_source::get_graphics_mode()
  {
    kdu_int16 Result;
    Result = _get_kref()->get_graphics_mode();
    return Result;
  }
  void Cmj2_video_source::get_geometry(cli::interior_ptr<Double> _presentation_width, cli::interior_ptr<Double> _presentation_height, cli::array<Double> ^_matrix, Boolean _for_movie)
  {
    double presentation_width = (double) *_presentation_width;
    double presentation_height = (double) *_presentation_height;
    cli::pin_ptr<Double> matrix = ((_matrix==nullptr)?nullptr:(&_matrix[0]));
    bool for_movie = (bool) _for_movie;
    _get_kref()->get_geometry(presentation_width,presentation_height,matrix,for_movie);
    *_presentation_width = presentation_width;
    *_presentation_height = presentation_height;
  }
  void Cmj2_video_source::get_geometry(cli::interior_ptr<Double> _presentation_width, cli::interior_ptr<Double> _presentation_height, cli::array<Double> ^_matrix)
  {
    double presentation_width = (double) *_presentation_width;
    double presentation_height = (double) *_presentation_height;
    cli::pin_ptr<Double> matrix = ((_matrix==nullptr)?nullptr:(&_matrix[0]));
    _get_kref()->get_geometry(presentation_width,presentation_height,matrix);
    *_presentation_width = presentation_width;
    *_presentation_height = presentation_height;
  }
  void Cmj2_video_source::get_cardinal_geometry(Ckdu_dims ^_pre_dims, cli::interior_ptr<Boolean> _transpose, cli::interior_ptr<Boolean> _vflip, cli::interior_ptr<Boolean> _hflip, Boolean _for_movie)
  {
    kdu_dims &pre_dims = *(_pre_dims->_get_kref());
    bool transpose = (bool) *_transpose;
    bool vflip = (bool) *_vflip;
    bool hflip = (bool) *_hflip;
    bool for_movie = (bool) _for_movie;
    _get_kref()->get_cardinal_geometry(pre_dims,transpose,vflip,hflip,for_movie);
    *_transpose = transpose;
    *_vflip = vflip;
    *_hflip = hflip;
  }
  void Cmj2_video_source::get_cardinal_geometry(Ckdu_dims ^_pre_dims, cli::interior_ptr<Boolean> _transpose, cli::interior_ptr<Boolean> _vflip, cli::interior_ptr<Boolean> _hflip)
  {
    kdu_dims &pre_dims = *(_pre_dims->_get_kref());
    bool transpose = (bool) *_transpose;
    bool vflip = (bool) *_vflip;
    bool hflip = (bool) *_hflip;
    _get_kref()->get_cardinal_geometry(pre_dims,transpose,vflip,hflip);
    *_transpose = transpose;
    *_vflip = vflip;
    *_hflip = hflip;
  }
  Cjp2_dimensions ^Cmj2_video_source::access_dimensions()
  {
    jp2_dimensions Result;
    Result = _get_kref()->access_dimensions();
    Cjp2_dimensions ^_Result = gcnew Cjp2_dimensions;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cmj2_video_source::access_resolution()
  {
    jp2_resolution Result;
    Result = _get_kref()->access_resolution();
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cmj2_video_source::access_palette()
  {
    jp2_palette Result;
    Result = _get_kref()->access_palette();
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_channels ^Cmj2_video_source::access_channels()
  {
    jp2_channels Result;
    Result = _get_kref()->access_channels();
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_colour ^Cmj2_video_source::access_colour()
  {
    jp2_colour Result;
    Result = _get_kref()->access_colour();
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Int32 Cmj2_video_source::get_stream_idx(Int32 _field_idx)
  {
    int field_idx = (int) _field_idx;
    int Result;
    Result = _get_kref()->get_stream_idx(field_idx);
    return Result;
  }
  Cjp2_input_box ^Cmj2_video_source::access_image_box()
  {
    jp2_input_box *Result;
    Result = _get_kref()->access_image_box();
    if (Result == NULL)
      return nullptr;
    else
      return gcnew Cjp2_input_box(Result);
  }
  Int32 Cmj2_video_source::open_stream(Int32 _field_idx, Cjp2_input_box ^_input_box, Ckdu_thread_env ^_env)
  {
    int field_idx = (int) _field_idx;
    jp2_input_box *input_box = ((_input_box==nullptr)?NULL:(_input_box->_get_kref()));
    kdu_thread_env *env = ((_env==nullptr)?NULL:(_env->_get_kref()));
    int Result;
    Result = _get_kref()->open_stream(field_idx,input_box,env);
    return Result;
  }
  Int32 Cmj2_video_source::open_stream(Int32 _field_idx, Cjp2_input_box ^_input_box)
  {
    Ckdu_thread_env ^_env = nullptr;
    return open_stream(_field_idx,_input_box,_env);
  }
  Boolean Cmj2_video_source::can_open_stream(Int32 _field_idx, Boolean _need_main_header)
  {
    int field_idx = (int) _field_idx;
    bool need_main_header = (bool) _need_main_header;
    bool Result;
    Result = _get_kref()->can_open_stream(field_idx,need_main_header);
    return Result;
  }
  Boolean Cmj2_video_source::can_open_stream(Int32 _field_idx)
  {
    int field_idx = (int) _field_idx;
    bool Result;
    Result = _get_kref()->can_open_stream(field_idx);
    return Result;
  }
  Int64 Cmj2_video_source::get_timescale()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_timescale();
    return Result;
  }
  Int32 Cmj2_video_source::get_field_order()
  {
    kdu_field_order Result;
    Result = _get_kref()->get_field_order();
    return Result;
  }
  void Cmj2_video_source::set_field_mode(Int32 _which)
  {
    int which = (int) _which;
    _get_kref()->set_field_mode(which);
  }
  Int32 Cmj2_video_source::get_num_frames()
  {
    int Result;
    Result = _get_kref()->get_num_frames();
    return Result;
  }
  Boolean Cmj2_video_source::seek_to_frame(Int32 _frame_idx)
  {
    int frame_idx = (int) _frame_idx;
    bool Result;
    Result = _get_kref()->seek_to_frame(frame_idx);
    return Result;
  }
  Int64 Cmj2_video_source::get_duration()
  {
    kdu_long Result;
    Result = _get_kref()->get_duration();
    return Result;
  }
  Int32 Cmj2_video_source::time_to_frame(Int64 _time_instant)
  {
    kdu_long time_instant = (kdu_long) _time_instant;
    int Result;
    Result = _get_kref()->time_to_frame(time_instant);
    return Result;
  }
  Int64 Cmj2_video_source::get_frame_instant()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_instant();
    return Result;
  }
  Int32 Cmj2_video_source::open_image()
  {
    int Result;
    Result = _get_kref()->open_image();
    return Result;
  }
  void Cmj2_video_source::close_image()
  {
    _get_kref()->close_image();
  }
  Int64 Cmj2_video_source::get_frame_period()
  {
    kdu_long Result;
    Result = _get_kref()->get_frame_period();
    return Result;
  }
  Int32 Cmj2_video_source::read(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    int Result;
    Result = _get_kref()->read(buf,num_bytes);
    return Result;
  }
  Int32 Cmj2_video_source::get_capabilities()
  {
    int Result;
    Result = _get_kref()->get_capabilities();
    return Result;
  }
  Boolean Cmj2_video_source::seek(Int64 _offset)
  {
    kdu_long offset = (kdu_long) _offset;
    bool Result;
    Result = _get_kref()->seek(offset);
    return Result;
  }
  Int64 Cmj2_video_source::get_pos()
  {
    kdu_long Result;
    Result = _get_kref()->get_pos();
    return Result;
  }
  void Cmj2_video_source::Do_dispose(bool in_dispose)
  {
    mj2_video_source *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cmj2_video_target
  Int64 Cmj2_video_target::get_track_idx()
  {
    kdu_uint32 Result;
    Result = _get_kref()->get_track_idx();
    return Result;
  }
  void Cmj2_video_target::set_compositing_order(Int16 _layer_idx)
  {
    kdu_int16 layer_idx = (kdu_int16) _layer_idx;
    _get_kref()->set_compositing_order(layer_idx);
  }
  void Cmj2_video_target::set_graphics_mode(Int16 _graphics_mode, Int16 _op_red, Int16 _op_green, Int16 _op_blue)
  {
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    kdu_int16 op_red = (kdu_int16) _op_red;
    kdu_int16 op_green = (kdu_int16) _op_green;
    kdu_int16 op_blue = (kdu_int16) _op_blue;
    _get_kref()->set_graphics_mode(graphics_mode,op_red,op_green,op_blue);
  }
  void Cmj2_video_target::set_graphics_mode(Int16 _graphics_mode, Int16 _op_red, Int16 _op_green)
  {
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    kdu_int16 op_red = (kdu_int16) _op_red;
    kdu_int16 op_green = (kdu_int16) _op_green;
    _get_kref()->set_graphics_mode(graphics_mode,op_red,op_green);
  }
  void Cmj2_video_target::set_graphics_mode(Int16 _graphics_mode, Int16 _op_red)
  {
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    kdu_int16 op_red = (kdu_int16) _op_red;
    _get_kref()->set_graphics_mode(graphics_mode,op_red);
  }
  void Cmj2_video_target::set_graphics_mode(Int16 _graphics_mode)
  {
    kdu_int16 graphics_mode = (kdu_int16) _graphics_mode;
    _get_kref()->set_graphics_mode(graphics_mode);
  }
  Cjp2_colour ^Cmj2_video_target::access_colour()
  {
    jp2_colour Result;
    Result = _get_kref()->access_colour();
    Cjp2_colour ^_Result = gcnew Cjp2_colour;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_palette ^Cmj2_video_target::access_palette()
  {
    jp2_palette Result;
    Result = _get_kref()->access_palette();
    Cjp2_palette ^_Result = gcnew Cjp2_palette;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_channels ^Cmj2_video_target::access_channels()
  {
    jp2_channels Result;
    Result = _get_kref()->access_channels();
    Cjp2_channels ^_Result = gcnew Cjp2_channels;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  Cjp2_resolution ^Cmj2_video_target::access_resolution()
  {
    jp2_resolution Result;
    Result = _get_kref()->access_resolution();
    Cjp2_resolution ^_Result = gcnew Cjp2_resolution;
    _Result->_kval = IntPtr(*((void **)(&Result)));
    return _Result;
  }
  void Cmj2_video_target::set_timescale(Int64 _ticks_per_second)
  {
    kdu_uint32 ticks_per_second = (kdu_uint32) _ticks_per_second;
    _get_kref()->set_timescale(ticks_per_second);
  }
  void Cmj2_video_target::set_field_order(Int32 _order)
  {
    kdu_field_order order = (kdu_field_order) _order;
    _get_kref()->set_field_order(order);
  }
  void Cmj2_video_target::set_max_frames_per_chunk(Int64 _max_frames)
  {
    kdu_uint32 max_frames = (kdu_uint32) _max_frames;
    _get_kref()->set_max_frames_per_chunk(max_frames);
  }
  void Cmj2_video_target::set_frame_period(Int64 _num_ticks)
  {
    kdu_long num_ticks = (kdu_long) _num_ticks;
    _get_kref()->set_frame_period(num_ticks);
  }
  void Cmj2_video_target::open_image()
  {
    _get_kref()->open_image();
  }
  void Cmj2_video_target::close_image(Ckdu_codestream ^_codestream)
  {
    kdu_codestream codestream;
    void *codestream_S = ((_codestream==nullptr)?NULL:_codestream->_kval.ToPointer());
    codestream = *((kdu_codestream *)(&codestream_S));
    _get_kref()->close_image(codestream);
  }
  Boolean Cmj2_video_target::write(cli::array<Byte> ^_buf, Int32 _num_bytes)
  {
    cli::pin_ptr<Byte> buf = ((_buf==nullptr)?nullptr:(&_buf[0]));
    int num_bytes = (int) _num_bytes;
    bool Result;
    Result = _get_kref()->write(buf,num_bytes);
    return Result;
  }
  void Cmj2_video_target::Do_dispose(bool in_dispose)
  {
    mj2_video_target *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Corg_params
  Corg_params::Corg_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new org_params();
  }
  void Corg_params::Do_dispose(bool in_dispose)
  {
    org_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cpoc_params
  Cpoc_params::Cpoc_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new poc_params();
  }
  void Cpoc_params::Do_dispose(bool in_dispose)
  {
    poc_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Cqcd_params
  Cqcd_params::Cqcd_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new qcd_params();
  }
  void Cqcd_params::Do_dispose(bool in_dispose)
  {
    qcd_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Crgn_params
  Crgn_params::Crgn_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new rgn_params();
  }
  void Crgn_params::Do_dispose(bool in_dispose)
  {
    rgn_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
  //---------------------------------------------------
  // Managed Class: Csiz_params
  Csiz_params::Csiz_params()
      : Ckdu_params((kdu_params *) NULL)
  {
    _natively_owned = false;
    _kref = new siz_params();
  }
  void Csiz_params::Do_dispose(bool in_dispose)
  {
    siz_params *_kref_tmp = _get_kref();
    _kref = NULL;
    if ((!_natively_owned) && (_kref_tmp != NULL))
      {
        delete _kref_tmp;
      }
  }
} // End of namespace "kdu_mni"
