; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	E:\study\JPEG2000\visually_lossless_JPEG2000\ModifiedKakadu\coresys\messaging\messaging.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	?kdu_customize_warnings@@YAXPAVkdu_message@@@Z	; kdu_customize_warnings
PUBLIC	?kdu_customize_errors@@YAXPAVkdu_message@@@Z	; kdu_customize_errors
PUBLIC	?kdu_customize_text@@YAXPBDI00@Z		; kdu_customize_text
PUBLIC	?kdu_customize_text@@YAXPBDIPBG1@Z		; kdu_customize_text
PUBLIC	??1kdu_message@@UAE@XZ				; kdu_message::~kdu_message
PUBLIC	?put_text@kdu_message@@UAEXPBD@Z		; kdu_message::put_text
PUBLIC	?put_text@kdu_message@@UAEXPBG@Z		; kdu_message::put_text
PUBLIC	?flush@kdu_message@@UAEX_N@Z			; kdu_message::flush
PUBLIC	?start_message@kdu_message@@UAEXXZ		; kdu_message::start_message
PUBLIC	??_Gkdu_message@@UAEPAXI@Z			; kdu_message::`scalar deleting destructor'
PUBLIC	?set_master_indent@kdu_message_formatter@@QAEXH@Z ; kdu_message_formatter::set_master_indent
PUBLIC	?put_text@kdu_message_formatter@@UAEXPBD@Z	; kdu_message_formatter::put_text
PUBLIC	?put_text@kdu_message_formatter@@UAEXPBG@Z	; kdu_message_formatter::put_text
PUBLIC	?flush@kdu_message_formatter@@UAEX_N@Z		; kdu_message_formatter::flush
PUBLIC	??0kdu_error@@QAE@XZ				; kdu_error::kdu_error
PUBLIC	??0kdu_error@@QAE@PBD@Z				; kdu_error::kdu_error
PUBLIC	??0kdu_error@@QAE@PBDI@Z			; kdu_error::kdu_error
PUBLIC	??1kdu_error@@UAE@XZ				; kdu_error::~kdu_error
PUBLIC	?put_text@kdu_error@@UAEXPBD@Z			; kdu_error::put_text
PUBLIC	?put_text@kdu_error@@UAEXPBG@Z			; kdu_error::put_text
PUBLIC	?flush@kdu_error@@UAEX_N@Z			; kdu_error::flush
PUBLIC	??_Ekdu_error@@UAEPAXI@Z			; kdu_error::`vector deleting destructor'
PUBLIC	??0kdu_warning@@QAE@XZ				; kdu_warning::kdu_warning
PUBLIC	??0kdu_warning@@QAE@PBD@Z			; kdu_warning::kdu_warning
PUBLIC	??0kdu_warning@@QAE@PBDI@Z			; kdu_warning::kdu_warning
PUBLIC	??1kdu_warning@@UAE@XZ				; kdu_warning::~kdu_warning
PUBLIC	?put_text@kdu_warning@@UAEXPBD@Z		; kdu_warning::put_text
PUBLIC	?put_text@kdu_warning@@UAEXPBG@Z		; kdu_warning::put_text
PUBLIC	?flush@kdu_warning@@UAEX_N@Z			; kdu_warning::flush
PUBLIC	??_Ekdu_warning@@UAEPAXI@Z			; kdu_warning::`vector deleting destructor'
PUBLIC	??1kd_process_terminator@@UAE@XZ		; kd_process_terminator::~kd_process_terminator
PUBLIC	?terminate@kd_process_terminator@@UAEXXZ	; kd_process_terminator::terminate
PUBLIC	??_Gkd_process_terminator@@UAEPAXI@Z		; kd_process_terminator::`scalar deleting destructor'
PUBLIC	?add@kd_text_register@@QAEXPBDI00@Z		; kd_text_register::add
PUBLIC	?add@kd_text_register@@QAEXPBDIPBG1@Z		; kd_text_register::add
PUBLIC	?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z ; kd_text_register::find
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7kdu_message@@6B@				; kdu_message::`vftable'
PUBLIC	??_C@_02NJNOFBBI@?$CFx?$AA@			; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_7kdu_error@@6B@				; kdu_error::`vftable'
PUBLIC	??_7kdu_warning@@6B@				; kdu_warning::`vftable'
PUBLIC	??_7kd_process_terminator@@6B@			; kd_process_terminator::`vftable'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BB@GJOFFOEI@Kakadu?5Warning?3?6?$AA@	; `string'
PUBLIC	??_C@_0P@FAIHICJN@Kakadu?5Error?3?6?$AA@	; `string'
PUBLIC	??_C@_0BH@JMFNMOOB@Untranslated?5error?5?9?9?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@OBDAEPBE@Consult?5vendor?5for?5more?5informat@ ; `string'
PUBLIC	??_C@_09EBKLGPOD@Details?3?6?$AA@		; `string'
PUBLIC	??_C@_0M@IAAMOIMH@?5?5context?$DN?$CC?$AA@	; `string'
PUBLIC	??_C@_06PGNFEDJF@?$CC?$DL?5id?$DN?$AA@		; `string'
PUBLIC	??_C@_02LNAEAIDO@?$DL?5?$AA@			; `string'
PUBLIC	??_R4kdu_message@@6B@				; kdu_message::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVkdu_message@@@8				; kdu_message `RTTI Type Descriptor'
PUBLIC	??_R3kdu_message@@8				; kdu_message::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2kdu_message@@8				; kdu_message::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@kdu_message@@8			; kdu_message::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4kdu_error@@6B@				; kdu_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVkdu_error@@@8				; kdu_error `RTTI Type Descriptor'
PUBLIC	??_R3kdu_error@@8				; kdu_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2kdu_error@@8				; kdu_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@kdu_error@@8			; kdu_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4kdu_warning@@6B@				; kdu_warning::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVkdu_warning@@@8				; kdu_warning `RTTI Type Descriptor'
PUBLIC	??_R3kdu_warning@@8				; kdu_warning::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2kdu_warning@@8				; kdu_warning::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@kdu_warning@@8			; kdu_warning::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4kd_process_terminator@@6B@			; kd_process_terminator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVkd_process_terminator@@@8		; kd_process_terminator `RTTI Type Descriptor'
PUBLIC	??_R3kd_process_terminator@@8			; kd_process_terminator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2kd_process_terminator@@8			; kd_process_terminator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@kd_process_terminator@@8		; kd_process_terminator::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__exit:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	??_Ekdu_message@@UAEPAXI@Z:PROC			; kdu_message::`vector deleting destructor'
EXTRN	??_Ekd_process_terminator@@UAEPAXI@Z:PROC	; kd_process_terminator::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?warn_handler@@3PAVkdu_message@@A DD 01H DUP (?)	; warn_handler
?err_handler@@3PAVkdu_message@@A DD 01H DUP (?)		; err_handler
_BSS	ENDS
CRT$XCU	SEGMENT
?text_register$initializer$@@3P6AXXZA DD FLAT:??__Etext_register@@YAXXZ ; text_register$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@kd_process_terminator@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@kd_process_terminator@@8 DD FLAT:??_R0?AVkd_process_terminator@@@8 ; kd_process_terminator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3kd_process_terminator@@8
rdata$r	ENDS
;	COMDAT ??_R2kd_process_terminator@@8
rdata$r	SEGMENT
??_R2kd_process_terminator@@8 DD FLAT:??_R1A@?0A@EA@kd_process_terminator@@8 ; kd_process_terminator::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3kd_process_terminator@@8
rdata$r	SEGMENT
??_R3kd_process_terminator@@8 DD 00H			; kd_process_terminator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2kd_process_terminator@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVkd_process_terminator@@@8
data$r	SEGMENT
??_R0?AVkd_process_terminator@@@8 DD FLAT:??_7type_info@@6B@ ; kd_process_terminator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVkd_process_terminator@@', 00H
data$r	ENDS
;	COMDAT ??_R4kd_process_terminator@@6B@
rdata$r	SEGMENT
??_R4kd_process_terminator@@6B@ DD 00H			; kd_process_terminator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVkd_process_terminator@@@8
	DD	FLAT:??_R3kd_process_terminator@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@kdu_warning@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@kdu_warning@@8 DD FLAT:??_R0?AVkdu_warning@@@8 ; kdu_warning::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3kdu_warning@@8
rdata$r	ENDS
;	COMDAT ??_R2kdu_warning@@8
rdata$r	SEGMENT
??_R2kdu_warning@@8 DD FLAT:??_R1A@?0A@EA@kdu_warning@@8 ; kdu_warning::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@kdu_message@@8
rdata$r	ENDS
;	COMDAT ??_R3kdu_warning@@8
rdata$r	SEGMENT
??_R3kdu_warning@@8 DD 00H				; kdu_warning::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2kdu_warning@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVkdu_warning@@@8
data$r	SEGMENT
??_R0?AVkdu_warning@@@8 DD FLAT:??_7type_info@@6B@	; kdu_warning `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVkdu_warning@@', 00H
data$r	ENDS
;	COMDAT ??_R4kdu_warning@@6B@
rdata$r	SEGMENT
??_R4kdu_warning@@6B@ DD 00H				; kdu_warning::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVkdu_warning@@@8
	DD	FLAT:??_R3kdu_warning@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@kdu_error@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@kdu_error@@8 DD FLAT:??_R0?AVkdu_error@@@8 ; kdu_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3kdu_error@@8
rdata$r	ENDS
;	COMDAT ??_R2kdu_error@@8
rdata$r	SEGMENT
??_R2kdu_error@@8 DD FLAT:??_R1A@?0A@EA@kdu_error@@8	; kdu_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@kdu_message@@8
rdata$r	ENDS
;	COMDAT ??_R3kdu_error@@8
rdata$r	SEGMENT
??_R3kdu_error@@8 DD 00H				; kdu_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2kdu_error@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVkdu_error@@@8
data$r	SEGMENT
??_R0?AVkdu_error@@@8 DD FLAT:??_7type_info@@6B@	; kdu_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVkdu_error@@', 00H
data$r	ENDS
;	COMDAT ??_R4kdu_error@@6B@
rdata$r	SEGMENT
??_R4kdu_error@@6B@ DD 00H				; kdu_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVkdu_error@@@8
	DD	FLAT:??_R3kdu_error@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@kdu_message@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@kdu_message@@8 DD FLAT:??_R0?AVkdu_message@@@8 ; kdu_message::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3kdu_message@@8
rdata$r	ENDS
;	COMDAT ??_R2kdu_message@@8
rdata$r	SEGMENT
??_R2kdu_message@@8 DD FLAT:??_R1A@?0A@EA@kdu_message@@8 ; kdu_message::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3kdu_message@@8
rdata$r	SEGMENT
??_R3kdu_message@@8 DD 00H				; kdu_message::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2kdu_message@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVkdu_message@@@8
data$r	SEGMENT
??_R0?AVkdu_message@@@8 DD FLAT:??_7type_info@@6B@	; kdu_message `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVkdu_message@@', 00H
data$r	ENDS
;	COMDAT ??_R4kdu_message@@6B@
rdata$r	SEGMENT
??_R4kdu_message@@6B@ DD 00H				; kdu_message::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVkdu_message@@@8
	DD	FLAT:??_R3kdu_message@@8
rdata$r	ENDS
;	COMDAT ??_C@_02LNAEAIDO@?$DL?5?$AA@
CONST	SEGMENT
??_C@_02LNAEAIDO@?$DL?5?$AA@ DB '; ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGNFEDJF@?$CC?$DL?5id?$DN?$AA@
CONST	SEGMENT
??_C@_06PGNFEDJF@?$CC?$DL?5id?$DN?$AA@ DB '"; id=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAAMOIMH@?5?5context?$DN?$CC?$AA@
CONST	SEGMENT
??_C@_0M@IAAMOIMH@?5?5context?$DN?$CC?$AA@ DB '  context="', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBKLGPOD@Details?3?6?$AA@
CONST	SEGMENT
??_C@_09EBKLGPOD@Details?3?6?$AA@ DB 'Details:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OBDAEPBE@Consult?5vendor?5for?5more?5informat@
CONST	SEGMENT
??_C@_0CF@OBDAEPBE@Consult?5vendor?5for?5more?5informat@ DB 'Consult vend'
	DB	'or for more information', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMFNMOOB@Untranslated?5error?5?9?9?6?$AA@
CONST	SEGMENT
??_C@_0BH@JMFNMOOB@Untranslated?5error?5?9?9?6?$AA@ DB 'Untranslated erro'
	DB	'r --', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FAIHICJN@Kakadu?5Error?3?6?$AA@
CONST	SEGMENT
??_C@_0P@FAIHICJN@Kakadu?5Error?3?6?$AA@ DB 'Kakadu Error:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GJOFFOEI@Kakadu?5Warning?3?6?$AA@
CONST	SEGMENT
??_C@_0BB@GJOFFOEI@Kakadu?5Warning?3?6?$AA@ DB 'Kakadu Warning:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?text_register@@3Vkd_text_register@@A DB 04H DUP (?)
	DD	040H					; text_register
	DD	00H
?process_terminator@@3Vkd_process_terminator@@A DD FLAT:??_7kd_process_terminator@@6B@ ; process_terminator
_DATA	ENDS
;	COMDAT ??_7kd_process_terminator@@6B@
CONST	SEGMENT
??_7kd_process_terminator@@6B@ DD FLAT:??_R4kd_process_terminator@@6B@ ; kd_process_terminator::`vftable'
	DD	FLAT:??_Ekd_process_terminator@@UAEPAXI@Z
	DD	FLAT:?terminate@kd_process_terminator@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7kdu_warning@@6B@
CONST	SEGMENT
??_7kdu_warning@@6B@ DD FLAT:??_R4kdu_warning@@6B@	; kdu_warning::`vftable'
	DD	FLAT:??_Ekdu_warning@@UAEPAXI@Z
	DD	FLAT:?put_text@kdu_warning@@UAEXPBG@Z
	DD	FLAT:?put_text@kdu_warning@@UAEXPBD@Z
	DD	FLAT:?flush@kdu_warning@@UAEX_N@Z
	DD	FLAT:?start_message@kdu_message@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7kdu_error@@6B@
CONST	SEGMENT
??_7kdu_error@@6B@ DD FLAT:??_R4kdu_error@@6B@		; kdu_error::`vftable'
	DD	FLAT:??_Ekdu_error@@UAEPAXI@Z
	DD	FLAT:?put_text@kdu_error@@UAEXPBG@Z
	DD	FLAT:?put_text@kdu_error@@UAEXPBD@Z
	DD	FLAT:?flush@kdu_error@@UAEX_N@Z
	DD	FLAT:?start_message@kdu_message@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJNOFBBI@?$CFx?$AA@
CONST	SEGMENT
??_C@_02NJNOFBBI@?$CFx?$AA@ DB '%x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7kdu_message@@6B@
CONST	SEGMENT
??_7kdu_message@@6B@ DD FLAT:??_R4kdu_message@@6B@	; kdu_message::`vftable'
	DD	FLAT:??_Ekdu_message@@UAEPAXI@Z
	DD	FLAT:?put_text@kdu_message@@UAEXPBG@Z
	DD	FLAT:?put_text@kdu_message@@UAEXPBD@Z
	DD	FLAT:?flush@kdu_message@@UAEX_N@Z
	DD	FLAT:?start_message@kdu_message@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Ekdu_warning@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1kdu_warning@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_warning@@QAE@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_warning@@QAE@PBDI@Z$0
__ehfuncinfo$??0kdu_warning@@QAE@PBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_warning@@QAE@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_warning@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_warning@@QAE@PBD@Z$0
__ehfuncinfo$??0kdu_warning@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_warning@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_warning@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_warning@@QAE@XZ$0
__ehfuncinfo$??0kdu_warning@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_warning@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_Ekdu_error@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1kdu_error@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_error@@QAE@PBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_error@@QAE@PBDI@Z$0
__ehfuncinfo$??0kdu_error@@QAE@PBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_error@@QAE@PBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_error@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_error@@QAE@PBD@Z$0
__ehfuncinfo$??0kdu_error@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_error@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0kdu_error@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0kdu_error@@QAE@XZ$0
__ehfuncinfo$??0kdu_error@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0kdu_error@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?process_terminator$initializer$@@3P6AXXZA DD FLAT:??__Eprocess_terminator@@YAXXZ ; process_terminator$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??__Fprocess_terminator@@YAXXZ
text$yd	SEGMENT
??__Fprocess_terminator@@YAXXZ PROC			; `dynamic atexit destructor for 'process_terminator'', COMDAT

; 65   :     virtual ~kd_process_terminator() { return; }

	mov	DWORD PTR ?process_terminator@@3Vkd_process_terminator@@A, OFFSET ??_7kd_process_terminator@@6B@
	ret	0
??__Fprocess_terminator@@YAXXZ ENDP			; `dynamic atexit destructor for 'process_terminator''
text$yd	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??__Eprocess_terminator@@YAXXZ
text$di	SEGMENT
??__Eprocess_terminator@@YAXXZ PROC			; `dynamic initializer for 'process_terminator'', COMDAT

; 144  : static kd_process_terminator process_terminator;

	push	OFFSET ??__Fprocess_terminator@@YAXXZ	; `dynamic atexit destructor for 'process_terminator''
	call	_atexit
	pop	ecx
	ret	0
??__Eprocess_terminator@@YAXXZ ENDP			; `dynamic initializer for 'process_terminator''
text$di	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??__Ftext_register@@YAXXZ
text$yd	SEGMENT
??__Ftext_register@@YAXXZ PROC				; `dynamic atexit destructor for 'text_register'', COMDAT

; 118  :         while ((tmp=storage) != NULL)

	mov	eax, DWORD PTR ?text_register@@3Vkd_text_register@@A
	mov	ecx, eax
	test	eax, eax
	je	SHORT $LN5@dynamic
	npad	5
$LL4@dynamic:

; 119  :           { storage=tmp->next; delete tmp; }

	mov	eax, DWORD PTR [eax+1280]
	push	1284					; 00000504H
	push	ecx
	mov	DWORD PTR ?text_register@@3Vkd_text_register@@A, eax
	call	??3@YAXPAXI@Z				; operator delete
	mov	eax, DWORD PTR ?text_register@@3Vkd_text_register@@A
	add	esp, 8
	mov	ecx, eax
	test	eax, eax
	jne	SHORT $LL4@dynamic
$LN5@dynamic:
	ret	0
??__Ftext_register@@YAXXZ ENDP				; `dynamic atexit destructor for 'text_register''
text$yd	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??__Etext_register@@YAXXZ
text$di	SEGMENT
??__Etext_register@@YAXXZ PROC				; `dynamic initializer for 'text_register'', COMDAT

; 143  : static kd_text_register text_register;

	push	OFFSET ??__Ftext_register@@YAXXZ	; `dynamic atexit destructor for 'text_register''
	call	_atexit
	pop	ecx
	ret	0
??__Etext_register@@YAXXZ ENDP				; `dynamic initializer for 'text_register''
text$di	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_id$ = 12						; size = 4
?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z PROC ; kd_text_register::find, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 304  :   kd_custom_context *ctxt;
; 305  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	esi, DWORD PTR [ecx+8]
	push	edi
	test	esi, esi
	je	SHORT $LN22@find
	mov	edi, DWORD PTR _context$[ebp]
	npad	1
$LL4@find:

; 306  :     if (strcmp(ctxt->context,context) == 0)

	mov	ecx, DWORD PTR [esi]
	mov	eax, edi
$LL23@find:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN24@find
	test	dl, dl
	je	SHORT $LN25@find
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN24@find
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL23@find
$LN25@find:
	xor	eax, eax
	jmp	SHORT $LN26@find
$LN24@find:
	sbb	eax, eax
	or	eax, 1
$LN26@find:
	test	eax, eax
	je	SHORT $LN9@find

; 304  :   kd_custom_context *ctxt;
; 305  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL4@find

; 307  :       break;
; 308  :   if (ctxt == NULL)
; 309  :     return NULL;

	pop	edi
	xor	eax, eax
	pop	esi

; 313  :       return elt;
; 314  :   return NULL;
; 315  : }

	pop	ebp
	ret	8
$LN9@find:

; 310  :   kd_custom_elt *elt;
; 311  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN22@find
	mov	ecx, DWORD PTR _id$[ebp]
$LL7@find:

; 312  :     if (elt->id == id)

	cmp	DWORD PTR [eax+8], ecx
	je	SHORT $LN1@find

; 310  :   kd_custom_elt *elt;
; 311  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	jne	SHORT $LL7@find
$LN22@find:

; 307  :       break;
; 308  :   if (ctxt == NULL)
; 309  :     return NULL;

	xor	eax, eax
$LN1@find:
	pop	edi
	pop	esi

; 313  :       return elt;
; 314  :   return NULL;
; 315  : }

	pop	ebp
	ret	8
?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z ENDP ; kd_text_register::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?add@kd_text_register@@QAEXPBDIPBG1@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_id$ = 12						; size = 4
_lead_in$ = 16						; size = 4
_text$ = 20						; size = 4
?add@kd_text_register@@QAEXPBDIPBG1@Z PROC		; kd_text_register::add, COMDAT
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi

; 256  :   kd_custom_context *ctxt;
; 257  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	edi, DWORD PTR _context$[ebp]
	mov	esi, DWORD PTR [ebx+8]
	test	esi, esi
	je	SHORT $LN26@add
$LL4@add:

; 258  :     if (strcmp(context,ctxt->context) == 0)

	mov	eax, DWORD PTR [esi]
	mov	ecx, edi
$LL27@add:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN28@add
	test	dl, dl
	je	SHORT $LN29@add
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN28@add
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL27@add
$LN29@add:
	xor	eax, eax
	jmp	SHORT $LN30@add
$LN28@add:
	sbb	eax, eax
	or	eax, 1
$LN30@add:
	test	eax, eax
	je	SHORT $LN9@add

; 256  :   kd_custom_context *ctxt;
; 257  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL4@add
$LN26@add:

; 259  :       break;
; 260  :   if (ctxt == NULL)
; 261  :     {
; 262  :       if (next_free_elt == 64)

	cmp	DWORD PTR [ebx+4], 64			; 00000040H
	jne	SHORT $LN10@add

; 263  :         {
; 264  :           kd_custom_store *store = new kd_custom_store;

	push	1284					; 00000504H
	call	??2@YAPAXI@Z				; operator new

; 265  :           store->next = storage;  storage = store;

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	DWORD PTR [eax+1280], ecx
	mov	DWORD PTR [ebx], eax

; 266  :           next_free_elt = 0;

	mov	DWORD PTR [ebx+4], 0
$LN10@add:

; 267  :         }
; 268  :       assert(storage != NULL);
; 269  :       ctxt = &(storage->bins[next_free_elt++].ctxt);

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	esi, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ebx+4], eax

; 270  :       ctxt->context = context;

	mov	DWORD PTR [esi], edi

; 271  :       ctxt->next = contexts;

	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+8], eax

; 272  :       contexts = ctxt;

	mov	DWORD PTR [ebx+8], esi
$LN9@add:

; 273  :     }
; 274  : 
; 275  :   kd_custom_elt *elt;
; 276  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	ecx, DWORD PTR [esi+4]
	mov	edi, DWORD PTR _id$[ebp]
	test	ecx, ecx
	je	SHORT $LN25@add
$LL7@add:

; 277  :     if (elt->id == id)

	cmp	DWORD PTR [ecx+8], edi
	je	SHORT $LN12@add

; 273  :     }
; 274  : 
; 275  :   kd_custom_elt *elt;
; 276  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	ecx, DWORD PTR [ecx+16]
	test	ecx, ecx
	jne	SHORT $LL7@add
$LN25@add:

; 278  :       break;
; 279  :   if (elt == NULL)
; 280  :     {
; 281  :       if (next_free_elt == 64)

	cmp	DWORD PTR [ebx+4], 64			; 00000040H
	jne	SHORT $LN13@add

; 282  :         {
; 283  :           kd_custom_store *store = new kd_custom_store;

	push	1284					; 00000504H
	call	??2@YAPAXI@Z				; operator new

; 284  :           store->next = storage;  storage = store;

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	DWORD PTR [eax+1280], ecx
	mov	DWORD PTR [ebx], eax

; 285  :           next_free_elt = 0;

	mov	DWORD PTR [ebx+4], 0
$LN13@add:

; 286  :         }
; 287  :       elt = &(storage->bins[next_free_elt++].elt);

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ebx+4], eax

; 288  :       elt->id = id;

	mov	DWORD PTR [ecx+8], edi

; 289  :       elt->next = ctxt->elts;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+16], eax

; 290  :       ctxt->elts = elt;

	mov	DWORD PTR [esi+4], ecx
$LN12@add:

; 291  :     }
; 292  :   elt->is_unicode = false;
; 293  :   elt->lead_in = lead_in;

	mov	eax, DWORD PTR _lead_in$[ebp]
	pop	edi
	mov	DWORD PTR [ecx], eax

; 294  :   elt->text = text;

	mov	eax, DWORD PTR _text$[ebp]
	pop	esi
	mov	BYTE PTR [ecx+12], 0
	mov	DWORD PTR [ecx+4], eax
	pop	ebx

; 295  : }

	pop	ebp
	ret	16					; 00000010H
?add@kd_text_register@@QAEXPBDIPBG1@Z ENDP		; kd_text_register::add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?add@kd_text_register@@QAEXPBDI00@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_id$ = 12						; size = 4
_lead_in$ = 16						; size = 4
_text$ = 20						; size = 4
?add@kd_text_register@@QAEXPBDI00@Z PROC		; kd_text_register::add, COMDAT
; _this$ = ecx

; 205  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ebx, ecx
	push	esi
	push	edi

; 206  :   kd_custom_context *ctxt;
; 207  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	edi, DWORD PTR _context$[ebp]
	mov	esi, DWORD PTR [ebx+8]
	test	esi, esi
	je	SHORT $LN26@add
$LL4@add:

; 208  :     if (strcmp(context,ctxt->context) == 0)

	mov	eax, DWORD PTR [esi]
	mov	ecx, edi
$LL27@add:
	mov	dl, BYTE PTR [ecx]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN28@add
	test	dl, dl
	je	SHORT $LN29@add
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN28@add
	add	ecx, 2
	add	eax, 2
	test	dl, dl
	jne	SHORT $LL27@add
$LN29@add:
	xor	eax, eax
	jmp	SHORT $LN30@add
$LN28@add:
	sbb	eax, eax
	or	eax, 1
$LN30@add:
	test	eax, eax
	je	SHORT $LN9@add

; 206  :   kd_custom_context *ctxt;
; 207  :   for (ctxt=contexts; ctxt != NULL; ctxt=ctxt->next)

	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL4@add
$LN26@add:

; 209  :       break;
; 210  :   if (ctxt == NULL)
; 211  :     {
; 212  :       if (next_free_elt == 64)

	cmp	DWORD PTR [ebx+4], 64			; 00000040H
	jne	SHORT $LN10@add

; 213  :         {
; 214  :           kd_custom_store *store = new kd_custom_store;

	push	1284					; 00000504H
	call	??2@YAPAXI@Z				; operator new

; 215  :           store->next = storage;  storage = store;

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	DWORD PTR [eax+1280], ecx
	mov	DWORD PTR [ebx], eax

; 216  :           next_free_elt = 0;

	mov	DWORD PTR [ebx+4], 0
$LN10@add:

; 217  :         }
; 218  :       assert(storage != NULL);
; 219  :       ctxt = &(storage->bins[next_free_elt++].ctxt);

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	esi, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ebx+4], eax

; 220  :       ctxt->context = context;

	mov	DWORD PTR [esi], edi

; 221  :       ctxt->elts = NULL;

	mov	DWORD PTR [esi+4], 0

; 222  :       ctxt->next = contexts;

	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR [esi+8], eax

; 223  :       contexts = ctxt;

	mov	DWORD PTR [ebx+8], esi
$LN9@add:

; 224  :     }
; 225  : 
; 226  :   kd_custom_elt *elt;
; 227  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	ecx, DWORD PTR [esi+4]
	mov	edi, DWORD PTR _id$[ebp]
	test	ecx, ecx
	je	SHORT $LN25@add
$LL7@add:

; 228  :     if (elt->id == id)

	cmp	DWORD PTR [ecx+8], edi
	je	SHORT $LN12@add

; 224  :     }
; 225  : 
; 226  :   kd_custom_elt *elt;
; 227  :   for (elt=ctxt->elts; elt != NULL; elt=elt->next)

	mov	ecx, DWORD PTR [ecx+16]
	test	ecx, ecx
	jne	SHORT $LL7@add
$LN25@add:

; 229  :       break;
; 230  :   if (elt == NULL)
; 231  :     {
; 232  :       if (next_free_elt == 64)

	cmp	DWORD PTR [ebx+4], 64			; 00000040H
	jne	SHORT $LN13@add

; 233  :         {
; 234  :           kd_custom_store *store = new kd_custom_store;

	push	1284					; 00000504H
	call	??2@YAPAXI@Z				; operator new

; 235  :           store->next = storage;  storage = store;

	mov	ecx, DWORD PTR [ebx]
	add	esp, 4
	mov	DWORD PTR [eax+1280], ecx
	mov	DWORD PTR [ebx], eax

; 236  :           next_free_elt = 0;

	mov	DWORD PTR [ebx+4], 0
$LN13@add:

; 237  :         }
; 238  :       elt = &(storage->bins[next_free_elt++].elt);

	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [edx+edx*4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ebx+4], eax

; 239  :       elt->id = id;

	mov	DWORD PTR [ecx+8], edi

; 240  :       elt->next = ctxt->elts;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+16], eax

; 241  :       ctxt->elts = elt;

	mov	DWORD PTR [esi+4], ecx
$LN12@add:

; 242  :     }
; 243  :   elt->is_unicode = false;
; 244  :   elt->lead_in = lead_in;

	mov	eax, DWORD PTR _lead_in$[ebp]
	pop	edi
	mov	DWORD PTR [ecx], eax

; 245  :   elt->text = text;

	mov	eax, DWORD PTR _text$[ebp]
	pop	esi
	mov	BYTE PTR [ecx+12], 0
	mov	DWORD PTR [ecx+4], eax
	pop	ebx

; 246  : }

	pop	ebp
	ret	16					; 00000010H
?add@kd_text_register@@QAEXPBDI00@Z ENDP		; kd_text_register::add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??1kd_text_register@@QAE@XZ
_TEXT	SEGMENT
??1kd_text_register@@QAE@XZ PROC			; kd_text_register::~kd_text_register, COMDAT
; _this$ = ecx

; 117  :       { kd_custom_store *tmp;

	push	esi
	mov	esi, ecx

; 118  :         while ((tmp=storage) != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@kd_text_re
	npad	7
$LL2@kd_text_re:

; 119  :           { storage=tmp->next; delete tmp; }

	mov	edx, DWORD PTR [eax+1280]
	push	1284					; 00000504H
	push	eax
	mov	DWORD PTR [esi], edx
	call	??3@YAXPAXI@Z				; operator delete
	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LL2@kd_text_re
$LN3@kd_text_re:
	pop	esi

; 120  :       }

	ret	0
??1kd_text_register@@QAE@XZ ENDP			; kd_text_register::~kd_text_register
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kd_text_register@@QAE@XZ
_TEXT	SEGMENT
??0kd_text_register@@QAE@XZ PROC			; kd_text_register::kd_text_register, COMDAT
; _this$ = ecx

; 115  :     kd_text_register() { storage=NULL; next_free_elt=64; contexts=NULL; }

	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 64			; 00000040H
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0kd_text_register@@QAE@XZ ENDP			; kd_text_register::kd_text_register
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??_Gkd_process_terminator@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gkd_process_terminator@@UAEPAXI@Z PROC		; kd_process_terminator::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx

; 65   :     virtual ~kd_process_terminator() { return; }

	mov	DWORD PTR [esi], OFFSET ??_7kd_process_terminator@@6B@
	je	SHORT $LN7@scalar
	push	4
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN7@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gkd_process_terminator@@UAEPAXI@Z ENDP		; kd_process_terminator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0kd_process_terminator@@QAE@XZ
_TEXT	SEGMENT
??0kd_process_terminator@@QAE@XZ PROC			; kd_process_terminator::kd_process_terminator, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], OFFSET ??_7kd_process_terminator@@6B@
	mov	eax, ecx
	ret	0
??0kd_process_terminator@@QAE@XZ ENDP			; kd_process_terminator::kd_process_terminator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?terminate@kd_process_terminator@@UAEXXZ
_TEXT	SEGMENT
?terminate@kd_process_terminator@@UAEXXZ PROC		; kd_process_terminator::terminate, COMDAT
; _this$ = ecx

; 66   :     virtual void terminate() { exit(-1); }

	push	-1
	call	DWORD PTR __imp__exit
$LN4@terminate:
$LN3@terminate:
	int	3
?terminate@kd_process_terminator@@UAEXXZ ENDP		; kd_process_terminator::terminate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??1kd_process_terminator@@UAE@XZ
_TEXT	SEGMENT
??1kd_process_terminator@@UAE@XZ PROC			; kd_process_terminator::~kd_process_terminator, COMDAT
; _this$ = ecx

; 65   :     virtual ~kd_process_terminator() { return; }

	mov	DWORD PTR [ecx], OFFSET ??_7kd_process_terminator@@6B@
	ret	0
??1kd_process_terminator@@UAE@XZ ENDP			; kd_process_terminator::~kd_process_terminator
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Ekdu_warning@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Ekdu_warning@@UAEPAXI@Z PROC				; kdu_warning::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_Ekdu_warning@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	ebx, DWORD PTR ___flags$[ebp]
	test	bl, 2
	je	SHORT $LN2@vector
	push	OFFSET ??1kdu_warning@@UAE@XZ		; kdu_warning::~kdu_warning
	push	DWORD PTR [esi-4]
	lea	edi, DWORD PTR [esi-4]
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIIP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN3@vector
	mov	ecx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [ecx*4+4]
	push	ecx
	push	edi
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN3@vector:
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@vector:
	call	??1kdu_warning@@UAE@XZ			; kdu_warning::~kdu_warning
	test	bl, 1
	je	SHORT $LN4@vector
	push	20					; 00000014H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@vector:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Ekdu_warning@@UAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_Ekdu_warning@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_Ekdu_warning@@UAEPAXI@Z ENDP				; kdu_warning::`vector deleting destructor'
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?flush@kdu_warning@@UAEX_N@Z
_TEXT	SEGMENT
_end_of_message$ = 8					; size = 1
?flush@kdu_warning@@UAEX_N@Z PROC			; kdu_warning::flush, COMDAT
; _this$ = ecx

; 662  :       { if (handler != NULL) handler->flush(false); }

	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $LN2@flush
	mov	eax, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [eax+12]
$LN2@flush:
	ret	4
?flush@kdu_warning@@UAEX_N@Z ENDP			; kdu_warning::flush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?put_text@kdu_warning@@UAEXPBG@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_warning@@UAEXPBG@Z PROC			; kdu_warning::put_text, COMDAT
; _this$ = ecx

; 655  :       { if (handler != NULL) handler->put_text(string); }

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $LN2@put_text
	mov	eax, DWORD PTR [ecx]
	pop	ebp
	jmp	DWORD PTR [eax+4]
$LN2@put_text:
	pop	ebp
	ret	4
?put_text@kdu_warning@@UAEXPBG@Z ENDP			; kdu_warning::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?put_text@kdu_warning@@UAEXPBD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_warning@@UAEXPBD@Z PROC			; kdu_warning::put_text, COMDAT
; _this$ = ecx

; 524  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 525  :   if (handler == NULL)

	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN1@put_text

; 526  :     return;
; 527  :   if ((string[0] == '<') && (string[1] == '#') &&
; 528  :       (string[2] == '>') && (string[3] == '\0'))

	mov	edx, DWORD PTR _string$[ebp]
	push	edi
	cmp	BYTE PTR [edx], 60			; 0000003cH
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+1], 35			; 00000023H
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+2], 62			; 0000003eH
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+3], 0
	jne	SHORT $LN14@put_text

; 529  :     { // See if we can replace the special pattern with registered text
; 530  :       if (ascii_text != NULL)

	mov	edi, DWORD PTR [esi+12]
	test	edi, edi
	je	SHORT $LN10@put_text

; 531  :         {
; 532  :           if (*ascii_text != '\0')

	cmp	BYTE PTR [edi], 0
	je	SHORT $LN14@put_text

; 533  :             {
; 534  :               handler->put_text(ascii_text);

	mov	eax, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [eax+8]

; 535  :               for (; *ascii_text != '\0'; ascii_text++);

	mov	eax, DWORD PTR [esi+12]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@put_text
$LL4@put_text:
	inc	eax
	mov	DWORD PTR [esi+12], eax
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL4@put_text
$LN3@put_text:

; 536  :               ascii_text++; // Walk over the null terminator

	inc	DWORD PTR [esi+12]
	pop	edi
$LN1@put_text:
	pop	esi

; 552  : }

	pop	ebp
	ret	4
$LN10@put_text:

; 537  :               return;
; 538  :             }
; 539  :         }
; 540  :       else if (unicode_text != NULL)

	mov	edi, DWORD PTR [esi+16]
	test	edi, edi
	je	SHORT $LN14@put_text

; 541  :         {
; 542  :           if (*unicode_text != 0x0000)

	cmp	WORD PTR [edi], 0
	je	SHORT $LN14@put_text

; 543  :             {
; 544  :               handler->put_text(unicode_text);

	mov	eax, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [eax+4]

; 545  :               for (; *unicode_text != 0x0000; unicode_text++);

	mov	eax, DWORD PTR [esi+16]
	cmp	WORD PTR [eax], 0
	je	SHORT $LN6@put_text
$LL7@put_text:
	add	eax, 2
	mov	DWORD PTR [esi+16], eax
	cmp	WORD PTR [eax], 0
	jne	SHORT $LL7@put_text
$LN6@put_text:

; 546  :               unicode_text++; // Walk over the null terminator

	add	DWORD PTR [esi+16], 2
	pop	edi
	pop	esi

; 552  : }

	pop	ebp
	ret	4
$LN14@put_text:

; 547  :               return;
; 548  :             }
; 549  :         }
; 550  :     }
; 551  :   handler->put_text(string);

	mov	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	mov	DWORD PTR _string$[ebp], edx

; 552  : }

	pop	ebp

; 547  :               return;
; 548  :             }
; 549  :         }
; 550  :     }
; 551  :   handler->put_text(string);

	jmp	DWORD PTR [eax+8]
?put_text@kdu_warning@@UAEXPBD@Z ENDP			; kdu_warning::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??1kdu_warning@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1kdu_warning@@UAE@XZ PROC				; kdu_warning::~kdu_warning, COMDAT
; _this$ = ecx

; 513  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1kdu_warning@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 514  :   if (handler != NULL)

	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], OFFSET ??_7kdu_warning@@6B@
	test	ecx, ecx
	je	SHORT $LN7@kdu_warnin

; 515  :     handler->flush(true);

	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+12]
$LN7@kdu_warnin:
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 196  :     virtual ~kdu_message() { return; };

	mov	DWORD PTR [esi], OFFSET ??_7kdu_message@@6B@
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 516  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1kdu_warning@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1kdu_warning@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1kdu_warning@@UAE@XZ ENDP				; kdu_warning::~kdu_warning
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_warning@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_context$ = 8						; size = 4
_id$ = 12						; size = 4
??0kdu_warning@@QAE@PBDI@Z PROC				; kdu_warning::kdu_warning, COMDAT
; _this$ = ecx

; 483  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_warning@@QAE@PBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 484  :   handler = warn_handler;

	mov	ecx, DWORD PTR ?warn_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_warning@@6B@
	mov	DWORD PTR [esi+8], ecx

; 485  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_warnin

; 486  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_warnin:

; 487  :   const kd_custom_elt *elt = text_register.find(context,id);

	push	DWORD PTR _id$[ebp]
	mov	ecx, OFFSET ?text_register@@3Vkd_text_register@@A
	push	DWORD PTR _context$[ebp]
	call	?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z ; kd_text_register::find
	mov	ecx, eax

; 488  :   if (elt == NULL)

	test	ecx, ecx
	jne	SHORT $LN3@kdu_warnin

; 489  :     handler = NULL;

	mov	DWORD PTR [esi+8], eax

; 505  :     }
; 506  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN3@kdu_warnin:

; 490  :   else if (!elt->is_unicode)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN5@kdu_warnin

; 491  :     {
; 492  :       ascii_text = (const char *) elt->text;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+12], eax

; 493  :       unicode_text = NULL;

	mov	DWORD PTR [esi+16], 0

; 494  :       const char *lead_in = (const char *) elt->lead_in;

	mov	eax, DWORD PTR [ecx]

; 495  :       if (*lead_in != '\0')

	cmp	BYTE PTR [eax], 0
	je	SHORT $LN13@kdu_warnin

; 496  :         put_text(lead_in);

	push	eax
	mov	ecx, esi
	call	?put_text@kdu_warning@@UAEXPBD@Z	; kdu_warning::put_text

; 505  :     }
; 506  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@kdu_warnin:

; 497  :     }
; 498  :   else
; 499  :     {
; 500  :       ascii_text = NULL;

	mov	DWORD PTR [esi+12], 0

; 501  :       unicode_text = (const kdu_uint16 *) elt->text;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+16], eax

; 502  :       const kdu_uint16 *lead_in = (const kdu_uint16 *) elt->lead_in;

	mov	edx, DWORD PTR [ecx]

; 503  :       if ((*lead_in != 0x0000) && (handler != NULL))

	cmp	WORD PTR [edx], 0
	je	SHORT $LN13@kdu_warnin
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN13@kdu_warnin

; 504  :         handler->put_text(lead_in);

	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+4]
$LN13@kdu_warnin:

; 505  :     }
; 506  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_warning@@QAE@PBDI@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_warning@@QAE@PBDI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_warning@@QAE@PBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_warning@@QAE@PBDI@Z ENDP				; kdu_warning::kdu_warning
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_warning@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lead_in$ = 8						; size = 4
??0kdu_warning@@QAE@PBD@Z PROC				; kdu_warning::kdu_warning, COMDAT
; _this$ = ecx

; 468  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_warning@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 469  :   handler = warn_handler;

	mov	ecx, DWORD PTR ?warn_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_warning@@6B@
	mov	DWORD PTR [esi+8], ecx

; 470  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_warnin

; 471  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_warnin:

; 472  :   ascii_text = NULL;
; 473  :   unicode_text = NULL;
; 474  :   if (*lead_in != '\0')

	mov	eax, DWORD PTR _lead_in$[ebp]
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN8@kdu_warnin

; 475  :     put_text(lead_in);

	push	eax
	mov	ecx, esi
	call	?put_text@kdu_warning@@UAEXPBD@Z	; kdu_warning::put_text
$LN8@kdu_warnin:

; 476  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_warning@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_warning@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_warning@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_warning@@QAE@PBD@Z ENDP				; kdu_warning::kdu_warning
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_warning@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0kdu_warning@@QAE@XZ PROC				; kdu_warning::kdu_warning, COMDAT
; _this$ = ecx

; 454  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_warning@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 455  :   handler = warn_handler;

	mov	ecx, DWORD PTR ?warn_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_warning@@6B@
	mov	DWORD PTR [esi+8], ecx

; 456  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_warnin

; 457  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_warnin:

; 458  :   ascii_text = NULL;
; 459  :   unicode_text = NULL;
; 460  :   put_text("Kakadu Warning:\n");

	push	OFFSET ??_C@_0BB@GJOFFOEI@Kakadu?5Warning?3?6?$AA@
	mov	ecx, esi
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	call	?put_text@kdu_warning@@UAEXPBD@Z	; kdu_warning::put_text

; 461  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_warning@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_warning@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_warning@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_warning@@QAE@XZ ENDP				; kdu_warning::kdu_warning
; Function compile flags: /Ogtp
;	COMDAT ??_Ekdu_error@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_Ekdu_error@@UAEPAXI@Z PROC				; kdu_error::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_Ekdu_error@@UAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	ebx, DWORD PTR ___flags$[ebp]
	test	bl, 2
	je	SHORT $LN2@vector
	push	OFFSET ??1kdu_error@@UAE@XZ		; kdu_error::~kdu_error
	push	DWORD PTR [esi-4]
	lea	edi, DWORD PTR [esi-4]
	push	20					; 00000014H
	push	esi
	call	??_M@YGXPAXIIP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN3@vector
	mov	ecx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [ecx*4+4]
	push	ecx
	push	edi
	call	??_V@YAXPAXI@Z				; operator delete[]
	add	esp, 8
$LN3@vector:
	mov	eax, edi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@vector:
	call	??1kdu_error@@UAE@XZ			; kdu_error::~kdu_error
	test	bl, 1
	je	SHORT $LN4@vector
	push	20					; 00000014H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN4@vector:
	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_Ekdu_error@@UAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_Ekdu_error@@UAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_Ekdu_error@@UAEPAXI@Z ENDP				; kdu_error::`vector deleting destructor'
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?flush@kdu_error@@UAEX_N@Z
_TEXT	SEGMENT
_end_of_message$ = 8					; size = 1
?flush@kdu_error@@UAEX_N@Z PROC				; kdu_error::flush, COMDAT
; _this$ = ecx

; 570  :       { if (handler != NULL) handler->flush(false); }

	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $LN2@flush
	mov	eax, DWORD PTR [ecx]
	push	0
	call	DWORD PTR [eax+12]
$LN2@flush:
	ret	4
?flush@kdu_error@@UAEX_N@Z ENDP				; kdu_error::flush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?put_text@kdu_error@@UAEXPBG@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_error@@UAEXPBG@Z PROC			; kdu_error::put_text, COMDAT
; _this$ = ecx

; 563  :       { if (handler != NULL) handler->put_text(string); }

	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $LN2@put_text
	mov	eax, DWORD PTR [ecx]
	pop	ebp
	jmp	DWORD PTR [eax+4]
$LN2@put_text:
	pop	ebp
	ret	4
?put_text@kdu_error@@UAEXPBG@Z ENDP			; kdu_error::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?put_text@kdu_error@@UAEXPBD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_error@@UAEXPBD@Z PROC			; kdu_error::put_text, COMDAT
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 644  :   if (handler == NULL)

	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN1@put_text

; 645  :     return;
; 646  :   if ((string[0] == '<') && (string[1] == '#') &&
; 647  :       (string[2] == '>') && (string[3] == '\0'))

	mov	edx, DWORD PTR _string$[ebp]
	push	edi
	cmp	BYTE PTR [edx], 60			; 0000003cH
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+1], 35			; 00000023H
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+2], 62			; 0000003eH
	jne	SHORT $LN14@put_text
	cmp	BYTE PTR [edx+3], 0
	jne	SHORT $LN14@put_text

; 648  :     { // See if we can replace the special pattern with registered text
; 649  :       if (ascii_text != NULL)

	mov	edi, DWORD PTR [esi+12]
	test	edi, edi
	je	SHORT $LN10@put_text

; 650  :         {
; 651  :           if (*ascii_text != '\0')

	cmp	BYTE PTR [edi], 0
	je	SHORT $LN14@put_text

; 652  :             {
; 653  :               handler->put_text(ascii_text);

	mov	eax, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [eax+8]

; 654  :               for (; *ascii_text != '\0'; ascii_text++);

	mov	eax, DWORD PTR [esi+12]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@put_text
$LL4@put_text:
	inc	eax
	mov	DWORD PTR [esi+12], eax
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL4@put_text
$LN3@put_text:

; 655  :               ascii_text++; // Walk over the null terminator

	inc	DWORD PTR [esi+12]
	pop	edi
$LN1@put_text:
	pop	esi

; 671  : }

	pop	ebp
	ret	4
$LN10@put_text:

; 656  :               return;
; 657  :             }
; 658  :         }
; 659  :       else if (unicode_text != NULL)

	mov	edi, DWORD PTR [esi+16]
	test	edi, edi
	je	SHORT $LN14@put_text

; 660  :         {
; 661  :           if (*unicode_text != 0x0000)

	cmp	WORD PTR [edi], 0
	je	SHORT $LN14@put_text

; 662  :             {
; 663  :               handler->put_text(unicode_text);

	mov	eax, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [eax+4]

; 664  :               for (; *unicode_text != 0x0000; unicode_text++);

	mov	eax, DWORD PTR [esi+16]
	cmp	WORD PTR [eax], 0
	je	SHORT $LN6@put_text
$LL7@put_text:
	add	eax, 2
	mov	DWORD PTR [esi+16], eax
	cmp	WORD PTR [eax], 0
	jne	SHORT $LL7@put_text
$LN6@put_text:

; 665  :               unicode_text++; // Walk over the null terminator

	add	DWORD PTR [esi+16], 2
	pop	edi
	pop	esi

; 671  : }

	pop	ebp
	ret	4
$LN14@put_text:

; 666  :               return;
; 667  :             }
; 668  :         }
; 669  :     }
; 670  :   handler->put_text(string);

	mov	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	mov	DWORD PTR _string$[ebp], edx

; 671  : }

	pop	ebp

; 666  :               return;
; 667  :             }
; 668  :         }
; 669  :     }
; 670  :   handler->put_text(string);

	jmp	DWORD PTR [eax+8]
?put_text@kdu_error@@UAEXPBD@Z ENDP			; kdu_error::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??1kdu_error@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1kdu_error@@UAE@XZ PROC				; kdu_error::~kdu_error, COMDAT
; _this$ = ecx

; 630  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1kdu_error@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx

; 631  :   if (handler != NULL)

	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], OFFSET ??_7kdu_error@@6B@
	test	ecx, ecx
	je	SHORT $LN2@kdu_error

; 632  :     handler->flush(true);

	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+12]
$LN2@kdu_error:

; 633  :   kd_process_terminator *terminator = &process_terminator;
; 634  :   terminator->terminate();

	mov	eax, DWORD PTR ?process_terminator@@3Vkd_process_terminator@@A
	mov	ecx, OFFSET ?process_terminator@@3Vkd_process_terminator@@A
	call	DWORD PTR [eax+4]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 196  :     virtual ~kdu_message() { return; };

	mov	DWORD PTR [esi], OFFSET ??_7kdu_message@@6B@
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 635  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1kdu_error@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1kdu_error@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1kdu_error@@UAE@XZ ENDP				; kdu_error::~kdu_error
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_error@@QAE@PBDI@Z
_TEXT	SEGMENT
_this$GSCopy$ = -104					; size = 4
_this$ = -100						; size = 4
_text$2 = -96						; size = 80
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_context$ = 8						; size = 4
_id$ = 12						; size = 4
??0kdu_error@@QAE@PBDI@Z PROC				; kdu_error::kdu_error, COMDAT
; _this$ = ecx

; 593  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_error@@QAE@PBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	mov	edi, DWORD PTR _context$[ebp]
	mov	ebx, DWORD PTR _id$[ebp]
	mov	DWORD PTR _this$GSCopy$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 594  :   handler = err_handler;

	mov	ecx, DWORD PTR ?err_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_error@@6B@
	mov	DWORD PTR [esi+8], ecx

; 595  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_error

; 596  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_error:

; 597  :   const kd_custom_elt *elt = text_register.find(context,id);

	push	ebx
	push	edi
	mov	ecx, OFFSET ?text_register@@3Vkd_text_register@@A
	call	?find@kd_text_register@@QAEPBUkd_custom_elt@@PBDI@Z ; kd_text_register::find
	mov	ecx, eax

; 598  :   if (elt == NULL)

	test	ecx, ecx
	jne	$LN3@kdu_error

; 599  :     {
; 600  :       ascii_text = NULL;

	mov	DWORD PTR [esi+12], eax
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 257  :       { put_text(string); return *this; }

	mov	ecx, esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 601  :       unicode_text = NULL;

	mov	DWORD PTR [esi+16], eax
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 257  :       { put_text(string); return *this; }

	mov	eax, DWORD PTR [esi]
	push	OFFSET ??_C@_0BH@JMFNMOOB@Untranslated?5error?5?9?9?6?$AA@
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	OFFSET ??_C@_0CF@OBDAEPBE@Consult?5vendor?5for?5more?5informat@
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	OFFSET ??_C@_09EBKLGPOD@Details?3?6?$AA@
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	OFFSET ??_C@_0M@IAAMOIMH@?5?5context?$DN?$CC?$AA@
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	edi
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	push	OFFSET ??_C@_06PGNFEDJF@?$CC?$DL?5id?$DN?$AA@
	call	DWORD PTR [eax+8]

; 258  :     kdu_message &operator<<(char ch)
; 259  :       { char text[2]; text[0]=ch; text[1]='\0'; put_text(text); return *this; }
; 260  :     kdu_message &operator<<(int val)
; 261  :       { char text[80];
; 262  :         sprintf(text,(mode_hex)?"%x":"%d",val);
; 263  :         put_text(text); return *this; }
; 264  :     kdu_message &operator<<(unsigned int val)
; 265  :       { char text[80];
; 266  :         sprintf(text,(mode_hex)?"%x":"%u",val);

	cmp	BYTE PTR [esi+4], 0
	mov	ecx, OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	mov	eax, OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	cmove	eax, ecx
	push	ebx
	push	eax
	lea	eax, DWORD PTR _text$2[ebp]
	push	eax
	call	_sprintf

; 267  :         put_text(text); return *this; }

	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR _text$2[ebp]
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	push	eax
	call	DWORD PTR [edx+8]

; 257  :       { put_text(string); return *this; }

	mov	edx, DWORD PTR [esi]
	mov	ecx, esi
	push	OFFSET ??_C@_02LNAEAIDO@?$DL?5?$AA@
	call	DWORD PTR [edx+8]
	jmp	SHORT $LN29@kdu_error
$LN3@kdu_error:
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 607  :   else if (!elt->is_unicode)

	cmp	BYTE PTR [ecx+12], 0
	jne	SHORT $LN5@kdu_error

; 608  :     {
; 609  :       ascii_text = (const char *) elt->text;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+12], eax

; 610  :       unicode_text = NULL;

	mov	DWORD PTR [esi+16], 0

; 611  :       const char *lead_in = (const char *) elt->lead_in;

	mov	eax, DWORD PTR [ecx]

; 612  :       if (*lead_in != '\0')

	cmp	BYTE PTR [eax], 0
	je	SHORT $LN29@kdu_error

; 613  :         put_text(lead_in);

	push	eax
	mov	ecx, esi
	call	?put_text@kdu_error@@UAEXPBD@Z		; kdu_error::put_text

; 614  :     }
; 615  :   else

	jmp	SHORT $LN29@kdu_error
$LN5@kdu_error:

; 616  :     {
; 617  :       ascii_text = NULL;

	mov	DWORD PTR [esi+12], 0

; 618  :       unicode_text = (const kdu_uint16 *) elt->text;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+16], eax

; 619  :       const kdu_uint16 *lead_in = (const kdu_uint16 *) elt->lead_in;

	mov	edx, DWORD PTR [ecx]

; 620  :       if ((*lead_in != 0x0000) && (handler != NULL))

	cmp	WORD PTR [edx], 0
	je	SHORT $LN29@kdu_error
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN29@kdu_error

; 621  :         handler->put_text(lead_in);

	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+4]
$LN29@kdu_error:

; 622  :     }
; 623  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_error@@QAE@PBDI@Z$0:
	mov	ecx, DWORD PTR _this$GSCopy$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_error@@QAE@PBDI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_error@@QAE@PBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_error@@QAE@PBDI@Z ENDP				; kdu_error::kdu_error
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_error@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lead_in$ = 8						; size = 4
??0kdu_error@@QAE@PBD@Z PROC				; kdu_error::kdu_error, COMDAT
; _this$ = ecx

; 578  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_error@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 579  :   handler = err_handler;

	mov	ecx, DWORD PTR ?err_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_error@@6B@
	mov	DWORD PTR [esi+8], ecx

; 580  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_error

; 581  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_error:

; 582  :   ascii_text = NULL;
; 583  :   unicode_text = NULL;
; 584  :   if (*lead_in != '\0')

	mov	eax, DWORD PTR _lead_in$[ebp]
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN8@kdu_error

; 585  :     put_text(lead_in);

	push	eax
	mov	ecx, esi
	call	?put_text@kdu_error@@UAEXPBD@Z		; kdu_error::put_text
$LN8@kdu_error:

; 586  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_error@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_error@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_error@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_error@@QAE@PBD@Z ENDP				; kdu_error::kdu_error
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ??0kdu_error@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0kdu_error@@QAE@XZ PROC				; kdu_error::kdu_error, COMDAT
; _this$ = ecx

; 564  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0kdu_error@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 195  :     kdu_message() { mode_hex = false; }

	mov	BYTE PTR [esi+4], 0
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 565  :   handler = err_handler;

	mov	ecx, DWORD PTR ?err_handler@@3PAVkdu_message@@A
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR [esi], OFFSET ??_7kdu_error@@6B@
	mov	DWORD PTR [esi+8], ecx

; 566  :   if (handler != NULL)

	test	ecx, ecx
	je	SHORT $LN2@kdu_error

; 567  :     handler->start_message();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]
$LN2@kdu_error:

; 568  :   ascii_text = NULL;
; 569  :   unicode_text = NULL;
; 570  :   put_text("Kakadu Error:\n");

	push	OFFSET ??_C@_0P@FAIHICJN@Kakadu?5Error?3?6?$AA@
	mov	ecx, esi
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	call	?put_text@kdu_error@@UAEXPBD@Z		; kdu_error::put_text

; 571  : }

	mov	eax, esi
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0kdu_error@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1kdu_message@@UAE@XZ			; kdu_message::~kdu_message
__ehhandler$??0kdu_error@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0kdu_error@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0kdu_error@@QAE@XZ ENDP				; kdu_error::kdu_error
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?flush@kdu_message_formatter@@UAEX_N@Z
_TEXT	SEGMENT
_end_of_message$ = 8					; size = 1
?flush@kdu_message_formatter@@UAEX_N@Z PROC		; kdu_message_formatter::flush, COMDAT
; _this$ = ecx

; 411  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 412  :   if (dest == NULL)

	cmp	DWORD PTR [esi+236], 0
	je	$LN1@flush

; 413  :     return;
; 414  :   if (!no_output_since_newline)

	cmp	BYTE PTR [esi+232], 0
	jne	SHORT $LN6@flush

; 415  :     {
; 416  :       line_buf[num_chars] = '\0';

	mov	eax, DWORD PTR [esi+216]
	push	edi
	mov	BYTE PTR [esi+eax+8], 0

; 417  :       (*dest) << line_buf << "\n";

	lea	eax, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [esi+236]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 257  :       { put_text(string); return *this; }

	mov	ecx, edi
	push	eax
	mov	edx, DWORD PTR [edi]
	call	DWORD PTR [edx+8]
	mov	eax, DWORD PTR [edi]
	mov	ecx, edi
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR [eax+8]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 418  :       for (num_chars=0; num_chars < (indent+master_indent); num_chars++)

	mov	eax, DWORD PTR [esi+224]
	add	eax, DWORD PTR [esi+228]
	mov	DWORD PTR [esi+216], 0
	pop	edi
	test	eax, eax
	jle	SHORT $LN3@flush
$LL4@flush:

; 419  :         line_buf[num_chars] = ' ';

	mov	eax, DWORD PTR [esi+216]
	mov	BYTE PTR [esi+eax+8], 32		; 00000020H
	inc	DWORD PTR [esi+216]
	mov	eax, DWORD PTR [esi+224]
	add	eax, DWORD PTR [esi+228]
	cmp	DWORD PTR [esi+216], eax
	jl	SHORT $LL4@flush
$LN3@flush:

; 420  :       no_output_since_newline = true;

	mov	BYTE PTR [esi+232], 1
$LN6@flush:

; 421  :     }
; 422  :   dest->flush(end_of_message);

	mov	ecx, DWORD PTR [esi+236]
	pop	esi
	mov	eax, DWORD PTR [ecx]

; 423  : }

	pop	ebp

; 421  :     }
; 422  :   dest->flush(end_of_message);

	jmp	DWORD PTR [eax+12]
$LN1@flush:
	pop	esi

; 423  : }

	pop	ebp
	ret	4
?flush@kdu_message_formatter@@UAEX_N@Z ENDP		; kdu_message_formatter::flush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?put_text@kdu_message_formatter@@UAEXPBG@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_message_formatter@@UAEXPBG@Z PROC		; kdu_message_formatter::put_text, COMDAT
; _this$ = ecx

; 422  :       { kdu_message::put_text(string); }

	ret	4
?put_text@kdu_message_formatter@@UAEXPBG@Z ENDP		; kdu_message_formatter::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?put_text@kdu_message_formatter@@UAEXPBD@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_text$1 = -8						; size = 2
_text$2 = -4						; size = 2
_string$ = 8						; size = 4
?put_text@kdu_message_formatter@@UAEXPBD@Z PROC		; kdu_message_formatter::put_text, COMDAT
; _this$ = ecx

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$1$[ebp], esi

; 329  :   if (dest == NULL)

	cmp	DWORD PTR [esi+236], 0
	je	$LN3@put_text

; 330  :     return;
; 331  :   for (; *string != '\0'; string++)

	mov	edx, DWORD PTR _string$[ebp]
	mov	cl, BYTE PTR [edx]
	test	cl, cl
	je	$LN3@put_text
	push	ebx
	push	edi
	npad	8
$LL4@put_text:

; 332  :     {
; 333  :       char nCh = *string;
; 334  : 
; 335  :       if (nCh == '\t')

	cmp	cl, 9
	jne	$LN30@put_text

; 336  :         {
; 337  :           if (no_output_since_newline)

	cmp	BYTE PTR [esi+232], 0
	je	SHORT $LN32@put_text

; 338  :             {
; 339  :               int indent_change = 4;
; 340  : 
; 341  :               if ((indent+indent_change+master_indent) > max_indent)

	mov	edi, DWORD PTR [esi+228]
	mov	ecx, 4
	mov	edx, DWORD PTR [esi+224]
	mov	ebx, DWORD PTR [esi+220]
	lea	eax, DWORD PTR [edi+4]
	add	eax, edx
	cmp	eax, ebx
	jle	SHORT $LN34@put_text

; 342  :                 indent_change = max_indent - indent - master_indent;

	mov	ecx, ebx
	sub	ecx, edx
	sub	ecx, edi
$LN34@put_text:

; 343  :               indent += indent_change;

	lea	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR [esi+224], eax

; 344  :               while (indent_change--)

	test	ecx, ecx
	je	$LN2@put_text
	npad	7
$LL5@put_text:

; 345  :                 line_buf[num_chars++] = ' ';

	mov	eax, DWORD PTR [esi+216]
	mov	BYTE PTR [eax+esi+8], 32		; 00000020H
	inc	DWORD PTR [esi+216]
	sub	ecx, 1
	jne	SHORT $LL5@put_text

; 346  :               assert(num_chars < line_chars);
; 347  :               continue;

	jmp	$LN2@put_text
$LN32@put_text:

; 348  :             }
; 349  :           else
; 350  :             nCh = ' ';

	mov	cl, 32					; 00000020H
$LN36@put_text:

; 367  :         }
; 368  : 
; 369  :       line_buf[num_chars++] = (char) nCh;

	mov	eax, DWORD PTR [esi+216]
	mov	BYTE PTR [eax+esi+8], cl
	inc	DWORD PTR [esi+216]
	mov	ecx, DWORD PTR [esi+216]

; 370  :       no_output_since_newline = false;
; 371  :       if (num_chars > line_chars)

	mov	ebx, DWORD PTR [esi+212]
	mov	BYTE PTR [esi+232], 0
	cmp	ecx, ebx
	jle	$LN2@put_text

; 372  :         {
; 373  :           int blank_chars, output_chars, i;
; 374  : 
; 375  :           for (blank_chars=0; blank_chars < num_chars; blank_chars++)

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN99@put_text
	npad	2
$LL12@put_text:

; 376  :             if (line_buf[blank_chars] != ' ')

	cmp	BYTE PTR [esi+eax+8], 32		; 00000020H
	jne	SHORT $LN99@put_text

; 372  :         {
; 373  :           int blank_chars, output_chars, i;
; 374  : 
; 375  :           for (blank_chars=0; blank_chars < num_chars; blank_chars++)

	inc	eax
	cmp	eax, ecx
	jl	SHORT $LL12@put_text
$LN99@put_text:

; 377  :               break;
; 378  :           for (output_chars=num_chars-1;

	lea	edi, DWORD PTR [ecx-1]

; 379  :                output_chars>blank_chars; output_chars--)

	cmp	edi, eax
	jle	SHORT $LN100@put_text
$LL15@put_text:

; 380  :             if (line_buf[output_chars] == ' ')

	cmp	BYTE PTR [esi+edi+8], 32		; 00000020H
	je	SHORT $LN100@put_text

; 379  :                output_chars>blank_chars; output_chars--)

	dec	edi
	cmp	edi, eax
	jg	SHORT $LL15@put_text
$LN100@put_text:

; 381  :               break;
; 382  :           if ((num_chars > 0) && (line_buf[num_chars-1] == ' '))

	test	ecx, ecx
	jle	SHORT $LN17@put_text
	cmp	BYTE PTR [ecx+esi+7], 32		; 00000020H
	jne	SHORT $LN17@put_text

; 383  :             { // Eat up any extra spaces, since we are wrapping the line
; 384  :               assert(output_chars == (num_chars-1));
; 385  :               while (string[1] == ' ')

	cmp	BYTE PTR [edx+1], 32			; 00000020H
	lea	ecx, DWORD PTR [edx+1]
	jne	SHORT $LN17@put_text
$LL16@put_text:

; 386  :                 string++;

	mov	esi, ecx
	cmp	BYTE PTR [esi+1], 32			; 00000020H
	lea	ecx, DWORD PTR [esi+1]
	mov	DWORD PTR _string$[ebp], esi
	je	SHORT $LL16@put_text
	mov	esi, DWORD PTR _this$1$[ebp]
$LN17@put_text:

; 387  :             }
; 388  :           if (output_chars == blank_chars)

	cmp	edi, eax
	cmove	edi, ebx

; 390  :           for (i=0; i < output_chars; i++)

	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN63@put_text
	npad	1
$LL20@put_text:

; 391  :             (*dest) << line_buf[i];

	mov	ecx, DWORD PTR [esi+236]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 259  :       { char text[2]; text[0]=ch; text[1]='\0'; put_text(text); return *this; }

	lea	edx, DWORD PTR _text$2[ebp]
	mov	al, BYTE PTR [esi+ebx+8]
	mov	BYTE PTR _text$2[ebp], al
	push	edx
	mov	eax, DWORD PTR [ecx]
	mov	BYTE PTR _text$2[ebp+1], 0
	call	DWORD PTR [eax+8]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 390  :           for (i=0; i < output_chars; i++)

	inc	ebx
	cmp	ebx, edi
	jl	SHORT $LL20@put_text
$LN63@put_text:

; 392  :           while ((line_buf[output_chars] == ' ') && (output_chars < num_chars))

	cmp	BYTE PTR [esi+edi+8], 32		; 00000020H
	jne	SHORT $LN101@put_text
	mov	eax, DWORD PTR [esi+216]
	npad	4
$LL21@put_text:
	cmp	edi, eax
	jge	SHORT $LN101@put_text

; 393  :             output_chars++;

	inc	edi
	cmp	BYTE PTR [esi+edi+8], 32		; 00000020H
	je	SHORT $LL21@put_text
$LN101@put_text:

; 394  :           (*dest) << '\n';

	mov	ecx, DWORD PTR [esi+236]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 259  :       { char text[2]; text[0]=ch; text[1]='\0'; put_text(text); return *this; }

	lea	edx, DWORD PTR _text$1[ebp]
	push	edx
	mov	WORD PTR _text$1[ebp], 10		; 0000000aH
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+8]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 395  :           num_chars = num_chars - output_chars + indent + master_indent;

	mov	ecx, DWORD PTR [esi+228]

; 396  :           assert(num_chars <= line_chars);
; 397  :           for (i=0; i < (indent+master_indent); i++)

	xor	edx, edx
	add	ecx, DWORD PTR [esi+224]
	mov	eax, ecx
	sub	eax, edi
	add	DWORD PTR [esi+216], eax
	test	ecx, ecx
	jle	SHORT $LN24@put_text
	npad	3
$LL25@put_text:

; 398  :             line_buf[i] = ' ';

	mov	BYTE PTR [esi+edx+8], 32		; 00000020H
	inc	edx
	mov	eax, DWORD PTR [esi+228]
	add	eax, DWORD PTR [esi+224]
	cmp	edx, eax
	jl	SHORT $LL25@put_text
$LN24@put_text:

; 399  :           for (; i < num_chars; i++)

	cmp	edx, DWORD PTR [esi+216]
	jge	SHORT $LN2@put_text
	lea	ecx, DWORD PTR [edi+8]
	add	ecx, esi
$LL28@put_text:

; 400  :             line_buf[i] = line_buf[output_chars++];

	mov	al, BYTE PTR [ecx]
	inc	ecx
	mov	BYTE PTR [esi+edx+8], al
	inc	edx
	cmp	edx, DWORD PTR [esi+216]
	jl	SHORT $LL28@put_text
$LN2@put_text:

; 330  :     return;
; 331  :   for (; *string != '\0'; string++)

	mov	eax, DWORD PTR _string$[ebp]
	inc	eax
	mov	DWORD PTR _string$[ebp], eax
	mov	edx, eax
	mov	cl, BYTE PTR [eax]
	test	cl, cl
	jne	$LL4@put_text
	pop	edi
	pop	ebx
$LN3@put_text:
	pop	esi

; 401  :         }
; 402  :     }
; 403  : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN30@put_text:

; 351  :         }
; 352  :       else if (nCh == '\f')
; 353  :         {
; 354  : 
; 355  : 
; 356  :         }
; 357  : 
; 358  :       if (nCh == '\n')

	cmp	cl, 10					; 0000000aH
	jne	$LN36@put_text

; 359  :         {
; 360  :           indent = 0;
; 361  :           no_output_since_newline = true;
; 362  :           line_buf[num_chars] = '\0';

	mov	eax, DWORD PTR [esi+216]
	mov	DWORD PTR [esi+224], 0
	mov	BYTE PTR [esi+232], 1
	mov	BYTE PTR [eax+esi+8], 0

; 363  :           (*dest) << line_buf << "\n";

	lea	eax, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [esi+236]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h

; 257  :       { put_text(string); return *this; }

	mov	ecx, edi
	push	eax
	mov	edx, DWORD PTR [edi]
	call	DWORD PTR [edx+8]
	mov	eax, DWORD PTR [edi]
	mov	ecx, edi
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR [eax+8]
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp

; 364  :           for (num_chars=0; num_chars < master_indent; num_chars++)

	cmp	DWORD PTR [esi+228], 0
	mov	DWORD PTR [esi+216], 0
	jle	SHORT $LN2@put_text
$LL9@put_text:

; 365  :             line_buf[num_chars] = ' ';

	mov	eax, DWORD PTR [esi+216]
	mov	BYTE PTR [eax+esi+8], 32		; 00000020H
	inc	DWORD PTR [esi+216]
	mov	eax, DWORD PTR [esi+216]
	cmp	eax, DWORD PTR [esi+228]
	jl	SHORT $LL9@put_text

; 366  :           continue;

	jmp	$LN2@put_text
?put_text@kdu_message_formatter@@UAEXPBD@Z ENDP		; kdu_message_formatter::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?set_master_indent@kdu_message_formatter@@QAEXH@Z
_TEXT	SEGMENT
_val$ = 8						; size = 4
?set_master_indent@kdu_message_formatter@@QAEXH@Z PROC	; kdu_message_formatter::set_master_indent, COMDAT
; _this$ = ecx

; 431  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 432  :   if (!no_output_since_newline)

	cmp	BYTE PTR [esi+232], 0
	jne	SHORT $LN6@set_master

; 433  :     flush();

	mov	eax, DWORD PTR [esi]
	push	0
	call	DWORD PTR [eax+12]
$LN6@set_master:

; 434  :   if (val < 0)

	mov	ecx, DWORD PTR _val$[ebp]
	xor	eax, eax
	test	ecx, ecx
	cmovs	ecx, eax

; 435  :     val = 0;
; 436  :   if (val > max_indent)

	mov	eax, DWORD PTR [esi+220]
	cmp	ecx, eax
	cmovg	ecx, eax

; 437  :     val = max_indent;
; 438  :   while (master_indent > val)

	mov	eax, DWORD PTR [esi+228]
	cmp	eax, ecx
	jle	SHORT $LN11@set_master
	mov	edx, DWORD PTR [esi+216]
	npad	5
$LL2@set_master:

; 439  :     { master_indent--; num_chars--; }

	dec	eax
	dec	edx
	cmp	eax, ecx
	jg	SHORT $LL2@set_master
	mov	DWORD PTR [esi+228], eax
	mov	DWORD PTR [esi+216], edx
$LN11@set_master:

; 440  :   while (master_indent < val)

	cmp	DWORD PTR [esi+228], ecx
	jge	SHORT $LN5@set_master
	npad	6
$LL4@set_master:

; 441  :     { master_indent++; line_buf[num_chars++] = ' '; }

	mov	eax, DWORD PTR [esi+216]
	inc	DWORD PTR [esi+228]
	mov	BYTE PTR [eax+esi+8], 32		; 00000020H
	inc	DWORD PTR [esi+216]
	cmp	DWORD PTR [esi+228], ecx
	jl	SHORT $LL4@set_master
$LN5@set_master:
	pop	esi

; 442  : }

	pop	ebp
	ret	4
?set_master_indent@kdu_message_formatter@@QAEXH@Z ENDP	; kdu_message_formatter::set_master_indent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??_Gkdu_message@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gkdu_message@@UAEPAXI@Z PROC				; kdu_message::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	test	BYTE PTR ___flags$[ebp], 1
	push	esi
	mov	esi, ecx

; 196  :     virtual ~kdu_message() { return; };

	mov	DWORD PTR [esi], OFFSET ??_7kdu_message@@6B@
	je	SHORT $LN7@scalar
	push	8
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN7@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gkdu_message@@UAEPAXI@Z ENDP				; kdu_message::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??6kdu_message@@QAEAAV0@I@Z
_TEXT	SEGMENT
_text$ = -84						; size = 80
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 4
??6kdu_message@@QAEAAV0@I@Z PROC			; kdu_message::operator<<, COMDAT
; _this$ = ecx

; 265  :       { char text[80];

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 266  :         sprintf(text,(mode_hex)?"%x":"%u",val);

	push	DWORD PTR _val$[ebp]
	mov	esi, ecx
	mov	eax, OFFSET ??_C@_02NJNOFBBI@?$CFx?$AA@
	mov	ecx, OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	cmp	BYTE PTR [esi+4], 0
	cmove	eax, ecx
	push	eax
	lea	eax, DWORD PTR _text$[ebp]
	push	eax
	call	_sprintf

; 267  :         put_text(text); return *this; }

	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR _text$[ebp]
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	push	eax
	call	DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, esi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??6kdu_message@@QAEAAV0@I@Z ENDP			; kdu_message::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??6kdu_message@@QAEAAV0@D@Z
_TEXT	SEGMENT
_text$ = 8						; size = 2
_ch$ = 8						; size = 1
??6kdu_message@@QAEAAV0@D@Z PROC			; kdu_message::operator<<, COMDAT
; _this$ = ecx

; 259  :       { char text[2]; text[0]=ch; text[1]='\0'; put_text(text); return *this; }

	push	ebp
	mov	ebp, esp
	mov	al, BYTE PTR _ch$[ebp]
	push	esi
	mov	esi, ecx
	mov	BYTE PTR _text$[ebp], al
	lea	ecx, DWORD PTR _text$[ebp]
	mov	BYTE PTR _text$[ebp+1], 0
	push	ecx
	mov	ecx, esi
	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+8]
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??6kdu_message@@QAEAAV0@D@Z ENDP			; kdu_message::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??6kdu_message@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
??6kdu_message@@QAEAAV0@PBD@Z PROC			; kdu_message::operator<<, COMDAT
; _this$ = ecx

; 257  :       { put_text(string); return *this; }

	push	ebp
	mov	ebp, esp
	push	esi
	push	DWORD PTR _string$[ebp]
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+8]
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??6kdu_message@@QAEAAV0@PBD@Z ENDP			; kdu_message::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?start_message@kdu_message@@UAEXXZ
_TEXT	SEGMENT
?start_message@kdu_message@@UAEXXZ PROC			; kdu_message::start_message, COMDAT
; _this$ = ecx

; 231  :     virtual void start_message() { return; }

	ret	0
?start_message@kdu_message@@UAEXXZ ENDP			; kdu_message::start_message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?flush@kdu_message@@UAEX_N@Z
_TEXT	SEGMENT
_end_of_message$ = 8					; size = 1
?flush@kdu_message@@UAEX_N@Z PROC			; kdu_message::flush, COMDAT
; _this$ = ecx

; 218  :     virtual void flush(bool end_of_message=false) { return; }

	ret	4
?flush@kdu_message@@UAEX_N@Z ENDP			; kdu_message::flush
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?put_text@kdu_message@@UAEXPBG@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_message@@UAEXPBG@Z PROC			; kdu_message::put_text, COMDAT
; _this$ = ecx

; 209  :     virtual void put_text(const kdu_uint16 *string) { return; }

	ret	4
?put_text@kdu_message@@UAEXPBG@Z ENDP			; kdu_message::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ?put_text@kdu_message@@UAEXPBD@Z
_TEXT	SEGMENT
_string$ = 8						; size = 4
?put_text@kdu_message@@UAEXPBD@Z PROC			; kdu_message::put_text, COMDAT
; _this$ = ecx

; 197  :     virtual void put_text(const char *string) { return; }

	ret	4
?put_text@kdu_message@@UAEXPBD@Z ENDP			; kdu_message::put_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??1kdu_message@@UAE@XZ
_TEXT	SEGMENT
??1kdu_message@@UAE@XZ PROC				; kdu_message::~kdu_message, COMDAT
; _this$ = ecx

; 196  :     virtual ~kdu_message() { return; };

	mov	DWORD PTR [ecx], OFFSET ??_7kdu_message@@6B@
	ret	0
??1kdu_message@@UAE@XZ ENDP				; kdu_message::~kdu_message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\common\kdu_messaging.h
;	COMDAT ??0kdu_message@@QAE@XZ
_TEXT	SEGMENT
??0kdu_message@@QAE@XZ PROC				; kdu_message::kdu_message, COMDAT
; _this$ = ecx

; 195  :     kdu_message() { mode_hex = false; }

	mov	DWORD PTR [ecx], OFFSET ??_7kdu_message@@6B@
	mov	eax, ecx
	mov	BYTE PTR [ecx+4], 0
	ret	0
??0kdu_message@@QAE@XZ ENDP				; kdu_message::kdu_message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?kdu_customize_text@@YAXPBDIPBG1@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_id$ = 12						; size = 4
_lead_in$ = 16						; size = 4
_text$ = 20						; size = 4
?kdu_customize_text@@YAXPBDIPBG1@Z PROC			; kdu_customize_text, COMDAT

; 189  : {

	push	ebp
	mov	ebp, esp

; 190  :   text_register.add(context,id,lead_in,text);

	push	DWORD PTR _text$[ebp]
	mov	ecx, OFFSET ?text_register@@3Vkd_text_register@@A
	push	DWORD PTR _lead_in$[ebp]
	push	DWORD PTR _id$[ebp]
	push	DWORD PTR _context$[ebp]
	call	?add@kd_text_register@@QAEXPBDIPBG1@Z	; kd_text_register::add

; 191  : }

	pop	ebp
	ret	0
?kdu_customize_text@@YAXPBDIPBG1@Z ENDP			; kdu_customize_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?kdu_customize_text@@YAXPBDI00@Z
_TEXT	SEGMENT
_context$ = 8						; size = 4
_id$ = 12						; size = 4
_lead_in$ = 16						; size = 4
_text$ = 20						; size = 4
?kdu_customize_text@@YAXPBDI00@Z PROC			; kdu_customize_text, COMDAT

; 178  : {

	push	ebp
	mov	ebp, esp

; 179  :   text_register.add(context,id,lead_in,text);

	push	DWORD PTR _text$[ebp]
	mov	ecx, OFFSET ?text_register@@3Vkd_text_register@@A
	push	DWORD PTR _lead_in$[ebp]
	push	DWORD PTR _id$[ebp]
	push	DWORD PTR _context$[ebp]
	call	?add@kd_text_register@@QAEXPBDI00@Z	; kd_text_register::add

; 180  : }

	pop	ebp
	ret	0
?kdu_customize_text@@YAXPBDI00@Z ENDP			; kdu_customize_text
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?kdu_customize_errors@@YAXPAVkdu_message@@@Z
_TEXT	SEGMENT
_handler$ = 8						; size = 4
?kdu_customize_errors@@YAXPAVkdu_message@@@Z PROC	; kdu_customize_errors, COMDAT

; 167  : {

	push	ebp
	mov	ebp, esp

; 168  :   err_handler = handler;

	mov	eax, DWORD PTR _handler$[ebp]
	mov	DWORD PTR ?err_handler@@3PAVkdu_message@@A, eax

; 169  : }

	pop	ebp
	ret	0
?kdu_customize_errors@@YAXPAVkdu_message@@@Z ENDP	; kdu_customize_errors
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\study\jpeg2000\visually_lossless_jpeg2000\modifiedkakadu\coresys\messaging\messaging.cpp
;	COMDAT ?kdu_customize_warnings@@YAXPAVkdu_message@@@Z
_TEXT	SEGMENT
_handler$ = 8						; size = 4
?kdu_customize_warnings@@YAXPAVkdu_message@@@Z PROC	; kdu_customize_warnings, COMDAT

; 157  : {

	push	ebp
	mov	ebp, esp

; 158  :   warn_handler = handler;

	mov	eax, DWORD PTR _handler$[ebp]
	mov	DWORD PTR ?warn_handler@@3PAVkdu_message@@A, eax

; 159  : }

	pop	ebp
	ret	0
?kdu_customize_warnings@@YAXPAVkdu_message@@@Z ENDP	; kdu_customize_warnings
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

	push	ebp
	mov	ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	-1
	push	DWORD PTR __Buffer$[ebp]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

	push	ebp
	mov	ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	-1
	push	DWORD PTR __Buffer$[ebp]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

	push	ebp
	mov	ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __BufferCount$[ebp]
	push	DWORD PTR __Buffer$[ebp]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1391 : }

	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\visual studio\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
